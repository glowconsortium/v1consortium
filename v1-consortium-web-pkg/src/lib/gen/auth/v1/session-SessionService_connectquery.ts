// @generated by protoc-gen-connect-query v2.2.0 with parameter "target=ts"
// @generated from file auth/v1/session.proto (package v1consortium.auth, syntax proto3)
/* eslint-disable */

import { SessionService } from "./session_pb";

/**
 * Session Management
 *
 * @generated from rpc v1consortium.auth.SessionService.CreateSession
 */
export const createSession = SessionService.method.createSession;

/**
 * @generated from rpc v1consortium.auth.SessionService.ValidateSession
 */
export const validateSession = SessionService.method.validateSession;

/**
 * @generated from rpc v1consortium.auth.SessionService.RefreshSession
 */
export const refreshSession = SessionService.method.refreshSession;

/**
 * @generated from rpc v1consortium.auth.SessionService.RevokeSession
 */
export const revokeSession = SessionService.method.revokeSession;

/**
 * @generated from rpc v1consortium.auth.SessionService.GetActiveSessions
 */
export const getActiveSessions = SessionService.method.getActiveSessions;

/**
 * @generated from rpc v1consortium.auth.SessionService.RevokeAllSessions
 */
export const revokeAllSessions = SessionService.method.revokeAllSessions;

/**
 * Token Management
 *
 * @generated from rpc v1consortium.auth.SessionService.CreateToken
 */
export const createToken = SessionService.method.createToken;

/**
 * @generated from rpc v1consortium.auth.SessionService.ValidateToken
 */
export const validateToken = SessionService.method.validateToken;

/**
 * @generated from rpc v1consortium.auth.SessionService.RevokeToken
 */
export const revokeToken = SessionService.method.revokeToken;

/**
 * @generated from rpc v1consortium.auth.SessionService.CleanupExpiredTokens
 */
export const cleanupExpiredTokens = SessionService.method.cleanupExpiredTokens;
