// ==========================================================================
// Code generated and maintained by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: pbentity/drug_alcohol_tests.proto

package pbentity

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DrugAlcoholTests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                               //
	OrganizationId           string                 `protobuf:"bytes,2,opt,name=OrganizationId,proto3" json:"OrganizationId,omitempty"`                       //
	UserId                   string                 `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`                                       //
	ProgramId                string                 `protobuf:"bytes,4,opt,name=ProgramId,proto3" json:"ProgramId,omitempty"`                                 //
	SelectionId              string                 `protobuf:"bytes,5,opt,name=SelectionId,proto3" json:"SelectionId,omitempty"`                             //
	TestType                 string                 `protobuf:"bytes,6,opt,name=TestType,proto3" json:"TestType,omitempty"`                                   //
	TestCategory             string                 `protobuf:"bytes,7,opt,name=TestCategory,proto3" json:"TestCategory,omitempty"`                           //
	Status                   string                 `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`                                       //
	Result                   string                 `protobuf:"bytes,9,opt,name=Result,proto3" json:"Result,omitempty"`                                       //
	IsDotTest                bool                   `protobuf:"varint,10,opt,name=IsDotTest,proto3" json:"IsDotTest,omitempty"`                               //
	OrderedDate              *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=OrderedDate,proto3" json:"OrderedDate,omitempty"`                            //
	OrderedBy                string                 `protobuf:"bytes,12,opt,name=OrderedBy,proto3" json:"OrderedBy,omitempty"`                                //
	DueDate                  *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=DueDate,proto3" json:"DueDate,omitempty"`                                    //
	ExternalOrderId          string                 `protobuf:"bytes,14,opt,name=ExternalOrderId,proto3" json:"ExternalOrderId,omitempty"`                    //
	ExternalFacilityId       string                 `protobuf:"bytes,15,opt,name=ExternalFacilityId,proto3" json:"ExternalFacilityId,omitempty"`              //
	FacilityName             string                 `protobuf:"bytes,16,opt,name=FacilityName,proto3" json:"FacilityName,omitempty"`                          //
	FacilityAddress          string                 `protobuf:"bytes,17,opt,name=FacilityAddress,proto3" json:"FacilityAddress,omitempty"`                    //
	CollectionDate           *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=CollectionDate,proto3" json:"CollectionDate,omitempty"`                      //
	CollectedBy              string                 `protobuf:"bytes,19,opt,name=CollectedBy,proto3" json:"CollectedBy,omitempty"`                            //
	LabId                    string                 `protobuf:"bytes,20,opt,name=LabId,proto3" json:"LabId,omitempty"`                                        //
	LabAccessionNumber       string                 `protobuf:"bytes,21,opt,name=LabAccessionNumber,proto3" json:"LabAccessionNumber,omitempty"`              //
	ResultDate               *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=ResultDate,proto3" json:"ResultDate,omitempty"`                              //
	ResultReceivedDate       *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=ResultReceivedDate,proto3" json:"ResultReceivedDate,omitempty"`              //
	MroReviewRequired        bool                   `protobuf:"varint,24,opt,name=MroReviewRequired,proto3" json:"MroReviewRequired,omitempty"`               //
	MroId                    string                 `protobuf:"bytes,25,opt,name=MroId,proto3" json:"MroId,omitempty"`                                        //
	MroReviewDate            *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=MroReviewDate,proto3" json:"MroReviewDate,omitempty"`                        //
	MroNotes                 string                 `protobuf:"bytes,27,opt,name=MroNotes,proto3" json:"MroNotes,omitempty"`                                  //
	RequiresImmediateRemoval bool                   `protobuf:"varint,28,opt,name=RequiresImmediateRemoval,proto3" json:"RequiresImmediateRemoval,omitempty"` //
	ReturnToDutyRequired     bool                   `protobuf:"varint,29,opt,name=ReturnToDutyRequired,proto3" json:"ReturnToDutyRequired,omitempty"`         //
	FollowUpTestsRequired    int32                  `protobuf:"varint,30,opt,name=FollowUpTestsRequired,proto3" json:"FollowUpTestsRequired,omitempty"`       //
	Notes                    string                 `protobuf:"bytes,31,opt,name=Notes,proto3" json:"Notes,omitempty"`                                        //
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`                                //
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`                                //
}

func (x *DrugAlcoholTests) Reset() {
	*x = DrugAlcoholTests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbentity_drug_alcohol_tests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrugAlcoholTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrugAlcoholTests) ProtoMessage() {}

func (x *DrugAlcoholTests) ProtoReflect() protoreflect.Message {
	mi := &file_pbentity_drug_alcohol_tests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrugAlcoholTests.ProtoReflect.Descriptor instead.
func (*DrugAlcoholTests) Descriptor() ([]byte, []int) {
	return file_pbentity_drug_alcohol_tests_proto_rawDescGZIP(), []int{0}
}

func (x *DrugAlcoholTests) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DrugAlcoholTests) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DrugAlcoholTests) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DrugAlcoholTests) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *DrugAlcoholTests) GetSelectionId() string {
	if x != nil {
		return x.SelectionId
	}
	return ""
}

func (x *DrugAlcoholTests) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *DrugAlcoholTests) GetTestCategory() string {
	if x != nil {
		return x.TestCategory
	}
	return ""
}

func (x *DrugAlcoholTests) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DrugAlcoholTests) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *DrugAlcoholTests) GetIsDotTest() bool {
	if x != nil {
		return x.IsDotTest
	}
	return false
}

func (x *DrugAlcoholTests) GetOrderedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderedDate
	}
	return nil
}

func (x *DrugAlcoholTests) GetOrderedBy() string {
	if x != nil {
		return x.OrderedBy
	}
	return ""
}

func (x *DrugAlcoholTests) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *DrugAlcoholTests) GetExternalOrderId() string {
	if x != nil {
		return x.ExternalOrderId
	}
	return ""
}

func (x *DrugAlcoholTests) GetExternalFacilityId() string {
	if x != nil {
		return x.ExternalFacilityId
	}
	return ""
}

func (x *DrugAlcoholTests) GetFacilityName() string {
	if x != nil {
		return x.FacilityName
	}
	return ""
}

func (x *DrugAlcoholTests) GetFacilityAddress() string {
	if x != nil {
		return x.FacilityAddress
	}
	return ""
}

func (x *DrugAlcoholTests) GetCollectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionDate
	}
	return nil
}

func (x *DrugAlcoholTests) GetCollectedBy() string {
	if x != nil {
		return x.CollectedBy
	}
	return ""
}

func (x *DrugAlcoholTests) GetLabId() string {
	if x != nil {
		return x.LabId
	}
	return ""
}

func (x *DrugAlcoholTests) GetLabAccessionNumber() string {
	if x != nil {
		return x.LabAccessionNumber
	}
	return ""
}

func (x *DrugAlcoholTests) GetResultDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultDate
	}
	return nil
}

func (x *DrugAlcoholTests) GetResultReceivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultReceivedDate
	}
	return nil
}

func (x *DrugAlcoholTests) GetMroReviewRequired() bool {
	if x != nil {
		return x.MroReviewRequired
	}
	return false
}

func (x *DrugAlcoholTests) GetMroId() string {
	if x != nil {
		return x.MroId
	}
	return ""
}

func (x *DrugAlcoholTests) GetMroReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MroReviewDate
	}
	return nil
}

func (x *DrugAlcoholTests) GetMroNotes() string {
	if x != nil {
		return x.MroNotes
	}
	return ""
}

func (x *DrugAlcoholTests) GetRequiresImmediateRemoval() bool {
	if x != nil {
		return x.RequiresImmediateRemoval
	}
	return false
}

func (x *DrugAlcoholTests) GetReturnToDutyRequired() bool {
	if x != nil {
		return x.ReturnToDutyRequired
	}
	return false
}

func (x *DrugAlcoholTests) GetFollowUpTestsRequired() int32 {
	if x != nil {
		return x.FollowUpTestsRequired
	}
	return 0
}

func (x *DrugAlcoholTests) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *DrugAlcoholTests) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DrugAlcoholTests) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_pbentity_drug_alcohol_tests_proto protoreflect.FileDescriptor

var file_pbentity_drug_alcohol_tests_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x72, 0x75, 0x67, 0x5f,
	0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0,
	0x0a, 0x0a, 0x10, 0x44, 0x72, 0x75, 0x67, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x6f, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x6f, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34, 0x0a,
	0x07, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x62, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x61, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x4d, 0x72, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x4d, 0x72, 0x6f, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x4d, 0x72, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4d, 0x72, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x72, 0x6f, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x72, 0x6f, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a,
	0x14, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x44, 0x75, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x6f, 0x44, 0x75, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x1b, 0x5a, 0x19, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbentity_drug_alcohol_tests_proto_rawDescOnce sync.Once
	file_pbentity_drug_alcohol_tests_proto_rawDescData = file_pbentity_drug_alcohol_tests_proto_rawDesc
)

func file_pbentity_drug_alcohol_tests_proto_rawDescGZIP() []byte {
	file_pbentity_drug_alcohol_tests_proto_rawDescOnce.Do(func() {
		file_pbentity_drug_alcohol_tests_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbentity_drug_alcohol_tests_proto_rawDescData)
	})
	return file_pbentity_drug_alcohol_tests_proto_rawDescData
}

var file_pbentity_drug_alcohol_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pbentity_drug_alcohol_tests_proto_goTypes = []interface{}{
	(*DrugAlcoholTests)(nil),      // 0: pbentity.DrugAlcoholTests
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_pbentity_drug_alcohol_tests_proto_depIdxs = []int32{
	1, // 0: pbentity.DrugAlcoholTests.OrderedDate:type_name -> google.protobuf.Timestamp
	1, // 1: pbentity.DrugAlcoholTests.DueDate:type_name -> google.protobuf.Timestamp
	1, // 2: pbentity.DrugAlcoholTests.CollectionDate:type_name -> google.protobuf.Timestamp
	1, // 3: pbentity.DrugAlcoholTests.ResultDate:type_name -> google.protobuf.Timestamp
	1, // 4: pbentity.DrugAlcoholTests.ResultReceivedDate:type_name -> google.protobuf.Timestamp
	1, // 5: pbentity.DrugAlcoholTests.MroReviewDate:type_name -> google.protobuf.Timestamp
	1, // 6: pbentity.DrugAlcoholTests.CreatedAt:type_name -> google.protobuf.Timestamp
	1, // 7: pbentity.DrugAlcoholTests.UpdatedAt:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_pbentity_drug_alcohol_tests_proto_init() }
func file_pbentity_drug_alcohol_tests_proto_init() {
	if File_pbentity_drug_alcohol_tests_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbentity_drug_alcohol_tests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrugAlcoholTests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbentity_drug_alcohol_tests_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbentity_drug_alcohol_tests_proto_goTypes,
		DependencyIndexes: file_pbentity_drug_alcohol_tests_proto_depIdxs,
		MessageInfos:      file_pbentity_drug_alcohol_tests_proto_msgTypes,
	}.Build()
	File_pbentity_drug_alcohol_tests_proto = out.File
	file_pbentity_drug_alcohol_tests_proto_rawDesc = nil
	file_pbentity_drug_alcohol_tests_proto_goTypes = nil
	file_pbentity_drug_alcohol_tests_proto_depIdxs = nil
}
