// ==========================================================================
// Code generated and maintained by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: pbentity/dot_physicals.proto

package pbentity

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DotPhysicals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                                //
	OrganizationId            string                 `protobuf:"bytes,2,opt,name=OrganizationId,proto3" json:"OrganizationId,omitempty"`                        //
	UserId                    string                 `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`                                        //
	Status                    string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`                                        //
	ScheduledDate             *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ScheduledDate,proto3" json:"ScheduledDate,omitempty"`                          //
	ScheduledBy               string                 `protobuf:"bytes,6,opt,name=ScheduledBy,proto3" json:"ScheduledBy,omitempty"`                              //
	ExaminerId                string                 `protobuf:"bytes,7,opt,name=ExaminerId,proto3" json:"ExaminerId,omitempty"`                                //
	ExaminerName              string                 `protobuf:"bytes,8,opt,name=ExaminerName,proto3" json:"ExaminerName,omitempty"`                            //
	ExaminerLicenseNumber     string                 `protobuf:"bytes,9,opt,name=ExaminerLicenseNumber,proto3" json:"ExaminerLicenseNumber,omitempty"`          //
	ExaminerRegistryNumber    string                 `protobuf:"bytes,10,opt,name=ExaminerRegistryNumber,proto3" json:"ExaminerRegistryNumber,omitempty"`       //
	ClinicName                string                 `protobuf:"bytes,11,opt,name=ClinicName,proto3" json:"ClinicName,omitempty"`                               //
	ClinicAddress             string                 `protobuf:"bytes,12,opt,name=ClinicAddress,proto3" json:"ClinicAddress,omitempty"`                         //
	ClinicPhone               string                 `protobuf:"bytes,13,opt,name=ClinicPhone,proto3" json:"ClinicPhone,omitempty"`                             //
	ExaminationDate           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=ExaminationDate,proto3" json:"ExaminationDate,omitempty"`                     //
	CertificateNumber         string                 `protobuf:"bytes,15,opt,name=CertificateNumber,proto3" json:"CertificateNumber,omitempty"`                 //
	CertificateIssueDate      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=CertificateIssueDate,proto3" json:"CertificateIssueDate,omitempty"`           //
	CertificateExpirationDate *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=CertificateExpirationDate,proto3" json:"CertificateExpirationDate,omitempty"` //
	MedicalQualification      string                 `protobuf:"bytes,18,opt,name=MedicalQualification,proto3" json:"MedicalQualification,omitempty"`           //
	Restrictions              string                 `protobuf:"bytes,19,opt,name=Restrictions,proto3" json:"Restrictions,omitempty"`                           //
	Exemptions                string                 `protobuf:"bytes,20,opt,name=Exemptions,proto3" json:"Exemptions,omitempty"`                               //
	RequiresMonitoring        bool                   `protobuf:"varint,21,opt,name=RequiresMonitoring,proto3" json:"RequiresMonitoring,omitempty"`              //
	MonitoringRequirements    string                 `protobuf:"bytes,22,opt,name=MonitoringRequirements,proto3" json:"MonitoringRequirements,omitempty"`       //
	NextRequiredDate          *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=NextRequiredDate,proto3" json:"NextRequiredDate,omitempty"`                   //
	CertificateUrl            string                 `protobuf:"bytes,24,opt,name=CertificateUrl,proto3" json:"CertificateUrl,omitempty"`                       //
	CertificateUploadedAt     *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=CertificateUploadedAt,proto3" json:"CertificateUploadedAt,omitempty"`         //
	Notes                     string                 `protobuf:"bytes,26,opt,name=Notes,proto3" json:"Notes,omitempty"`                                         //
	CreatedAt                 *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`                                 //
	UpdatedAt                 *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`                                 //
}

func (x *DotPhysicals) Reset() {
	*x = DotPhysicals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbentity_dot_physicals_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DotPhysicals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DotPhysicals) ProtoMessage() {}

func (x *DotPhysicals) ProtoReflect() protoreflect.Message {
	mi := &file_pbentity_dot_physicals_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DotPhysicals.ProtoReflect.Descriptor instead.
func (*DotPhysicals) Descriptor() ([]byte, []int) {
	return file_pbentity_dot_physicals_proto_rawDescGZIP(), []int{0}
}

func (x *DotPhysicals) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DotPhysicals) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *DotPhysicals) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DotPhysicals) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DotPhysicals) GetScheduledDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledDate
	}
	return nil
}

func (x *DotPhysicals) GetScheduledBy() string {
	if x != nil {
		return x.ScheduledBy
	}
	return ""
}

func (x *DotPhysicals) GetExaminerId() string {
	if x != nil {
		return x.ExaminerId
	}
	return ""
}

func (x *DotPhysicals) GetExaminerName() string {
	if x != nil {
		return x.ExaminerName
	}
	return ""
}

func (x *DotPhysicals) GetExaminerLicenseNumber() string {
	if x != nil {
		return x.ExaminerLicenseNumber
	}
	return ""
}

func (x *DotPhysicals) GetExaminerRegistryNumber() string {
	if x != nil {
		return x.ExaminerRegistryNumber
	}
	return ""
}

func (x *DotPhysicals) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *DotPhysicals) GetClinicAddress() string {
	if x != nil {
		return x.ClinicAddress
	}
	return ""
}

func (x *DotPhysicals) GetClinicPhone() string {
	if x != nil {
		return x.ClinicPhone
	}
	return ""
}

func (x *DotPhysicals) GetExaminationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExaminationDate
	}
	return nil
}

func (x *DotPhysicals) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *DotPhysicals) GetCertificateIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateIssueDate
	}
	return nil
}

func (x *DotPhysicals) GetCertificateExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateExpirationDate
	}
	return nil
}

func (x *DotPhysicals) GetMedicalQualification() string {
	if x != nil {
		return x.MedicalQualification
	}
	return ""
}

func (x *DotPhysicals) GetRestrictions() string {
	if x != nil {
		return x.Restrictions
	}
	return ""
}

func (x *DotPhysicals) GetExemptions() string {
	if x != nil {
		return x.Exemptions
	}
	return ""
}

func (x *DotPhysicals) GetRequiresMonitoring() bool {
	if x != nil {
		return x.RequiresMonitoring
	}
	return false
}

func (x *DotPhysicals) GetMonitoringRequirements() string {
	if x != nil {
		return x.MonitoringRequirements
	}
	return ""
}

func (x *DotPhysicals) GetNextRequiredDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRequiredDate
	}
	return nil
}

func (x *DotPhysicals) GetCertificateUrl() string {
	if x != nil {
		return x.CertificateUrl
	}
	return ""
}

func (x *DotPhysicals) GetCertificateUploadedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateUploadedAt
	}
	return nil
}

func (x *DotPhysicals) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *DotPhysicals) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DotPhysicals) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_pbentity_dot_physicals_proto protoreflect.FileDescriptor

var file_pbentity_dot_physicals_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x64, 0x6f, 0x74, 0x5f, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x0a, 0x0a, 0x0c, 0x44, 0x6f,
	0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x45, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46,
	0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x50,
	0x0a, 0x15, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x1b, 0x5a, 0x19, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbentity_dot_physicals_proto_rawDescOnce sync.Once
	file_pbentity_dot_physicals_proto_rawDescData = file_pbentity_dot_physicals_proto_rawDesc
)

func file_pbentity_dot_physicals_proto_rawDescGZIP() []byte {
	file_pbentity_dot_physicals_proto_rawDescOnce.Do(func() {
		file_pbentity_dot_physicals_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbentity_dot_physicals_proto_rawDescData)
	})
	return file_pbentity_dot_physicals_proto_rawDescData
}

var file_pbentity_dot_physicals_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pbentity_dot_physicals_proto_goTypes = []interface{}{
	(*DotPhysicals)(nil),          // 0: pbentity.DotPhysicals
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_pbentity_dot_physicals_proto_depIdxs = []int32{
	1, // 0: pbentity.DotPhysicals.ScheduledDate:type_name -> google.protobuf.Timestamp
	1, // 1: pbentity.DotPhysicals.ExaminationDate:type_name -> google.protobuf.Timestamp
	1, // 2: pbentity.DotPhysicals.CertificateIssueDate:type_name -> google.protobuf.Timestamp
	1, // 3: pbentity.DotPhysicals.CertificateExpirationDate:type_name -> google.protobuf.Timestamp
	1, // 4: pbentity.DotPhysicals.NextRequiredDate:type_name -> google.protobuf.Timestamp
	1, // 5: pbentity.DotPhysicals.CertificateUploadedAt:type_name -> google.protobuf.Timestamp
	1, // 6: pbentity.DotPhysicals.CreatedAt:type_name -> google.protobuf.Timestamp
	1, // 7: pbentity.DotPhysicals.UpdatedAt:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_pbentity_dot_physicals_proto_init() }
func file_pbentity_dot_physicals_proto_init() {
	if File_pbentity_dot_physicals_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbentity_dot_physicals_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DotPhysicals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbentity_dot_physicals_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbentity_dot_physicals_proto_goTypes,
		DependencyIndexes: file_pbentity_dot_physicals_proto_depIdxs,
		MessageInfos:      file_pbentity_dot_physicals_proto_msgTypes,
	}.Build()
	File_pbentity_dot_physicals_proto = out.File
	file_pbentity_dot_physicals_proto_rawDesc = nil
	file_pbentity_dot_physicals_proto_goTypes = nil
	file_pbentity_dot_physicals_proto_depIdxs = nil
}
