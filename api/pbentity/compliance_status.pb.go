// ==========================================================================
// Code generated and maintained by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: pbentity/compliance_status.proto

package pbentity

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComplianceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                                //
	OrganizationId            string                 `protobuf:"bytes,2,opt,name=OrganizationId,proto3" json:"OrganizationId,omitempty"`                        //
	UserId                    string                 `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`                                        //
	IsCompliant               bool                   `protobuf:"varint,4,opt,name=IsCompliant,proto3" json:"IsCompliant,omitempty"`                             //
	CompliancePercentage      string                 `protobuf:"bytes,5,opt,name=CompliancePercentage,proto3" json:"CompliancePercentage,omitempty"`            //
	LastUpdated               *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`                              //
	DrugTestingCurrent        bool                   `protobuf:"varint,7,opt,name=DrugTestingCurrent,proto3" json:"DrugTestingCurrent,omitempty"`               //
	LastDrugTestDate          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=LastDrugTestDate,proto3" json:"LastDrugTestDate,omitempty"`                    //
	NextDrugTestDue           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=NextDrugTestDue,proto3" json:"NextDrugTestDue,omitempty"`                      //
	MvrCurrent                bool                   `protobuf:"varint,10,opt,name=MvrCurrent,proto3" json:"MvrCurrent,omitempty"`                              //
	LastMvrDate               *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=LastMvrDate,proto3" json:"LastMvrDate,omitempty"`                             //
	NextMvrDue                *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=NextMvrDue,proto3" json:"NextMvrDue,omitempty"`                               //
	PhysicalCurrent           bool                   `protobuf:"varint,13,opt,name=PhysicalCurrent,proto3" json:"PhysicalCurrent,omitempty"`                    //
	MedicalCertExpirationDate *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=MedicalCertExpirationDate,proto3" json:"MedicalCertExpirationDate,omitempty"` //
	BackgroundCheckCurrent    bool                   `protobuf:"varint,15,opt,name=BackgroundCheckCurrent,proto3" json:"BackgroundCheckCurrent,omitempty"`      //
	LastBackgroundCheckDate   *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=LastBackgroundCheckDate,proto3" json:"LastBackgroundCheckDate,omitempty"`     //
	TrainingCurrent           bool                   `protobuf:"varint,17,opt,name=TrainingCurrent,proto3" json:"TrainingCurrent,omitempty"`                    //
	LastTrainingDate          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=LastTrainingDate,proto3" json:"LastTrainingDate,omitempty"`                   //
	ViolationsCount           int32                  `protobuf:"varint,19,opt,name=ViolationsCount,proto3" json:"ViolationsCount,omitempty"`                    //
	HighRiskFlags             int32                  `protobuf:"varint,20,opt,name=HighRiskFlags,proto3" json:"HighRiskFlags,omitempty"`                        //
	CreatedAt                 *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`                                 //
	UpdatedAt                 *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`                                 //
}

func (x *ComplianceStatus) Reset() {
	*x = ComplianceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbentity_compliance_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceStatus) ProtoMessage() {}

func (x *ComplianceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pbentity_compliance_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceStatus.ProtoReflect.Descriptor instead.
func (*ComplianceStatus) Descriptor() ([]byte, []int) {
	return file_pbentity_compliance_status_proto_rawDescGZIP(), []int{0}
}

func (x *ComplianceStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceStatus) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ComplianceStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ComplianceStatus) GetIsCompliant() bool {
	if x != nil {
		return x.IsCompliant
	}
	return false
}

func (x *ComplianceStatus) GetCompliancePercentage() string {
	if x != nil {
		return x.CompliancePercentage
	}
	return ""
}

func (x *ComplianceStatus) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ComplianceStatus) GetDrugTestingCurrent() bool {
	if x != nil {
		return x.DrugTestingCurrent
	}
	return false
}

func (x *ComplianceStatus) GetLastDrugTestDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDrugTestDate
	}
	return nil
}

func (x *ComplianceStatus) GetNextDrugTestDue() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDrugTestDue
	}
	return nil
}

func (x *ComplianceStatus) GetMvrCurrent() bool {
	if x != nil {
		return x.MvrCurrent
	}
	return false
}

func (x *ComplianceStatus) GetLastMvrDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMvrDate
	}
	return nil
}

func (x *ComplianceStatus) GetNextMvrDue() *timestamppb.Timestamp {
	if x != nil {
		return x.NextMvrDue
	}
	return nil
}

func (x *ComplianceStatus) GetPhysicalCurrent() bool {
	if x != nil {
		return x.PhysicalCurrent
	}
	return false
}

func (x *ComplianceStatus) GetMedicalCertExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MedicalCertExpirationDate
	}
	return nil
}

func (x *ComplianceStatus) GetBackgroundCheckCurrent() bool {
	if x != nil {
		return x.BackgroundCheckCurrent
	}
	return false
}

func (x *ComplianceStatus) GetLastBackgroundCheckDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBackgroundCheckDate
	}
	return nil
}

func (x *ComplianceStatus) GetTrainingCurrent() bool {
	if x != nil {
		return x.TrainingCurrent
	}
	return false
}

func (x *ComplianceStatus) GetLastTrainingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTrainingDate
	}
	return nil
}

func (x *ComplianceStatus) GetViolationsCount() int32 {
	if x != nil {
		return x.ViolationsCount
	}
	return 0
}

func (x *ComplianceStatus) GetHighRiskFlags() int32 {
	if x != nil {
		return x.HighRiskFlags
	}
	return 0
}

func (x *ComplianceStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ComplianceStatus) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_pbentity_compliance_status_proto protoreflect.FileDescriptor

var file_pbentity_compliance_status_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x09,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x72,
	0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x4c, 0x61,
	0x73, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x44, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x76, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4d, 0x76, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x76, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x76, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x76, 0x72, 0x44, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x76, 0x72, 0x44, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x19, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x4c, 0x61,
	0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x1b, 0x5a, 0x19, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbentity_compliance_status_proto_rawDescOnce sync.Once
	file_pbentity_compliance_status_proto_rawDescData = file_pbentity_compliance_status_proto_rawDesc
)

func file_pbentity_compliance_status_proto_rawDescGZIP() []byte {
	file_pbentity_compliance_status_proto_rawDescOnce.Do(func() {
		file_pbentity_compliance_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbentity_compliance_status_proto_rawDescData)
	})
	return file_pbentity_compliance_status_proto_rawDescData
}

var file_pbentity_compliance_status_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pbentity_compliance_status_proto_goTypes = []interface{}{
	(*ComplianceStatus)(nil),      // 0: pbentity.ComplianceStatus
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_pbentity_compliance_status_proto_depIdxs = []int32{
	1,  // 0: pbentity.ComplianceStatus.LastUpdated:type_name -> google.protobuf.Timestamp
	1,  // 1: pbentity.ComplianceStatus.LastDrugTestDate:type_name -> google.protobuf.Timestamp
	1,  // 2: pbentity.ComplianceStatus.NextDrugTestDue:type_name -> google.protobuf.Timestamp
	1,  // 3: pbentity.ComplianceStatus.LastMvrDate:type_name -> google.protobuf.Timestamp
	1,  // 4: pbentity.ComplianceStatus.NextMvrDue:type_name -> google.protobuf.Timestamp
	1,  // 5: pbentity.ComplianceStatus.MedicalCertExpirationDate:type_name -> google.protobuf.Timestamp
	1,  // 6: pbentity.ComplianceStatus.LastBackgroundCheckDate:type_name -> google.protobuf.Timestamp
	1,  // 7: pbentity.ComplianceStatus.LastTrainingDate:type_name -> google.protobuf.Timestamp
	1,  // 8: pbentity.ComplianceStatus.CreatedAt:type_name -> google.protobuf.Timestamp
	1,  // 9: pbentity.ComplianceStatus.UpdatedAt:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pbentity_compliance_status_proto_init() }
func file_pbentity_compliance_status_proto_init() {
	if File_pbentity_compliance_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbentity_compliance_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbentity_compliance_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbentity_compliance_status_proto_goTypes,
		DependencyIndexes: file_pbentity_compliance_status_proto_depIdxs,
		MessageInfos:      file_pbentity_compliance_status_proto_msgTypes,
	}.Build()
	File_pbentity_compliance_status_proto = out.File
	file_pbentity_compliance_status_proto_rawDesc = nil
	file_pbentity_compliance_status_proto_goTypes = nil
	file_pbentity_compliance_status_proto_depIdxs = nil
}
