// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: services/v1/drug_testing.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	pbentity "v1consortium/api/pbentity"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Testing Program Management
type CreateTestingProgramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId        string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsDotProgram          bool   `protobuf:"varint,3,opt,name=is_dot_program,json=isDotProgram,proto3" json:"is_dot_program,omitempty"`
	DrugPanelType         string `protobuf:"bytes,4,opt,name=drug_panel_type,json=drugPanelType,proto3" json:"drug_panel_type,omitempty" dc:"'5_panel', '10_panel', 'custom'"` // "5_panel", "10_panel", "custom"
	AlcoholTestingEnabled bool   `protobuf:"varint,5,opt,name=alcohol_testing_enabled,json=alcoholTestingEnabled,proto3" json:"alcohol_testing_enabled,omitempty"`
	RandomTestingEnabled  bool   `protobuf:"varint,6,opt,name=random_testing_enabled,json=randomTestingEnabled,proto3" json:"random_testing_enabled,omitempty"`
	RandomTestingRate     string `protobuf:"bytes,7,opt,name=random_testing_rate,json=randomTestingRate,proto3" json:"random_testing_rate,omitempty" dc:"'25%', '50%', etc."`          // "25%", "50%", etc.
	TestingFrequency      string `protobuf:"bytes,8,opt,name=testing_frequency,json=testingFrequency,proto3" json:"testing_frequency,omitempty" dc:"'quarterly', 'monthly', 'annual'"` // "quarterly", "monthly", "annual"
}

func (x *CreateTestingProgramRequest) Reset() {
	*x = CreateTestingProgramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestingProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestingProgramRequest) ProtoMessage() {}

func (x *CreateTestingProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestingProgramRequest.ProtoReflect.Descriptor instead.
func (*CreateTestingProgramRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTestingProgramRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateTestingProgramRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTestingProgramRequest) GetIsDotProgram() bool {
	if x != nil {
		return x.IsDotProgram
	}
	return false
}

func (x *CreateTestingProgramRequest) GetDrugPanelType() string {
	if x != nil {
		return x.DrugPanelType
	}
	return ""
}

func (x *CreateTestingProgramRequest) GetAlcoholTestingEnabled() bool {
	if x != nil {
		return x.AlcoholTestingEnabled
	}
	return false
}

func (x *CreateTestingProgramRequest) GetRandomTestingEnabled() bool {
	if x != nil {
		return x.RandomTestingEnabled
	}
	return false
}

func (x *CreateTestingProgramRequest) GetRandomTestingRate() string {
	if x != nil {
		return x.RandomTestingRate
	}
	return ""
}

func (x *CreateTestingProgramRequest) GetTestingFrequency() string {
	if x != nil {
		return x.TestingFrequency
	}
	return ""
}

type CreateTestingProgramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program *pbentity.TestingPrograms `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
}

func (x *CreateTestingProgramResponse) Reset() {
	*x = CreateTestingProgramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestingProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestingProgramResponse) ProtoMessage() {}

func (x *CreateTestingProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestingProgramResponse.ProtoReflect.Descriptor instead.
func (*CreateTestingProgramResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTestingProgramResponse) GetProgram() *pbentity.TestingPrograms {
	if x != nil {
		return x.Program
	}
	return nil
}

type GetTestingProgramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
}

func (x *GetTestingProgramRequest) Reset() {
	*x = GetTestingProgramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestingProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestingProgramRequest) ProtoMessage() {}

func (x *GetTestingProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestingProgramRequest.ProtoReflect.Descriptor instead.
func (*GetTestingProgramRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{2}
}

func (x *GetTestingProgramRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

type GetTestingProgramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program *pbentity.TestingPrograms `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
}

func (x *GetTestingProgramResponse) Reset() {
	*x = GetTestingProgramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestingProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestingProgramResponse) ProtoMessage() {}

func (x *GetTestingProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestingProgramResponse.ProtoReflect.Descriptor instead.
func (*GetTestingProgramResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{3}
}

func (x *GetTestingProgramResponse) GetProgram() *pbentity.TestingPrograms {
	if x != nil {
		return x.Program
	}
	return nil
}

type ListTestingProgramsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	IsDotProgram   bool   `protobuf:"varint,2,opt,name=is_dot_program,json=isDotProgram,proto3" json:"is_dot_program,omitempty"`
	IsActive       bool   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ListTestingProgramsRequest) Reset() {
	*x = ListTestingProgramsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestingProgramsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestingProgramsRequest) ProtoMessage() {}

func (x *ListTestingProgramsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestingProgramsRequest.ProtoReflect.Descriptor instead.
func (*ListTestingProgramsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{4}
}

func (x *ListTestingProgramsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListTestingProgramsRequest) GetIsDotProgram() bool {
	if x != nil {
		return x.IsDotProgram
	}
	return false
}

func (x *ListTestingProgramsRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ListTestingProgramsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Programs []*pbentity.TestingPrograms `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs,omitempty"`
}

func (x *ListTestingProgramsResponse) Reset() {
	*x = ListTestingProgramsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestingProgramsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestingProgramsResponse) ProtoMessage() {}

func (x *ListTestingProgramsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestingProgramsResponse.ProtoReflect.Descriptor instead.
func (*ListTestingProgramsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{5}
}

func (x *ListTestingProgramsResponse) GetPrograms() []*pbentity.TestingPrograms {
	if x != nil {
		return x.Programs
	}
	return nil
}

// Drug Test Management
type OrderDrugTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId     string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId             string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProgramId          string                 `protobuf:"bytes,3,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	TestType           string                 `protobuf:"bytes,4,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty" dc:"'pre_employment', 'random', 'post_accident', etc."` // "pre_employment", "random", "post_accident", etc.
	TestCategory       string                 `protobuf:"bytes,5,opt,name=test_category,json=testCategory,proto3" json:"test_category,omitempty" dc:"'drug', 'alcohol', 'both'"`             // "drug", "alcohol", "both"
	IsDotTest          bool                   `protobuf:"varint,6,opt,name=is_dot_test,json=isDotTest,proto3" json:"is_dot_test,omitempty"`
	DueDate            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	OrderedBy          string                 `protobuf:"bytes,8,opt,name=ordered_by,json=orderedBy,proto3" json:"ordered_by,omitempty"`
	Reason             string                 `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	FacilityPreference string                 `protobuf:"bytes,10,opt,name=facility_preference,json=facilityPreference,proto3" json:"facility_preference,omitempty"`
}

func (x *OrderDrugTestRequest) Reset() {
	*x = OrderDrugTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDrugTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDrugTestRequest) ProtoMessage() {}

func (x *OrderDrugTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDrugTestRequest.ProtoReflect.Descriptor instead.
func (*OrderDrugTestRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{6}
}

func (x *OrderDrugTestRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OrderDrugTestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OrderDrugTestRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *OrderDrugTestRequest) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *OrderDrugTestRequest) GetTestCategory() string {
	if x != nil {
		return x.TestCategory
	}
	return ""
}

func (x *OrderDrugTestRequest) GetIsDotTest() bool {
	if x != nil {
		return x.IsDotTest
	}
	return false
}

func (x *OrderDrugTestRequest) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *OrderDrugTestRequest) GetOrderedBy() string {
	if x != nil {
		return x.OrderedBy
	}
	return ""
}

func (x *OrderDrugTestRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *OrderDrugTestRequest) GetFacilityPreference() string {
	if x != nil {
		return x.FacilityPreference
	}
	return ""
}

type OrderDrugTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test             *pbentity.DrugAlcoholTests `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	ExternalOrderId  string                     `protobuf:"bytes,2,opt,name=external_order_id,json=externalOrderId,proto3" json:"external_order_id,omitempty"`
	FacilityName     string                     `protobuf:"bytes,3,opt,name=facility_name,json=facilityName,proto3" json:"facility_name,omitempty"`
	FacilityAddress  string                     `protobuf:"bytes,4,opt,name=facility_address,json=facilityAddress,proto3" json:"facility_address,omitempty"`
	ConfirmationCode string                     `protobuf:"bytes,5,opt,name=confirmation_code,json=confirmationCode,proto3" json:"confirmation_code,omitempty"`
}

func (x *OrderDrugTestResponse) Reset() {
	*x = OrderDrugTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDrugTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDrugTestResponse) ProtoMessage() {}

func (x *OrderDrugTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDrugTestResponse.ProtoReflect.Descriptor instead.
func (*OrderDrugTestResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{7}
}

func (x *OrderDrugTestResponse) GetTest() *pbentity.DrugAlcoholTests {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *OrderDrugTestResponse) GetExternalOrderId() string {
	if x != nil {
		return x.ExternalOrderId
	}
	return ""
}

func (x *OrderDrugTestResponse) GetFacilityName() string {
	if x != nil {
		return x.FacilityName
	}
	return ""
}

func (x *OrderDrugTestResponse) GetFacilityAddress() string {
	if x != nil {
		return x.FacilityAddress
	}
	return ""
}

func (x *OrderDrugTestResponse) GetConfirmationCode() string {
	if x != nil {
		return x.ConfirmationCode
	}
	return ""
}

type GetDrugTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *GetDrugTestRequest) Reset() {
	*x = GetDrugTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrugTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrugTestRequest) ProtoMessage() {}

func (x *GetDrugTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrugTestRequest.ProtoReflect.Descriptor instead.
func (*GetDrugTestRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{8}
}

func (x *GetDrugTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type GetDrugTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *pbentity.DrugAlcoholTests `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *GetDrugTestResponse) Reset() {
	*x = GetDrugTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrugTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrugTestResponse) ProtoMessage() {}

func (x *GetDrugTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrugTestResponse.ProtoReflect.Descriptor instead.
func (*GetDrugTestResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{9}
}

func (x *GetDrugTestResponse) GetTest() *pbentity.DrugAlcoholTests {
	if x != nil {
		return x.Test
	}
	return nil
}

type UpdateDrugTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId         string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" dc:"'ordered', 'in_progress', 'completed', 'cancelled'"`     // "ordered", "in_progress", "completed", "cancelled"
	Result         string                 `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty" dc:"'negative', 'positive', 'dilute', 'invalid', 'pending'"` // "negative", "positive", "dilute", "invalid", "pending"
	CollectionDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=collection_date,json=collectionDate,proto3" json:"collection_date,omitempty"`
	ResultDate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=result_date,json=resultDate,proto3" json:"result_date,omitempty"`
	MroReviewedBy  string                 `protobuf:"bytes,6,opt,name=mro_reviewed_by,json=mroReviewedBy,proto3" json:"mro_reviewed_by,omitempty"`
	MroReviewDate  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=mro_review_date,json=mroReviewDate,proto3" json:"mro_review_date,omitempty"`
	LabResults     string                 `protobuf:"bytes,8,opt,name=lab_results,json=labResults,proto3" json:"lab_results,omitempty" dc:"JSON string"` // JSON string
	Notes          string                 `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *UpdateDrugTestRequest) Reset() {
	*x = UpdateDrugTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDrugTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDrugTestRequest) ProtoMessage() {}

func (x *UpdateDrugTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDrugTestRequest.ProtoReflect.Descriptor instead.
func (*UpdateDrugTestRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDrugTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *UpdateDrugTestRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateDrugTestRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UpdateDrugTestRequest) GetCollectionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionDate
	}
	return nil
}

func (x *UpdateDrugTestRequest) GetResultDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultDate
	}
	return nil
}

func (x *UpdateDrugTestRequest) GetMroReviewedBy() string {
	if x != nil {
		return x.MroReviewedBy
	}
	return ""
}

func (x *UpdateDrugTestRequest) GetMroReviewDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MroReviewDate
	}
	return nil
}

func (x *UpdateDrugTestRequest) GetLabResults() string {
	if x != nil {
		return x.LabResults
	}
	return ""
}

func (x *UpdateDrugTestRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type UpdateDrugTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *pbentity.DrugAlcoholTests `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *UpdateDrugTestResponse) Reset() {
	*x = UpdateDrugTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDrugTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDrugTestResponse) ProtoMessage() {}

func (x *UpdateDrugTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDrugTestResponse.ProtoReflect.Descriptor instead.
func (*UpdateDrugTestResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDrugTestResponse) GetTest() *pbentity.DrugAlcoholTests {
	if x != nil {
		return x.Test
	}
	return nil
}

type ListDrugTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" Optional:"filter by user"`             // Optional: filter by user
	ProgramId      string                 `protobuf:"bytes,3,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" Optional:"filter by program"` // Optional: filter by program
	TestType       string                 `protobuf:"bytes,4,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty" Optional:"filter by test type"`  // Optional: filter by test type
	Status         string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" Optional:"filter by status"`                         // Optional: filter by status
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Page           int32                  `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDrugTestsRequest) Reset() {
	*x = ListDrugTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDrugTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrugTestsRequest) ProtoMessage() {}

func (x *ListDrugTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrugTestsRequest.ProtoReflect.Descriptor instead.
func (*ListDrugTestsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{12}
}

func (x *ListDrugTestsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListDrugTestsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListDrugTestsRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *ListDrugTestsRequest) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *ListDrugTestsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListDrugTestsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListDrugTestsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListDrugTestsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDrugTestsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListDrugTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests      []*pbentity.DrugAlcoholTests `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	TotalCount int32                        `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page       int32                        `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32                        `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDrugTestsResponse) Reset() {
	*x = ListDrugTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDrugTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrugTestsResponse) ProtoMessage() {}

func (x *ListDrugTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrugTestsResponse.ProtoReflect.Descriptor instead.
func (*ListDrugTestsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{13}
}

func (x *ListDrugTestsResponse) GetTests() []*pbentity.DrugAlcoholTests {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *ListDrugTestsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListDrugTestsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDrugTestsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Random Testing Management
type CreateRandomPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId     string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProgramId          string `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PoolType           string `protobuf:"bytes,4,opt,name=pool_type,json=poolType,proto3" json:"pool_type,omitempty" dc:"'dot_drug', 'dot_alcohol', 'non_dot_drug', etc."`      // "dot_drug", "dot_alcohol", "non_dot_drug", etc.
	SelectionFrequency string `protobuf:"bytes,5,opt,name=selection_frequency,json=selectionFrequency,proto3" json:"selection_frequency,omitempty" dc:"'quarterly', 'monthly'"` // "quarterly", "monthly"
	TargetPercentage   string `protobuf:"bytes,6,opt,name=target_percentage,json=targetPercentage,proto3" json:"target_percentage,omitempty" dc:"'25%', '10%', etc."`           // "25%", "10%", etc.
	IsActive           bool   `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *CreateRandomPoolRequest) Reset() {
	*x = CreateRandomPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRandomPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRandomPoolRequest) ProtoMessage() {}

func (x *CreateRandomPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRandomPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateRandomPoolRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{14}
}

func (x *CreateRandomPoolRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateRandomPoolRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *CreateRandomPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRandomPoolRequest) GetPoolType() string {
	if x != nil {
		return x.PoolType
	}
	return ""
}

func (x *CreateRandomPoolRequest) GetSelectionFrequency() string {
	if x != nil {
		return x.SelectionFrequency
	}
	return ""
}

func (x *CreateRandomPoolRequest) GetTargetPercentage() string {
	if x != nil {
		return x.TargetPercentage
	}
	return ""
}

func (x *CreateRandomPoolRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CreateRandomPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool *pbentity.RandomTestingPools `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *CreateRandomPoolResponse) Reset() {
	*x = CreateRandomPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRandomPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRandomPoolResponse) ProtoMessage() {}

func (x *CreateRandomPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRandomPoolResponse.ProtoReflect.Descriptor instead.
func (*CreateRandomPoolResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{15}
}

func (x *CreateRandomPoolResponse) GetPool() *pbentity.RandomTestingPools {
	if x != nil {
		return x.Pool
	}
	return nil
}

type AddUsersToPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId  string   `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	AddedBy string   `protobuf:"bytes,3,opt,name=added_by,json=addedBy,proto3" json:"added_by,omitempty"`
}

func (x *AddUsersToPoolRequest) Reset() {
	*x = AddUsersToPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUsersToPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUsersToPoolRequest) ProtoMessage() {}

func (x *AddUsersToPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUsersToPoolRequest.ProtoReflect.Descriptor instead.
func (*AddUsersToPoolRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{16}
}

func (x *AddUsersToPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *AddUsersToPoolRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *AddUsersToPoolRequest) GetAddedBy() string {
	if x != nil {
		return x.AddedBy
	}
	return ""
}

type AddUsersToPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberships []*pbentity.PoolMemberships `protobuf:"bytes,1,rep,name=memberships,proto3" json:"memberships,omitempty"`
}

func (x *AddUsersToPoolResponse) Reset() {
	*x = AddUsersToPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUsersToPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUsersToPoolResponse) ProtoMessage() {}

func (x *AddUsersToPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUsersToPoolResponse.ProtoReflect.Descriptor instead.
func (*AddUsersToPoolResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{17}
}

func (x *AddUsersToPoolResponse) GetMemberships() []*pbentity.PoolMemberships {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type RemoveUsersFromPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId    string   `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	UserIds   []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	RemovedBy string   `protobuf:"bytes,3,opt,name=removed_by,json=removedBy,proto3" json:"removed_by,omitempty"`
	Reason    string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RemoveUsersFromPoolRequest) Reset() {
	*x = RemoveUsersFromPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUsersFromPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUsersFromPoolRequest) ProtoMessage() {}

func (x *RemoveUsersFromPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUsersFromPoolRequest.ProtoReflect.Descriptor instead.
func (*RemoveUsersFromPoolRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveUsersFromPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *RemoveUsersFromPoolRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *RemoveUsersFromPoolRequest) GetRemovedBy() string {
	if x != nil {
		return x.RemovedBy
	}
	return ""
}

func (x *RemoveUsersFromPoolRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RemoveUsersFromPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RemoveUsersFromPoolResponse) Reset() {
	*x = RemoveUsersFromPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUsersFromPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUsersFromPoolResponse) ProtoMessage() {}

func (x *RemoveUsersFromPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUsersFromPoolResponse.ProtoReflect.Descriptor instead.
func (*RemoveUsersFromPoolResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveUsersFromPoolResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetRandomPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *GetRandomPoolRequest) Reset() {
	*x = GetRandomPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomPoolRequest) ProtoMessage() {}

func (x *GetRandomPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomPoolRequest.ProtoReflect.Descriptor instead.
func (*GetRandomPoolRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{20}
}

func (x *GetRandomPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type GetRandomPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool    *pbentity.RandomTestingPools `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Members []*pbentity.PoolMemberships  `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetRandomPoolResponse) Reset() {
	*x = GetRandomPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomPoolResponse) ProtoMessage() {}

func (x *GetRandomPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomPoolResponse.ProtoReflect.Descriptor instead.
func (*GetRandomPoolResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{21}
}

func (x *GetRandomPoolResponse) GetPool() *pbentity.RandomTestingPools {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *GetRandomPoolResponse) GetMembers() []*pbentity.PoolMemberships {
	if x != nil {
		return x.Members
	}
	return nil
}

type ListRandomPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProgramId      string `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	IsActive       bool   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ListRandomPoolsRequest) Reset() {
	*x = ListRandomPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRandomPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRandomPoolsRequest) ProtoMessage() {}

func (x *ListRandomPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRandomPoolsRequest.ProtoReflect.Descriptor instead.
func (*ListRandomPoolsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{22}
}

func (x *ListRandomPoolsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListRandomPoolsRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *ListRandomPoolsRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type ListRandomPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*pbentity.RandomTestingPools `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *ListRandomPoolsResponse) Reset() {
	*x = ListRandomPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRandomPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRandomPoolsResponse) ProtoMessage() {}

func (x *ListRandomPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRandomPoolsResponse.ProtoReflect.Descriptor instead.
func (*ListRandomPoolsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{23}
}

func (x *ListRandomPoolsResponse) GetPools() []*pbentity.RandomTestingPools {
	if x != nil {
		return x.Pools
	}
	return nil
}

// Random Selection Management
type ConductRandomSelectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId          string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	NumberToSelect  int32  `protobuf:"varint,2,opt,name=number_to_select,json=numberToSelect,proto3" json:"number_to_select,omitempty"`
	ConductedBy     string `protobuf:"bytes,3,opt,name=conducted_by,json=conductedBy,proto3" json:"conducted_by,omitempty"`
	SelectionPeriod string `protobuf:"bytes,4,opt,name=selection_period,json=selectionPeriod,proto3" json:"selection_period,omitempty" dc:"'Q1 2025', 'January 2025', etc."` // "Q1 2025", "January 2025", etc.
	Algorithm       string `protobuf:"bytes,5,opt,name=algorithm,proto3" json:"algorithm,omitempty" dc:"'weighted', 'simple_random', 'stratified'"`                          // "weighted", "simple_random", "stratified"
}

func (x *ConductRandomSelectionRequest) Reset() {
	*x = ConductRandomSelectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConductRandomSelectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConductRandomSelectionRequest) ProtoMessage() {}

func (x *ConductRandomSelectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConductRandomSelectionRequest.ProtoReflect.Descriptor instead.
func (*ConductRandomSelectionRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{24}
}

func (x *ConductRandomSelectionRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *ConductRandomSelectionRequest) GetNumberToSelect() int32 {
	if x != nil {
		return x.NumberToSelect
	}
	return 0
}

func (x *ConductRandomSelectionRequest) GetConductedBy() string {
	if x != nil {
		return x.ConductedBy
	}
	return ""
}

func (x *ConductRandomSelectionRequest) GetSelectionPeriod() string {
	if x != nil {
		return x.SelectionPeriod
	}
	return ""
}

func (x *ConductRandomSelectionRequest) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

type ConductRandomSelectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection       *pbentity.RandomSelections         `protobuf:"bytes,1,opt,name=selection,proto3" json:"selection,omitempty"`
	SelectedMembers []*pbentity.RandomSelectionMembers `protobuf:"bytes,2,rep,name=selected_members,json=selectedMembers,proto3" json:"selected_members,omitempty"`
	SelectedUserIds []string                           `protobuf:"bytes,3,rep,name=selected_user_ids,json=selectedUserIds,proto3" json:"selected_user_ids,omitempty"`
}

func (x *ConductRandomSelectionResponse) Reset() {
	*x = ConductRandomSelectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConductRandomSelectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConductRandomSelectionResponse) ProtoMessage() {}

func (x *ConductRandomSelectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConductRandomSelectionResponse.ProtoReflect.Descriptor instead.
func (*ConductRandomSelectionResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{25}
}

func (x *ConductRandomSelectionResponse) GetSelection() *pbentity.RandomSelections {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *ConductRandomSelectionResponse) GetSelectedMembers() []*pbentity.RandomSelectionMembers {
	if x != nil {
		return x.SelectedMembers
	}
	return nil
}

func (x *ConductRandomSelectionResponse) GetSelectedUserIds() []string {
	if x != nil {
		return x.SelectedUserIds
	}
	return nil
}

type GetRandomSelectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionId string `protobuf:"bytes,1,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"`
}

func (x *GetRandomSelectionRequest) Reset() {
	*x = GetRandomSelectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomSelectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomSelectionRequest) ProtoMessage() {}

func (x *GetRandomSelectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomSelectionRequest.ProtoReflect.Descriptor instead.
func (*GetRandomSelectionRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{26}
}

func (x *GetRandomSelectionRequest) GetSelectionId() string {
	if x != nil {
		return x.SelectionId
	}
	return ""
}

type GetRandomSelectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection *pbentity.RandomSelections         `protobuf:"bytes,1,opt,name=selection,proto3" json:"selection,omitempty"`
	Members   []*pbentity.RandomSelectionMembers `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetRandomSelectionResponse) Reset() {
	*x = GetRandomSelectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomSelectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomSelectionResponse) ProtoMessage() {}

func (x *GetRandomSelectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomSelectionResponse.ProtoReflect.Descriptor instead.
func (*GetRandomSelectionResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{27}
}

func (x *GetRandomSelectionResponse) GetSelection() *pbentity.RandomSelections {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *GetRandomSelectionResponse) GetMembers() []*pbentity.RandomSelectionMembers {
	if x != nil {
		return x.Members
	}
	return nil
}

type ListRandomSelectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PoolId         string                 `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Page           int32                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListRandomSelectionsRequest) Reset() {
	*x = ListRandomSelectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRandomSelectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRandomSelectionsRequest) ProtoMessage() {}

func (x *ListRandomSelectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRandomSelectionsRequest.ProtoReflect.Descriptor instead.
func (*ListRandomSelectionsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{28}
}

func (x *ListRandomSelectionsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListRandomSelectionsRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *ListRandomSelectionsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListRandomSelectionsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListRandomSelectionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRandomSelectionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListRandomSelectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selections []*pbentity.RandomSelections `protobuf:"bytes,1,rep,name=selections,proto3" json:"selections,omitempty"`
	TotalCount int32                        `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page       int32                        `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32                        `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListRandomSelectionsResponse) Reset() {
	*x = ListRandomSelectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRandomSelectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRandomSelectionsResponse) ProtoMessage() {}

func (x *ListRandomSelectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRandomSelectionsResponse.ProtoReflect.Descriptor instead.
func (*ListRandomSelectionsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{29}
}

func (x *ListRandomSelectionsResponse) GetSelections() []*pbentity.RandomSelections {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *ListRandomSelectionsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListRandomSelectionsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRandomSelectionsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ValidateRandomSelectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionId string `protobuf:"bytes,1,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"`
	ValidatedBy string `protobuf:"bytes,2,opt,name=validated_by,json=validatedBy,proto3" json:"validated_by,omitempty"`
	Notes       string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *ValidateRandomSelectionRequest) Reset() {
	*x = ValidateRandomSelectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRandomSelectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRandomSelectionRequest) ProtoMessage() {}

func (x *ValidateRandomSelectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRandomSelectionRequest.ProtoReflect.Descriptor instead.
func (*ValidateRandomSelectionRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{30}
}

func (x *ValidateRandomSelectionRequest) GetSelectionId() string {
	if x != nil {
		return x.SelectionId
	}
	return ""
}

func (x *ValidateRandomSelectionRequest) GetValidatedBy() string {
	if x != nil {
		return x.ValidatedBy
	}
	return ""
}

func (x *ValidateRandomSelectionRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type ValidateRandomSelectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ValidateRandomSelectionResponse) Reset() {
	*x = ValidateRandomSelectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_drug_testing_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRandomSelectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRandomSelectionResponse) ProtoMessage() {}

func (x *ValidateRandomSelectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_drug_testing_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRandomSelectionResponse.ProtoReflect.Descriptor instead.
func (*ValidateRandomSelectionResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_drug_testing_proto_rawDescGZIP(), []int{31}
}

func (x *ValidateRandomSelectionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_services_v1_drug_testing_proto protoreflect.FileDescriptor

var file_services_v1_drug_testing_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x72,
	0x75, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2f, 0x64, 0x72, 0x75, 0x67, 0x5f, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x62, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x62, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x62, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x02, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64,
	0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x44, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x72, 0x75, 0x67, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x75, 0x67, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f,
	0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x53, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x39, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0x50, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x64, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x54,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72,
	0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x6f, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x13, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xf0, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x44, 0x72, 0x75, 0x67, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x44, 0x72, 0x75, 0x67, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x72, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x72, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x42, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x6d, 0x72, 0x6f, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6d, 0x72, 0x6f, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0x48, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x44, 0x72, 0x75, 0x67, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0xcf, 0x02, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x44, 0x72, 0x75, 0x67, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x4c, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x66, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x42, 0x79,
	0x22, 0x55, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x37, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x7d, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x4d, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x1d, 0x43, 0x6f,
	0x6e, 0x64, 0x75, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xd3, 0x01, 0x0a, 0x1e, 0x43,
	0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x3e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x92, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7c, 0x0a, 0x1e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x87, 0x16, 0x0a, 0x12, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x32, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x22, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x31, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x0d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e,
	0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x75, 0x67, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76, 0x31, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x72, 0x75,
	0x67, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72,
	0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x72, 0x75, 0x67, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x1a,
	0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x72, 0x75, 0x67, 0x2d, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa6, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x2b, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x75, 0x67,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x76,
	0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x75, 0x67, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x12, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x72, 0x75, 0x67,
	0x2d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x2e, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x9e, 0x01,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x2c, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x54, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54,
	0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xad,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x31, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x2a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x2b, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x75, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xc2, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x1e,
	0x5a, 0x1c, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_v1_drug_testing_proto_rawDescOnce sync.Once
	file_services_v1_drug_testing_proto_rawDescData = file_services_v1_drug_testing_proto_rawDesc
)

func file_services_v1_drug_testing_proto_rawDescGZIP() []byte {
	file_services_v1_drug_testing_proto_rawDescOnce.Do(func() {
		file_services_v1_drug_testing_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_v1_drug_testing_proto_rawDescData)
	})
	return file_services_v1_drug_testing_proto_rawDescData
}

var file_services_v1_drug_testing_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_services_v1_drug_testing_proto_goTypes = []interface{}{
	(*CreateTestingProgramRequest)(nil),     // 0: v1consortium.services.CreateTestingProgramRequest
	(*CreateTestingProgramResponse)(nil),    // 1: v1consortium.services.CreateTestingProgramResponse
	(*GetTestingProgramRequest)(nil),        // 2: v1consortium.services.GetTestingProgramRequest
	(*GetTestingProgramResponse)(nil),       // 3: v1consortium.services.GetTestingProgramResponse
	(*ListTestingProgramsRequest)(nil),      // 4: v1consortium.services.ListTestingProgramsRequest
	(*ListTestingProgramsResponse)(nil),     // 5: v1consortium.services.ListTestingProgramsResponse
	(*OrderDrugTestRequest)(nil),            // 6: v1consortium.services.OrderDrugTestRequest
	(*OrderDrugTestResponse)(nil),           // 7: v1consortium.services.OrderDrugTestResponse
	(*GetDrugTestRequest)(nil),              // 8: v1consortium.services.GetDrugTestRequest
	(*GetDrugTestResponse)(nil),             // 9: v1consortium.services.GetDrugTestResponse
	(*UpdateDrugTestRequest)(nil),           // 10: v1consortium.services.UpdateDrugTestRequest
	(*UpdateDrugTestResponse)(nil),          // 11: v1consortium.services.UpdateDrugTestResponse
	(*ListDrugTestsRequest)(nil),            // 12: v1consortium.services.ListDrugTestsRequest
	(*ListDrugTestsResponse)(nil),           // 13: v1consortium.services.ListDrugTestsResponse
	(*CreateRandomPoolRequest)(nil),         // 14: v1consortium.services.CreateRandomPoolRequest
	(*CreateRandomPoolResponse)(nil),        // 15: v1consortium.services.CreateRandomPoolResponse
	(*AddUsersToPoolRequest)(nil),           // 16: v1consortium.services.AddUsersToPoolRequest
	(*AddUsersToPoolResponse)(nil),          // 17: v1consortium.services.AddUsersToPoolResponse
	(*RemoveUsersFromPoolRequest)(nil),      // 18: v1consortium.services.RemoveUsersFromPoolRequest
	(*RemoveUsersFromPoolResponse)(nil),     // 19: v1consortium.services.RemoveUsersFromPoolResponse
	(*GetRandomPoolRequest)(nil),            // 20: v1consortium.services.GetRandomPoolRequest
	(*GetRandomPoolResponse)(nil),           // 21: v1consortium.services.GetRandomPoolResponse
	(*ListRandomPoolsRequest)(nil),          // 22: v1consortium.services.ListRandomPoolsRequest
	(*ListRandomPoolsResponse)(nil),         // 23: v1consortium.services.ListRandomPoolsResponse
	(*ConductRandomSelectionRequest)(nil),   // 24: v1consortium.services.ConductRandomSelectionRequest
	(*ConductRandomSelectionResponse)(nil),  // 25: v1consortium.services.ConductRandomSelectionResponse
	(*GetRandomSelectionRequest)(nil),       // 26: v1consortium.services.GetRandomSelectionRequest
	(*GetRandomSelectionResponse)(nil),      // 27: v1consortium.services.GetRandomSelectionResponse
	(*ListRandomSelectionsRequest)(nil),     // 28: v1consortium.services.ListRandomSelectionsRequest
	(*ListRandomSelectionsResponse)(nil),    // 29: v1consortium.services.ListRandomSelectionsResponse
	(*ValidateRandomSelectionRequest)(nil),  // 30: v1consortium.services.ValidateRandomSelectionRequest
	(*ValidateRandomSelectionResponse)(nil), // 31: v1consortium.services.ValidateRandomSelectionResponse
	(*pbentity.TestingPrograms)(nil),        // 32: pbentity.TestingPrograms
	(*timestamppb.Timestamp)(nil),           // 33: google.protobuf.Timestamp
	(*pbentity.DrugAlcoholTests)(nil),       // 34: pbentity.DrugAlcoholTests
	(*pbentity.RandomTestingPools)(nil),     // 35: pbentity.RandomTestingPools
	(*pbentity.PoolMemberships)(nil),        // 36: pbentity.PoolMemberships
	(*pbentity.RandomSelections)(nil),       // 37: pbentity.RandomSelections
	(*pbentity.RandomSelectionMembers)(nil), // 38: pbentity.RandomSelectionMembers
}
var file_services_v1_drug_testing_proto_depIdxs = []int32{
	32, // 0: v1consortium.services.CreateTestingProgramResponse.program:type_name -> pbentity.TestingPrograms
	32, // 1: v1consortium.services.GetTestingProgramResponse.program:type_name -> pbentity.TestingPrograms
	32, // 2: v1consortium.services.ListTestingProgramsResponse.programs:type_name -> pbentity.TestingPrograms
	33, // 3: v1consortium.services.OrderDrugTestRequest.due_date:type_name -> google.protobuf.Timestamp
	34, // 4: v1consortium.services.OrderDrugTestResponse.test:type_name -> pbentity.DrugAlcoholTests
	34, // 5: v1consortium.services.GetDrugTestResponse.test:type_name -> pbentity.DrugAlcoholTests
	33, // 6: v1consortium.services.UpdateDrugTestRequest.collection_date:type_name -> google.protobuf.Timestamp
	33, // 7: v1consortium.services.UpdateDrugTestRequest.result_date:type_name -> google.protobuf.Timestamp
	33, // 8: v1consortium.services.UpdateDrugTestRequest.mro_review_date:type_name -> google.protobuf.Timestamp
	34, // 9: v1consortium.services.UpdateDrugTestResponse.test:type_name -> pbentity.DrugAlcoholTests
	33, // 10: v1consortium.services.ListDrugTestsRequest.start_date:type_name -> google.protobuf.Timestamp
	33, // 11: v1consortium.services.ListDrugTestsRequest.end_date:type_name -> google.protobuf.Timestamp
	34, // 12: v1consortium.services.ListDrugTestsResponse.tests:type_name -> pbentity.DrugAlcoholTests
	35, // 13: v1consortium.services.CreateRandomPoolResponse.pool:type_name -> pbentity.RandomTestingPools
	36, // 14: v1consortium.services.AddUsersToPoolResponse.memberships:type_name -> pbentity.PoolMemberships
	35, // 15: v1consortium.services.GetRandomPoolResponse.pool:type_name -> pbentity.RandomTestingPools
	36, // 16: v1consortium.services.GetRandomPoolResponse.members:type_name -> pbentity.PoolMemberships
	35, // 17: v1consortium.services.ListRandomPoolsResponse.pools:type_name -> pbentity.RandomTestingPools
	37, // 18: v1consortium.services.ConductRandomSelectionResponse.selection:type_name -> pbentity.RandomSelections
	38, // 19: v1consortium.services.ConductRandomSelectionResponse.selected_members:type_name -> pbentity.RandomSelectionMembers
	37, // 20: v1consortium.services.GetRandomSelectionResponse.selection:type_name -> pbentity.RandomSelections
	38, // 21: v1consortium.services.GetRandomSelectionResponse.members:type_name -> pbentity.RandomSelectionMembers
	33, // 22: v1consortium.services.ListRandomSelectionsRequest.start_date:type_name -> google.protobuf.Timestamp
	33, // 23: v1consortium.services.ListRandomSelectionsRequest.end_date:type_name -> google.protobuf.Timestamp
	37, // 24: v1consortium.services.ListRandomSelectionsResponse.selections:type_name -> pbentity.RandomSelections
	0,  // 25: v1consortium.services.DrugTestingService.CreateTestingProgram:input_type -> v1consortium.services.CreateTestingProgramRequest
	2,  // 26: v1consortium.services.DrugTestingService.GetTestingProgram:input_type -> v1consortium.services.GetTestingProgramRequest
	4,  // 27: v1consortium.services.DrugTestingService.ListTestingPrograms:input_type -> v1consortium.services.ListTestingProgramsRequest
	6,  // 28: v1consortium.services.DrugTestingService.OrderDrugTest:input_type -> v1consortium.services.OrderDrugTestRequest
	8,  // 29: v1consortium.services.DrugTestingService.GetDrugTest:input_type -> v1consortium.services.GetDrugTestRequest
	10, // 30: v1consortium.services.DrugTestingService.UpdateDrugTest:input_type -> v1consortium.services.UpdateDrugTestRequest
	12, // 31: v1consortium.services.DrugTestingService.ListDrugTests:input_type -> v1consortium.services.ListDrugTestsRequest
	14, // 32: v1consortium.services.DrugTestingService.CreateRandomPool:input_type -> v1consortium.services.CreateRandomPoolRequest
	16, // 33: v1consortium.services.DrugTestingService.AddUsersToPool:input_type -> v1consortium.services.AddUsersToPoolRequest
	18, // 34: v1consortium.services.DrugTestingService.RemoveUsersFromPool:input_type -> v1consortium.services.RemoveUsersFromPoolRequest
	20, // 35: v1consortium.services.DrugTestingService.GetRandomPool:input_type -> v1consortium.services.GetRandomPoolRequest
	22, // 36: v1consortium.services.DrugTestingService.ListRandomPools:input_type -> v1consortium.services.ListRandomPoolsRequest
	24, // 37: v1consortium.services.DrugTestingService.ConductRandomSelection:input_type -> v1consortium.services.ConductRandomSelectionRequest
	26, // 38: v1consortium.services.DrugTestingService.GetRandomSelection:input_type -> v1consortium.services.GetRandomSelectionRequest
	28, // 39: v1consortium.services.DrugTestingService.ListRandomSelections:input_type -> v1consortium.services.ListRandomSelectionsRequest
	30, // 40: v1consortium.services.DrugTestingService.ValidateRandomSelection:input_type -> v1consortium.services.ValidateRandomSelectionRequest
	1,  // 41: v1consortium.services.DrugTestingService.CreateTestingProgram:output_type -> v1consortium.services.CreateTestingProgramResponse
	3,  // 42: v1consortium.services.DrugTestingService.GetTestingProgram:output_type -> v1consortium.services.GetTestingProgramResponse
	5,  // 43: v1consortium.services.DrugTestingService.ListTestingPrograms:output_type -> v1consortium.services.ListTestingProgramsResponse
	7,  // 44: v1consortium.services.DrugTestingService.OrderDrugTest:output_type -> v1consortium.services.OrderDrugTestResponse
	9,  // 45: v1consortium.services.DrugTestingService.GetDrugTest:output_type -> v1consortium.services.GetDrugTestResponse
	11, // 46: v1consortium.services.DrugTestingService.UpdateDrugTest:output_type -> v1consortium.services.UpdateDrugTestResponse
	13, // 47: v1consortium.services.DrugTestingService.ListDrugTests:output_type -> v1consortium.services.ListDrugTestsResponse
	15, // 48: v1consortium.services.DrugTestingService.CreateRandomPool:output_type -> v1consortium.services.CreateRandomPoolResponse
	17, // 49: v1consortium.services.DrugTestingService.AddUsersToPool:output_type -> v1consortium.services.AddUsersToPoolResponse
	19, // 50: v1consortium.services.DrugTestingService.RemoveUsersFromPool:output_type -> v1consortium.services.RemoveUsersFromPoolResponse
	21, // 51: v1consortium.services.DrugTestingService.GetRandomPool:output_type -> v1consortium.services.GetRandomPoolResponse
	23, // 52: v1consortium.services.DrugTestingService.ListRandomPools:output_type -> v1consortium.services.ListRandomPoolsResponse
	25, // 53: v1consortium.services.DrugTestingService.ConductRandomSelection:output_type -> v1consortium.services.ConductRandomSelectionResponse
	27, // 54: v1consortium.services.DrugTestingService.GetRandomSelection:output_type -> v1consortium.services.GetRandomSelectionResponse
	29, // 55: v1consortium.services.DrugTestingService.ListRandomSelections:output_type -> v1consortium.services.ListRandomSelectionsResponse
	31, // 56: v1consortium.services.DrugTestingService.ValidateRandomSelection:output_type -> v1consortium.services.ValidateRandomSelectionResponse
	41, // [41:57] is the sub-list for method output_type
	25, // [25:41] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_services_v1_drug_testing_proto_init() }
func file_services_v1_drug_testing_proto_init() {
	if File_services_v1_drug_testing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_v1_drug_testing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestingProgramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestingProgramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestingProgramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestingProgramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestingProgramsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestingProgramsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDrugTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDrugTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrugTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrugTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDrugTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDrugTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDrugTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDrugTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRandomPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRandomPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUsersToPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUsersToPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUsersFromPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUsersFromPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRandomPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRandomPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConductRandomSelectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConductRandomSelectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomSelectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomSelectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRandomSelectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRandomSelectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRandomSelectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_drug_testing_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRandomSelectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_v1_drug_testing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_v1_drug_testing_proto_goTypes,
		DependencyIndexes: file_services_v1_drug_testing_proto_depIdxs,
		MessageInfos:      file_services_v1_drug_testing_proto_msgTypes,
	}.Build()
	File_services_v1_drug_testing_proto = out.File
	file_services_v1_drug_testing_proto_rawDesc = nil
	file_services_v1_drug_testing_proto_goTypes = nil
	file_services_v1_drug_testing_proto_depIdxs = nil
}
