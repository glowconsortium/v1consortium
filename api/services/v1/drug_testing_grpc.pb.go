// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/drug_testing.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DrugTestingService_CreateTestingProgram_FullMethodName    = "/v1consortium.services.DrugTestingService/CreateTestingProgram"
	DrugTestingService_GetTestingProgram_FullMethodName       = "/v1consortium.services.DrugTestingService/GetTestingProgram"
	DrugTestingService_ListTestingPrograms_FullMethodName     = "/v1consortium.services.DrugTestingService/ListTestingPrograms"
	DrugTestingService_OrderDrugTest_FullMethodName           = "/v1consortium.services.DrugTestingService/OrderDrugTest"
	DrugTestingService_GetDrugTest_FullMethodName             = "/v1consortium.services.DrugTestingService/GetDrugTest"
	DrugTestingService_UpdateDrugTest_FullMethodName          = "/v1consortium.services.DrugTestingService/UpdateDrugTest"
	DrugTestingService_ListDrugTests_FullMethodName           = "/v1consortium.services.DrugTestingService/ListDrugTests"
	DrugTestingService_CreateRandomPool_FullMethodName        = "/v1consortium.services.DrugTestingService/CreateRandomPool"
	DrugTestingService_AddUsersToPool_FullMethodName          = "/v1consortium.services.DrugTestingService/AddUsersToPool"
	DrugTestingService_RemoveUsersFromPool_FullMethodName     = "/v1consortium.services.DrugTestingService/RemoveUsersFromPool"
	DrugTestingService_GetRandomPool_FullMethodName           = "/v1consortium.services.DrugTestingService/GetRandomPool"
	DrugTestingService_ListRandomPools_FullMethodName         = "/v1consortium.services.DrugTestingService/ListRandomPools"
	DrugTestingService_ConductRandomSelection_FullMethodName  = "/v1consortium.services.DrugTestingService/ConductRandomSelection"
	DrugTestingService_GetRandomSelection_FullMethodName      = "/v1consortium.services.DrugTestingService/GetRandomSelection"
	DrugTestingService_ListRandomSelections_FullMethodName    = "/v1consortium.services.DrugTestingService/ListRandomSelections"
	DrugTestingService_ValidateRandomSelection_FullMethodName = "/v1consortium.services.DrugTestingService/ValidateRandomSelection"
)

// DrugTestingServiceClient is the client API for DrugTestingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Drug Testing Service Definition
type DrugTestingServiceClient interface {
	// Testing Program Management
	CreateTestingProgram(ctx context.Context, in *CreateTestingProgramRequest, opts ...grpc.CallOption) (*CreateTestingProgramResponse, error)
	GetTestingProgram(ctx context.Context, in *GetTestingProgramRequest, opts ...grpc.CallOption) (*GetTestingProgramResponse, error)
	ListTestingPrograms(ctx context.Context, in *ListTestingProgramsRequest, opts ...grpc.CallOption) (*ListTestingProgramsResponse, error)
	// Drug Test Management
	OrderDrugTest(ctx context.Context, in *OrderDrugTestRequest, opts ...grpc.CallOption) (*OrderDrugTestResponse, error)
	GetDrugTest(ctx context.Context, in *GetDrugTestRequest, opts ...grpc.CallOption) (*GetDrugTestResponse, error)
	UpdateDrugTest(ctx context.Context, in *UpdateDrugTestRequest, opts ...grpc.CallOption) (*UpdateDrugTestResponse, error)
	ListDrugTests(ctx context.Context, in *ListDrugTestsRequest, opts ...grpc.CallOption) (*ListDrugTestsResponse, error)
	// Random Testing Pool Management
	CreateRandomPool(ctx context.Context, in *CreateRandomPoolRequest, opts ...grpc.CallOption) (*CreateRandomPoolResponse, error)
	AddUsersToPool(ctx context.Context, in *AddUsersToPoolRequest, opts ...grpc.CallOption) (*AddUsersToPoolResponse, error)
	RemoveUsersFromPool(ctx context.Context, in *RemoveUsersFromPoolRequest, opts ...grpc.CallOption) (*RemoveUsersFromPoolResponse, error)
	GetRandomPool(ctx context.Context, in *GetRandomPoolRequest, opts ...grpc.CallOption) (*GetRandomPoolResponse, error)
	ListRandomPools(ctx context.Context, in *ListRandomPoolsRequest, opts ...grpc.CallOption) (*ListRandomPoolsResponse, error)
	// Random Selection Management
	ConductRandomSelection(ctx context.Context, in *ConductRandomSelectionRequest, opts ...grpc.CallOption) (*ConductRandomSelectionResponse, error)
	GetRandomSelection(ctx context.Context, in *GetRandomSelectionRequest, opts ...grpc.CallOption) (*GetRandomSelectionResponse, error)
	ListRandomSelections(ctx context.Context, in *ListRandomSelectionsRequest, opts ...grpc.CallOption) (*ListRandomSelectionsResponse, error)
	ValidateRandomSelection(ctx context.Context, in *ValidateRandomSelectionRequest, opts ...grpc.CallOption) (*ValidateRandomSelectionResponse, error)
}

type drugTestingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDrugTestingServiceClient(cc grpc.ClientConnInterface) DrugTestingServiceClient {
	return &drugTestingServiceClient{cc}
}

func (c *drugTestingServiceClient) CreateTestingProgram(ctx context.Context, in *CreateTestingProgramRequest, opts ...grpc.CallOption) (*CreateTestingProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTestingProgramResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_CreateTestingProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) GetTestingProgram(ctx context.Context, in *GetTestingProgramRequest, opts ...grpc.CallOption) (*GetTestingProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTestingProgramResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_GetTestingProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) ListTestingPrograms(ctx context.Context, in *ListTestingProgramsRequest, opts ...grpc.CallOption) (*ListTestingProgramsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTestingProgramsResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_ListTestingPrograms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) OrderDrugTest(ctx context.Context, in *OrderDrugTestRequest, opts ...grpc.CallOption) (*OrderDrugTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderDrugTestResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_OrderDrugTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) GetDrugTest(ctx context.Context, in *GetDrugTestRequest, opts ...grpc.CallOption) (*GetDrugTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDrugTestResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_GetDrugTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) UpdateDrugTest(ctx context.Context, in *UpdateDrugTestRequest, opts ...grpc.CallOption) (*UpdateDrugTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDrugTestResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_UpdateDrugTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) ListDrugTests(ctx context.Context, in *ListDrugTestsRequest, opts ...grpc.CallOption) (*ListDrugTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDrugTestsResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_ListDrugTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) CreateRandomPool(ctx context.Context, in *CreateRandomPoolRequest, opts ...grpc.CallOption) (*CreateRandomPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRandomPoolResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_CreateRandomPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) AddUsersToPool(ctx context.Context, in *AddUsersToPoolRequest, opts ...grpc.CallOption) (*AddUsersToPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUsersToPoolResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_AddUsersToPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) RemoveUsersFromPool(ctx context.Context, in *RemoveUsersFromPoolRequest, opts ...grpc.CallOption) (*RemoveUsersFromPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUsersFromPoolResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_RemoveUsersFromPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) GetRandomPool(ctx context.Context, in *GetRandomPoolRequest, opts ...grpc.CallOption) (*GetRandomPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomPoolResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_GetRandomPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) ListRandomPools(ctx context.Context, in *ListRandomPoolsRequest, opts ...grpc.CallOption) (*ListRandomPoolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRandomPoolsResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_ListRandomPools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) ConductRandomSelection(ctx context.Context, in *ConductRandomSelectionRequest, opts ...grpc.CallOption) (*ConductRandomSelectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConductRandomSelectionResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_ConductRandomSelection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) GetRandomSelection(ctx context.Context, in *GetRandomSelectionRequest, opts ...grpc.CallOption) (*GetRandomSelectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomSelectionResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_GetRandomSelection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) ListRandomSelections(ctx context.Context, in *ListRandomSelectionsRequest, opts ...grpc.CallOption) (*ListRandomSelectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRandomSelectionsResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_ListRandomSelections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugTestingServiceClient) ValidateRandomSelection(ctx context.Context, in *ValidateRandomSelectionRequest, opts ...grpc.CallOption) (*ValidateRandomSelectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateRandomSelectionResponse)
	err := c.cc.Invoke(ctx, DrugTestingService_ValidateRandomSelection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrugTestingServiceServer is the server API for DrugTestingService service.
// All implementations must embed UnimplementedDrugTestingServiceServer
// for forward compatibility.
//
// Drug Testing Service Definition
type DrugTestingServiceServer interface {
	// Testing Program Management
	CreateTestingProgram(context.Context, *CreateTestingProgramRequest) (*CreateTestingProgramResponse, error)
	GetTestingProgram(context.Context, *GetTestingProgramRequest) (*GetTestingProgramResponse, error)
	ListTestingPrograms(context.Context, *ListTestingProgramsRequest) (*ListTestingProgramsResponse, error)
	// Drug Test Management
	OrderDrugTest(context.Context, *OrderDrugTestRequest) (*OrderDrugTestResponse, error)
	GetDrugTest(context.Context, *GetDrugTestRequest) (*GetDrugTestResponse, error)
	UpdateDrugTest(context.Context, *UpdateDrugTestRequest) (*UpdateDrugTestResponse, error)
	ListDrugTests(context.Context, *ListDrugTestsRequest) (*ListDrugTestsResponse, error)
	// Random Testing Pool Management
	CreateRandomPool(context.Context, *CreateRandomPoolRequest) (*CreateRandomPoolResponse, error)
	AddUsersToPool(context.Context, *AddUsersToPoolRequest) (*AddUsersToPoolResponse, error)
	RemoveUsersFromPool(context.Context, *RemoveUsersFromPoolRequest) (*RemoveUsersFromPoolResponse, error)
	GetRandomPool(context.Context, *GetRandomPoolRequest) (*GetRandomPoolResponse, error)
	ListRandomPools(context.Context, *ListRandomPoolsRequest) (*ListRandomPoolsResponse, error)
	// Random Selection Management
	ConductRandomSelection(context.Context, *ConductRandomSelectionRequest) (*ConductRandomSelectionResponse, error)
	GetRandomSelection(context.Context, *GetRandomSelectionRequest) (*GetRandomSelectionResponse, error)
	ListRandomSelections(context.Context, *ListRandomSelectionsRequest) (*ListRandomSelectionsResponse, error)
	ValidateRandomSelection(context.Context, *ValidateRandomSelectionRequest) (*ValidateRandomSelectionResponse, error)
	mustEmbedUnimplementedDrugTestingServiceServer()
}

// UnimplementedDrugTestingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDrugTestingServiceServer struct{}

func (UnimplementedDrugTestingServiceServer) CreateTestingProgram(context.Context, *CreateTestingProgramRequest) (*CreateTestingProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestingProgram not implemented")
}
func (UnimplementedDrugTestingServiceServer) GetTestingProgram(context.Context, *GetTestingProgramRequest) (*GetTestingProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestingProgram not implemented")
}
func (UnimplementedDrugTestingServiceServer) ListTestingPrograms(context.Context, *ListTestingProgramsRequest) (*ListTestingProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestingPrograms not implemented")
}
func (UnimplementedDrugTestingServiceServer) OrderDrugTest(context.Context, *OrderDrugTestRequest) (*OrderDrugTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDrugTest not implemented")
}
func (UnimplementedDrugTestingServiceServer) GetDrugTest(context.Context, *GetDrugTestRequest) (*GetDrugTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrugTest not implemented")
}
func (UnimplementedDrugTestingServiceServer) UpdateDrugTest(context.Context, *UpdateDrugTestRequest) (*UpdateDrugTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrugTest not implemented")
}
func (UnimplementedDrugTestingServiceServer) ListDrugTests(context.Context, *ListDrugTestsRequest) (*ListDrugTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrugTests not implemented")
}
func (UnimplementedDrugTestingServiceServer) CreateRandomPool(context.Context, *CreateRandomPoolRequest) (*CreateRandomPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRandomPool not implemented")
}
func (UnimplementedDrugTestingServiceServer) AddUsersToPool(context.Context, *AddUsersToPoolRequest) (*AddUsersToPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToPool not implemented")
}
func (UnimplementedDrugTestingServiceServer) RemoveUsersFromPool(context.Context, *RemoveUsersFromPoolRequest) (*RemoveUsersFromPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsersFromPool not implemented")
}
func (UnimplementedDrugTestingServiceServer) GetRandomPool(context.Context, *GetRandomPoolRequest) (*GetRandomPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomPool not implemented")
}
func (UnimplementedDrugTestingServiceServer) ListRandomPools(context.Context, *ListRandomPoolsRequest) (*ListRandomPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRandomPools not implemented")
}
func (UnimplementedDrugTestingServiceServer) ConductRandomSelection(context.Context, *ConductRandomSelectionRequest) (*ConductRandomSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConductRandomSelection not implemented")
}
func (UnimplementedDrugTestingServiceServer) GetRandomSelection(context.Context, *GetRandomSelectionRequest) (*GetRandomSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomSelection not implemented")
}
func (UnimplementedDrugTestingServiceServer) ListRandomSelections(context.Context, *ListRandomSelectionsRequest) (*ListRandomSelectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRandomSelections not implemented")
}
func (UnimplementedDrugTestingServiceServer) ValidateRandomSelection(context.Context, *ValidateRandomSelectionRequest) (*ValidateRandomSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRandomSelection not implemented")
}
func (UnimplementedDrugTestingServiceServer) mustEmbedUnimplementedDrugTestingServiceServer() {}
func (UnimplementedDrugTestingServiceServer) testEmbeddedByValue()                            {}

// UnsafeDrugTestingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrugTestingServiceServer will
// result in compilation errors.
type UnsafeDrugTestingServiceServer interface {
	mustEmbedUnimplementedDrugTestingServiceServer()
}

func RegisterDrugTestingServiceServer(s grpc.ServiceRegistrar, srv DrugTestingServiceServer) {
	// If the following call pancis, it indicates UnimplementedDrugTestingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DrugTestingService_ServiceDesc, srv)
}

func _DrugTestingService_CreateTestingProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestingProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).CreateTestingProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_CreateTestingProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).CreateTestingProgram(ctx, req.(*CreateTestingProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_GetTestingProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestingProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).GetTestingProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_GetTestingProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).GetTestingProgram(ctx, req.(*GetTestingProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_ListTestingPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestingProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).ListTestingPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_ListTestingPrograms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).ListTestingPrograms(ctx, req.(*ListTestingProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_OrderDrugTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDrugTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).OrderDrugTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_OrderDrugTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).OrderDrugTest(ctx, req.(*OrderDrugTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_GetDrugTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrugTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).GetDrugTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_GetDrugTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).GetDrugTest(ctx, req.(*GetDrugTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_UpdateDrugTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDrugTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).UpdateDrugTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_UpdateDrugTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).UpdateDrugTest(ctx, req.(*UpdateDrugTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_ListDrugTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDrugTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).ListDrugTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_ListDrugTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).ListDrugTests(ctx, req.(*ListDrugTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_CreateRandomPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRandomPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).CreateRandomPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_CreateRandomPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).CreateRandomPool(ctx, req.(*CreateRandomPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_AddUsersToPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).AddUsersToPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_AddUsersToPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).AddUsersToPool(ctx, req.(*AddUsersToPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_RemoveUsersFromPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUsersFromPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).RemoveUsersFromPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_RemoveUsersFromPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).RemoveUsersFromPool(ctx, req.(*RemoveUsersFromPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_GetRandomPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).GetRandomPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_GetRandomPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).GetRandomPool(ctx, req.(*GetRandomPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_ListRandomPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRandomPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).ListRandomPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_ListRandomPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).ListRandomPools(ctx, req.(*ListRandomPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_ConductRandomSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConductRandomSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).ConductRandomSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_ConductRandomSelection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).ConductRandomSelection(ctx, req.(*ConductRandomSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_GetRandomSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).GetRandomSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_GetRandomSelection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).GetRandomSelection(ctx, req.(*GetRandomSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_ListRandomSelections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRandomSelectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).ListRandomSelections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_ListRandomSelections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).ListRandomSelections(ctx, req.(*ListRandomSelectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugTestingService_ValidateRandomSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRandomSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugTestingServiceServer).ValidateRandomSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugTestingService_ValidateRandomSelection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugTestingServiceServer).ValidateRandomSelection(ctx, req.(*ValidateRandomSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DrugTestingService_ServiceDesc is the grpc.ServiceDesc for DrugTestingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrugTestingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.DrugTestingService",
	HandlerType: (*DrugTestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestingProgram",
			Handler:    _DrugTestingService_CreateTestingProgram_Handler,
		},
		{
			MethodName: "GetTestingProgram",
			Handler:    _DrugTestingService_GetTestingProgram_Handler,
		},
		{
			MethodName: "ListTestingPrograms",
			Handler:    _DrugTestingService_ListTestingPrograms_Handler,
		},
		{
			MethodName: "OrderDrugTest",
			Handler:    _DrugTestingService_OrderDrugTest_Handler,
		},
		{
			MethodName: "GetDrugTest",
			Handler:    _DrugTestingService_GetDrugTest_Handler,
		},
		{
			MethodName: "UpdateDrugTest",
			Handler:    _DrugTestingService_UpdateDrugTest_Handler,
		},
		{
			MethodName: "ListDrugTests",
			Handler:    _DrugTestingService_ListDrugTests_Handler,
		},
		{
			MethodName: "CreateRandomPool",
			Handler:    _DrugTestingService_CreateRandomPool_Handler,
		},
		{
			MethodName: "AddUsersToPool",
			Handler:    _DrugTestingService_AddUsersToPool_Handler,
		},
		{
			MethodName: "RemoveUsersFromPool",
			Handler:    _DrugTestingService_RemoveUsersFromPool_Handler,
		},
		{
			MethodName: "GetRandomPool",
			Handler:    _DrugTestingService_GetRandomPool_Handler,
		},
		{
			MethodName: "ListRandomPools",
			Handler:    _DrugTestingService_ListRandomPools_Handler,
		},
		{
			MethodName: "ConductRandomSelection",
			Handler:    _DrugTestingService_ConductRandomSelection_Handler,
		},
		{
			MethodName: "GetRandomSelection",
			Handler:    _DrugTestingService_GetRandomSelection_Handler,
		},
		{
			MethodName: "ListRandomSelections",
			Handler:    _DrugTestingService_ListRandomSelections_Handler,
		},
		{
			MethodName: "ValidateRandomSelection",
			Handler:    _DrugTestingService_ValidateRandomSelection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/drug_testing.proto",
}
