// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/notification.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendNotification_FullMethodName              = "/v1consortium.services.NotificationService/SendNotification"
	NotificationService_GetNotification_FullMethodName               = "/v1consortium.services.NotificationService/GetNotification"
	NotificationService_ListNotifications_FullMethodName             = "/v1consortium.services.NotificationService/ListNotifications"
	NotificationService_MarkNotificationRead_FullMethodName          = "/v1consortium.services.NotificationService/MarkNotificationRead"
	NotificationService_MarkAllNotificationsRead_FullMethodName      = "/v1consortium.services.NotificationService/MarkAllNotificationsRead"
	NotificationService_CreateNotificationTemplate_FullMethodName    = "/v1consortium.services.NotificationService/CreateNotificationTemplate"
	NotificationService_GetNotificationTemplate_FullMethodName       = "/v1consortium.services.NotificationService/GetNotificationTemplate"
	NotificationService_ListNotificationTemplates_FullMethodName     = "/v1consortium.services.NotificationService/ListNotificationTemplates"
	NotificationService_UpdateNotificationTemplate_FullMethodName    = "/v1consortium.services.NotificationService/UpdateNotificationTemplate"
	NotificationService_GetNotificationPreferences_FullMethodName    = "/v1consortium.services.NotificationService/GetNotificationPreferences"
	NotificationService_UpdateNotificationPreferences_FullMethodName = "/v1consortium.services.NotificationService/UpdateNotificationPreferences"
	NotificationService_SendBulkNotification_FullMethodName          = "/v1consortium.services.NotificationService/SendBulkNotification"
	NotificationService_ScheduleNotification_FullMethodName          = "/v1consortium.services.NotificationService/ScheduleNotification"
	NotificationService_ListScheduledNotifications_FullMethodName    = "/v1consortium.services.NotificationService/ListScheduledNotifications"
	NotificationService_CancelScheduledNotification_FullMethodName   = "/v1consortium.services.NotificationService/CancelScheduledNotification"
	NotificationService_GetNotificationAnalytics_FullMethodName      = "/v1consortium.services.NotificationService/GetNotificationAnalytics"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Notification Service Definition
type NotificationServiceClient interface {
	// Basic Notification Management
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error)
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
	MarkNotificationRead(ctx context.Context, in *MarkNotificationReadRequest, opts ...grpc.CallOption) (*MarkNotificationReadResponse, error)
	MarkAllNotificationsRead(ctx context.Context, in *MarkAllNotificationsReadRequest, opts ...grpc.CallOption) (*MarkAllNotificationsReadResponse, error)
	// Template Management
	CreateNotificationTemplate(ctx context.Context, in *CreateNotificationTemplateRequest, opts ...grpc.CallOption) (*CreateNotificationTemplateResponse, error)
	GetNotificationTemplate(ctx context.Context, in *GetNotificationTemplateRequest, opts ...grpc.CallOption) (*GetNotificationTemplateResponse, error)
	ListNotificationTemplates(ctx context.Context, in *ListNotificationTemplatesRequest, opts ...grpc.CallOption) (*ListNotificationTemplatesResponse, error)
	UpdateNotificationTemplate(ctx context.Context, in *UpdateNotificationTemplateRequest, opts ...grpc.CallOption) (*UpdateNotificationTemplateResponse, error)
	// Preference Management
	GetNotificationPreferences(ctx context.Context, in *GetNotificationPreferencesRequest, opts ...grpc.CallOption) (*GetNotificationPreferencesResponse, error)
	UpdateNotificationPreferences(ctx context.Context, in *UpdateNotificationPreferencesRequest, opts ...grpc.CallOption) (*UpdateNotificationPreferencesResponse, error)
	// Bulk Operations
	SendBulkNotification(ctx context.Context, in *SendBulkNotificationRequest, opts ...grpc.CallOption) (*SendBulkNotificationResponse, error)
	// Scheduled Notifications
	ScheduleNotification(ctx context.Context, in *ScheduleNotificationRequest, opts ...grpc.CallOption) (*ScheduleNotificationResponse, error)
	ListScheduledNotifications(ctx context.Context, in *ListScheduledNotificationsRequest, opts ...grpc.CallOption) (*ListScheduledNotificationsResponse, error)
	CancelScheduledNotification(ctx context.Context, in *CancelScheduledNotificationRequest, opts ...grpc.CallOption) (*CancelScheduledNotificationResponse, error)
	// Analytics
	GetNotificationAnalytics(ctx context.Context, in *GetNotificationAnalyticsRequest, opts ...grpc.CallOption) (*GetNotificationAnalyticsResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkNotificationRead(ctx context.Context, in *MarkNotificationReadRequest, opts ...grpc.CallOption) (*MarkNotificationReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkNotificationReadResponse)
	err := c.cc.Invoke(ctx, NotificationService_MarkNotificationRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkAllNotificationsRead(ctx context.Context, in *MarkAllNotificationsReadRequest, opts ...grpc.CallOption) (*MarkAllNotificationsReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAllNotificationsReadResponse)
	err := c.cc.Invoke(ctx, NotificationService_MarkAllNotificationsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateNotificationTemplate(ctx context.Context, in *CreateNotificationTemplateRequest, opts ...grpc.CallOption) (*CreateNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_CreateNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationTemplate(ctx context.Context, in *GetNotificationTemplateRequest, opts ...grpc.CallOption) (*GetNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListNotificationTemplates(ctx context.Context, in *ListNotificationTemplatesRequest, opts ...grpc.CallOption) (*ListNotificationTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationTemplatesResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListNotificationTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationTemplate(ctx context.Context, in *UpdateNotificationTemplateRequest, opts ...grpc.CallOption) (*UpdateNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationPreferences(ctx context.Context, in *GetNotificationPreferencesRequest, opts ...grpc.CallOption) (*GetNotificationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationPreferences(ctx context.Context, in *UpdateNotificationPreferencesRequest, opts ...grpc.CallOption) (*UpdateNotificationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateNotificationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendBulkNotification(ctx context.Context, in *SendBulkNotificationRequest, opts ...grpc.CallOption) (*SendBulkNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendBulkNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ScheduleNotification(ctx context.Context, in *ScheduleNotificationRequest, opts ...grpc.CallOption) (*ScheduleNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_ScheduleNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListScheduledNotifications(ctx context.Context, in *ListScheduledNotificationsRequest, opts ...grpc.CallOption) (*ListScheduledNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScheduledNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_ListScheduledNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CancelScheduledNotification(ctx context.Context, in *CancelScheduledNotificationRequest, opts ...grpc.CallOption) (*CancelScheduledNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelScheduledNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_CancelScheduledNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationAnalytics(ctx context.Context, in *GetNotificationAnalyticsRequest, opts ...grpc.CallOption) (*GetNotificationAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationAnalyticsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
//
// Notification Service Definition
type NotificationServiceServer interface {
	// Basic Notification Management
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error)
	ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error)
	MarkNotificationRead(context.Context, *MarkNotificationReadRequest) (*MarkNotificationReadResponse, error)
	MarkAllNotificationsRead(context.Context, *MarkAllNotificationsReadRequest) (*MarkAllNotificationsReadResponse, error)
	// Template Management
	CreateNotificationTemplate(context.Context, *CreateNotificationTemplateRequest) (*CreateNotificationTemplateResponse, error)
	GetNotificationTemplate(context.Context, *GetNotificationTemplateRequest) (*GetNotificationTemplateResponse, error)
	ListNotificationTemplates(context.Context, *ListNotificationTemplatesRequest) (*ListNotificationTemplatesResponse, error)
	UpdateNotificationTemplate(context.Context, *UpdateNotificationTemplateRequest) (*UpdateNotificationTemplateResponse, error)
	// Preference Management
	GetNotificationPreferences(context.Context, *GetNotificationPreferencesRequest) (*GetNotificationPreferencesResponse, error)
	UpdateNotificationPreferences(context.Context, *UpdateNotificationPreferencesRequest) (*UpdateNotificationPreferencesResponse, error)
	// Bulk Operations
	SendBulkNotification(context.Context, *SendBulkNotificationRequest) (*SendBulkNotificationResponse, error)
	// Scheduled Notifications
	ScheduleNotification(context.Context, *ScheduleNotificationRequest) (*ScheduleNotificationResponse, error)
	ListScheduledNotifications(context.Context, *ListScheduledNotificationsRequest) (*ListScheduledNotificationsResponse, error)
	CancelScheduledNotification(context.Context, *CancelScheduledNotificationRequest) (*CancelScheduledNotificationResponse, error)
	// Analytics
	GetNotificationAnalytics(context.Context, *GetNotificationAnalyticsRequest) (*GetNotificationAnalyticsResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedNotificationServiceServer) ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) MarkNotificationRead(context.Context, *MarkNotificationReadRequest) (*MarkNotificationReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationRead not implemented")
}
func (UnimplementedNotificationServiceServer) MarkAllNotificationsRead(context.Context, *MarkAllNotificationsReadRequest) (*MarkAllNotificationsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllNotificationsRead not implemented")
}
func (UnimplementedNotificationServiceServer) CreateNotificationTemplate(context.Context, *CreateNotificationTemplateRequest) (*CreateNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationTemplate(context.Context, *GetNotificationTemplateRequest) (*GetNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) ListNotificationTemplates(context.Context, *ListNotificationTemplatesRequest) (*ListNotificationTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationTemplates not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationTemplate(context.Context, *UpdateNotificationTemplateRequest) (*UpdateNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationPreferences(context.Context, *GetNotificationPreferencesRequest) (*GetNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationPreferences(context.Context, *UpdateNotificationPreferencesRequest) (*UpdateNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) SendBulkNotification(context.Context, *SendBulkNotificationRequest) (*SendBulkNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkNotification not implemented")
}
func (UnimplementedNotificationServiceServer) ScheduleNotification(context.Context, *ScheduleNotificationRequest) (*ScheduleNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleNotification not implemented")
}
func (UnimplementedNotificationServiceServer) ListScheduledNotifications(context.Context, *ListScheduledNotificationsRequest) (*ListScheduledNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) CancelScheduledNotification(context.Context, *CancelScheduledNotificationRequest) (*CancelScheduledNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelScheduledNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationAnalytics(context.Context, *GetNotificationAnalyticsRequest) (*GetNotificationAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationAnalytics not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotification(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkNotificationRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkNotificationRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_MarkNotificationRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkNotificationRead(ctx, req.(*MarkNotificationReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkAllNotificationsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAllNotificationsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkAllNotificationsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_MarkAllNotificationsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkAllNotificationsRead(ctx, req.(*MarkAllNotificationsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotificationTemplate(ctx, req.(*CreateNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationTemplate(ctx, req.(*GetNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListNotificationTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListNotificationTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListNotificationTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListNotificationTemplates(ctx, req.(*ListNotificationTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationTemplate(ctx, req.(*UpdateNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationPreferences(ctx, req.(*GetNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, req.(*UpdateNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendBulkNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendBulkNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendBulkNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendBulkNotification(ctx, req.(*SendBulkNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ScheduleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ScheduleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ScheduleNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ScheduleNotification(ctx, req.(*ScheduleNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListScheduledNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListScheduledNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ListScheduledNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListScheduledNotifications(ctx, req.(*ListScheduledNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CancelScheduledNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelScheduledNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CancelScheduledNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CancelScheduledNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CancelScheduledNotification(ctx, req.(*CancelScheduledNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationAnalytics(ctx, req.(*GetNotificationAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "GetNotification",
			Handler:    _NotificationService_GetNotification_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _NotificationService_ListNotifications_Handler,
		},
		{
			MethodName: "MarkNotificationRead",
			Handler:    _NotificationService_MarkNotificationRead_Handler,
		},
		{
			MethodName: "MarkAllNotificationsRead",
			Handler:    _NotificationService_MarkAllNotificationsRead_Handler,
		},
		{
			MethodName: "CreateNotificationTemplate",
			Handler:    _NotificationService_CreateNotificationTemplate_Handler,
		},
		{
			MethodName: "GetNotificationTemplate",
			Handler:    _NotificationService_GetNotificationTemplate_Handler,
		},
		{
			MethodName: "ListNotificationTemplates",
			Handler:    _NotificationService_ListNotificationTemplates_Handler,
		},
		{
			MethodName: "UpdateNotificationTemplate",
			Handler:    _NotificationService_UpdateNotificationTemplate_Handler,
		},
		{
			MethodName: "GetNotificationPreferences",
			Handler:    _NotificationService_GetNotificationPreferences_Handler,
		},
		{
			MethodName: "UpdateNotificationPreferences",
			Handler:    _NotificationService_UpdateNotificationPreferences_Handler,
		},
		{
			MethodName: "SendBulkNotification",
			Handler:    _NotificationService_SendBulkNotification_Handler,
		},
		{
			MethodName: "ScheduleNotification",
			Handler:    _NotificationService_ScheduleNotification_Handler,
		},
		{
			MethodName: "ListScheduledNotifications",
			Handler:    _NotificationService_ListScheduledNotifications_Handler,
		},
		{
			MethodName: "CancelScheduledNotification",
			Handler:    _NotificationService_CancelScheduledNotification_Handler,
		},
		{
			MethodName: "GetNotificationAnalytics",
			Handler:    _NotificationService_GetNotificationAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/notification.proto",
}
