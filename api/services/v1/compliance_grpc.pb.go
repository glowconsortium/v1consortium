// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/compliance.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComplianceService_GetComplianceStatus_FullMethodName           = "/v1consortium.services.ComplianceService/GetComplianceStatus"
	ComplianceService_UpdateComplianceStatus_FullMethodName        = "/v1consortium.services.ComplianceService/UpdateComplianceStatus"
	ComplianceService_ListComplianceStatus_FullMethodName          = "/v1consortium.services.ComplianceService/ListComplianceStatus"
	ComplianceService_GenerateComplianceCertificate_FullMethodName = "/v1consortium.services.ComplianceService/GenerateComplianceCertificate"
	ComplianceService_GetCertificate_FullMethodName                = "/v1consortium.services.ComplianceService/GetCertificate"
	ComplianceService_ListCertificates_FullMethodName              = "/v1consortium.services.ComplianceService/ListCertificates"
	ComplianceService_RevokeCertificate_FullMethodName             = "/v1consortium.services.ComplianceService/RevokeCertificate"
	ComplianceService_GenerateComplianceReport_FullMethodName      = "/v1consortium.services.ComplianceService/GenerateComplianceReport"
	ComplianceService_GetSavedReport_FullMethodName                = "/v1consortium.services.ComplianceService/GetSavedReport"
	ComplianceService_ListSavedReports_FullMethodName              = "/v1consortium.services.ComplianceService/ListSavedReports"
	ComplianceService_DeleteSavedReport_FullMethodName             = "/v1consortium.services.ComplianceService/DeleteSavedReport"
	ComplianceService_GetComplianceAlerts_FullMethodName           = "/v1consortium.services.ComplianceService/GetComplianceAlerts"
	ComplianceService_GetComplianceAnalytics_FullMethodName        = "/v1consortium.services.ComplianceService/GetComplianceAnalytics"
	ComplianceService_GetComplianceAuditTrail_FullMethodName       = "/v1consortium.services.ComplianceService/GetComplianceAuditTrail"
)

// ComplianceServiceClient is the client API for ComplianceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Compliance Service Definition
type ComplianceServiceClient interface {
	// Compliance Status Management
	GetComplianceStatus(ctx context.Context, in *GetComplianceStatusRequest, opts ...grpc.CallOption) (*GetComplianceStatusResponse, error)
	UpdateComplianceStatus(ctx context.Context, in *UpdateComplianceStatusRequest, opts ...grpc.CallOption) (*UpdateComplianceStatusResponse, error)
	ListComplianceStatus(ctx context.Context, in *ListComplianceStatusRequest, opts ...grpc.CallOption) (*ListComplianceStatusResponse, error)
	// Certificate Management
	GenerateComplianceCertificate(ctx context.Context, in *GenerateComplianceCertificateRequest, opts ...grpc.CallOption) (*GenerateComplianceCertificateResponse, error)
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error)
	ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error)
	RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error)
	// Reporting
	GenerateComplianceReport(ctx context.Context, in *GenerateComplianceReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error)
	GetSavedReport(ctx context.Context, in *GetSavedReportRequest, opts ...grpc.CallOption) (*GetSavedReportResponse, error)
	ListSavedReports(ctx context.Context, in *ListSavedReportsRequest, opts ...grpc.CallOption) (*ListSavedReportsResponse, error)
	DeleteSavedReport(ctx context.Context, in *DeleteSavedReportRequest, opts ...grpc.CallOption) (*DeleteSavedReportResponse, error)
	// Compliance Monitoring
	GetComplianceAlerts(ctx context.Context, in *GetComplianceAlertsRequest, opts ...grpc.CallOption) (*GetComplianceAlertsResponse, error)
	GetComplianceAnalytics(ctx context.Context, in *GetComplianceAnalyticsRequest, opts ...grpc.CallOption) (*GetComplianceAnalyticsResponse, error)
	// Audit and Tracking
	GetComplianceAuditTrail(ctx context.Context, in *GetComplianceAuditTrailRequest, opts ...grpc.CallOption) (*GetComplianceAuditTrailResponse, error)
}

type complianceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceServiceClient(cc grpc.ClientConnInterface) ComplianceServiceClient {
	return &complianceServiceClient{cc}
}

func (c *complianceServiceClient) GetComplianceStatus(ctx context.Context, in *GetComplianceStatusRequest, opts ...grpc.CallOption) (*GetComplianceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComplianceStatusResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetComplianceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) UpdateComplianceStatus(ctx context.Context, in *UpdateComplianceStatusRequest, opts ...grpc.CallOption) (*UpdateComplianceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateComplianceStatusResponse)
	err := c.cc.Invoke(ctx, ComplianceService_UpdateComplianceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) ListComplianceStatus(ctx context.Context, in *ListComplianceStatusRequest, opts ...grpc.CallOption) (*ListComplianceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComplianceStatusResponse)
	err := c.cc.Invoke(ctx, ComplianceService_ListComplianceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GenerateComplianceCertificate(ctx context.Context, in *GenerateComplianceCertificateRequest, opts ...grpc.CallOption) (*GenerateComplianceCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateComplianceCertificateResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GenerateComplianceCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCertificateResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCertificatesResponse)
	err := c.cc.Invoke(ctx, ComplianceService_ListCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCertificateResponse)
	err := c.cc.Invoke(ctx, ComplianceService_RevokeCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GenerateComplianceReport(ctx context.Context, in *GenerateComplianceReportRequest, opts ...grpc.CallOption) (*GenerateComplianceReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateComplianceReportResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GenerateComplianceReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetSavedReport(ctx context.Context, in *GetSavedReportRequest, opts ...grpc.CallOption) (*GetSavedReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSavedReportResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetSavedReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) ListSavedReports(ctx context.Context, in *ListSavedReportsRequest, opts ...grpc.CallOption) (*ListSavedReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSavedReportsResponse)
	err := c.cc.Invoke(ctx, ComplianceService_ListSavedReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) DeleteSavedReport(ctx context.Context, in *DeleteSavedReportRequest, opts ...grpc.CallOption) (*DeleteSavedReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSavedReportResponse)
	err := c.cc.Invoke(ctx, ComplianceService_DeleteSavedReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetComplianceAlerts(ctx context.Context, in *GetComplianceAlertsRequest, opts ...grpc.CallOption) (*GetComplianceAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComplianceAlertsResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetComplianceAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetComplianceAnalytics(ctx context.Context, in *GetComplianceAnalyticsRequest, opts ...grpc.CallOption) (*GetComplianceAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComplianceAnalyticsResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetComplianceAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceServiceClient) GetComplianceAuditTrail(ctx context.Context, in *GetComplianceAuditTrailRequest, opts ...grpc.CallOption) (*GetComplianceAuditTrailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComplianceAuditTrailResponse)
	err := c.cc.Invoke(ctx, ComplianceService_GetComplianceAuditTrail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceServiceServer is the server API for ComplianceService service.
// All implementations must embed UnimplementedComplianceServiceServer
// for forward compatibility.
//
// Compliance Service Definition
type ComplianceServiceServer interface {
	// Compliance Status Management
	GetComplianceStatus(context.Context, *GetComplianceStatusRequest) (*GetComplianceStatusResponse, error)
	UpdateComplianceStatus(context.Context, *UpdateComplianceStatusRequest) (*UpdateComplianceStatusResponse, error)
	ListComplianceStatus(context.Context, *ListComplianceStatusRequest) (*ListComplianceStatusResponse, error)
	// Certificate Management
	GenerateComplianceCertificate(context.Context, *GenerateComplianceCertificateRequest) (*GenerateComplianceCertificateResponse, error)
	GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error)
	ListCertificates(context.Context, *ListCertificatesRequest) (*ListCertificatesResponse, error)
	RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error)
	// Reporting
	GenerateComplianceReport(context.Context, *GenerateComplianceReportRequest) (*GenerateComplianceReportResponse, error)
	GetSavedReport(context.Context, *GetSavedReportRequest) (*GetSavedReportResponse, error)
	ListSavedReports(context.Context, *ListSavedReportsRequest) (*ListSavedReportsResponse, error)
	DeleteSavedReport(context.Context, *DeleteSavedReportRequest) (*DeleteSavedReportResponse, error)
	// Compliance Monitoring
	GetComplianceAlerts(context.Context, *GetComplianceAlertsRequest) (*GetComplianceAlertsResponse, error)
	GetComplianceAnalytics(context.Context, *GetComplianceAnalyticsRequest) (*GetComplianceAnalyticsResponse, error)
	// Audit and Tracking
	GetComplianceAuditTrail(context.Context, *GetComplianceAuditTrailRequest) (*GetComplianceAuditTrailResponse, error)
	mustEmbedUnimplementedComplianceServiceServer()
}

// UnimplementedComplianceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComplianceServiceServer struct{}

func (UnimplementedComplianceServiceServer) GetComplianceStatus(context.Context, *GetComplianceStatusRequest) (*GetComplianceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceStatus not implemented")
}
func (UnimplementedComplianceServiceServer) UpdateComplianceStatus(context.Context, *UpdateComplianceStatusRequest) (*UpdateComplianceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComplianceStatus not implemented")
}
func (UnimplementedComplianceServiceServer) ListComplianceStatus(context.Context, *ListComplianceStatusRequest) (*ListComplianceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceStatus not implemented")
}
func (UnimplementedComplianceServiceServer) GenerateComplianceCertificate(context.Context, *GenerateComplianceCertificateRequest) (*GenerateComplianceCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateComplianceCertificate not implemented")
}
func (UnimplementedComplianceServiceServer) GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (UnimplementedComplianceServiceServer) ListCertificates(context.Context, *ListCertificatesRequest) (*ListCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (UnimplementedComplianceServiceServer) RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (UnimplementedComplianceServiceServer) GenerateComplianceReport(context.Context, *GenerateComplianceReportRequest) (*GenerateComplianceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateComplianceReport not implemented")
}
func (UnimplementedComplianceServiceServer) GetSavedReport(context.Context, *GetSavedReportRequest) (*GetSavedReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedReport not implemented")
}
func (UnimplementedComplianceServiceServer) ListSavedReports(context.Context, *ListSavedReportsRequest) (*ListSavedReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSavedReports not implemented")
}
func (UnimplementedComplianceServiceServer) DeleteSavedReport(context.Context, *DeleteSavedReportRequest) (*DeleteSavedReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSavedReport not implemented")
}
func (UnimplementedComplianceServiceServer) GetComplianceAlerts(context.Context, *GetComplianceAlertsRequest) (*GetComplianceAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceAlerts not implemented")
}
func (UnimplementedComplianceServiceServer) GetComplianceAnalytics(context.Context, *GetComplianceAnalyticsRequest) (*GetComplianceAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceAnalytics not implemented")
}
func (UnimplementedComplianceServiceServer) GetComplianceAuditTrail(context.Context, *GetComplianceAuditTrailRequest) (*GetComplianceAuditTrailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceAuditTrail not implemented")
}
func (UnimplementedComplianceServiceServer) mustEmbedUnimplementedComplianceServiceServer() {}
func (UnimplementedComplianceServiceServer) testEmbeddedByValue()                           {}

// UnsafeComplianceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplianceServiceServer will
// result in compilation errors.
type UnsafeComplianceServiceServer interface {
	mustEmbedUnimplementedComplianceServiceServer()
}

func RegisterComplianceServiceServer(s grpc.ServiceRegistrar, srv ComplianceServiceServer) {
	// If the following call pancis, it indicates UnimplementedComplianceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComplianceService_ServiceDesc, srv)
}

func _ComplianceService_GetComplianceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComplianceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetComplianceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetComplianceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetComplianceStatus(ctx, req.(*GetComplianceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_UpdateComplianceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComplianceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).UpdateComplianceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_UpdateComplianceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).UpdateComplianceStatus(ctx, req.(*UpdateComplianceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_ListComplianceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComplianceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).ListComplianceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_ListComplianceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).ListComplianceStatus(ctx, req.(*ListComplianceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GenerateComplianceCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateComplianceCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GenerateComplianceCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GenerateComplianceCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GenerateComplianceCertificate(ctx, req.(*GenerateComplianceCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_ListCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).ListCertificates(ctx, req.(*ListCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_RevokeCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).RevokeCertificate(ctx, req.(*RevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GenerateComplianceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateComplianceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GenerateComplianceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GenerateComplianceReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GenerateComplianceReport(ctx, req.(*GenerateComplianceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetSavedReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetSavedReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetSavedReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetSavedReport(ctx, req.(*GetSavedReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_ListSavedReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSavedReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).ListSavedReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_ListSavedReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).ListSavedReports(ctx, req.(*ListSavedReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_DeleteSavedReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavedReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).DeleteSavedReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_DeleteSavedReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).DeleteSavedReport(ctx, req.(*DeleteSavedReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetComplianceAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComplianceAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetComplianceAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetComplianceAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetComplianceAlerts(ctx, req.(*GetComplianceAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetComplianceAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComplianceAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetComplianceAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetComplianceAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetComplianceAnalytics(ctx, req.(*GetComplianceAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceService_GetComplianceAuditTrail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComplianceAuditTrailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceServiceServer).GetComplianceAuditTrail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComplianceService_GetComplianceAuditTrail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceServiceServer).GetComplianceAuditTrail(ctx, req.(*GetComplianceAuditTrailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplianceService_ServiceDesc is the grpc.ServiceDesc for ComplianceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplianceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.ComplianceService",
	HandlerType: (*ComplianceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComplianceStatus",
			Handler:    _ComplianceService_GetComplianceStatus_Handler,
		},
		{
			MethodName: "UpdateComplianceStatus",
			Handler:    _ComplianceService_UpdateComplianceStatus_Handler,
		},
		{
			MethodName: "ListComplianceStatus",
			Handler:    _ComplianceService_ListComplianceStatus_Handler,
		},
		{
			MethodName: "GenerateComplianceCertificate",
			Handler:    _ComplianceService_GenerateComplianceCertificate_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _ComplianceService_GetCertificate_Handler,
		},
		{
			MethodName: "ListCertificates",
			Handler:    _ComplianceService_ListCertificates_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _ComplianceService_RevokeCertificate_Handler,
		},
		{
			MethodName: "GenerateComplianceReport",
			Handler:    _ComplianceService_GenerateComplianceReport_Handler,
		},
		{
			MethodName: "GetSavedReport",
			Handler:    _ComplianceService_GetSavedReport_Handler,
		},
		{
			MethodName: "ListSavedReports",
			Handler:    _ComplianceService_ListSavedReports_Handler,
		},
		{
			MethodName: "DeleteSavedReport",
			Handler:    _ComplianceService_DeleteSavedReport_Handler,
		},
		{
			MethodName: "GetComplianceAlerts",
			Handler:    _ComplianceService_GetComplianceAlerts_Handler,
		},
		{
			MethodName: "GetComplianceAnalytics",
			Handler:    _ComplianceService_GetComplianceAnalytics_Handler,
		},
		{
			MethodName: "GetComplianceAuditTrail",
			Handler:    _ComplianceService_GetComplianceAuditTrail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/compliance.proto",
}
