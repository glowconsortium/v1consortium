// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/background_check.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackgroundCheckService_OrderBackgroundCheck_FullMethodName        = "/v1consortium.services.BackgroundCheckService/OrderBackgroundCheck"
	BackgroundCheckService_GetBackgroundCheck_FullMethodName          = "/v1consortium.services.BackgroundCheckService/GetBackgroundCheck"
	BackgroundCheckService_UpdateBackgroundCheck_FullMethodName       = "/v1consortium.services.BackgroundCheckService/UpdateBackgroundCheck"
	BackgroundCheckService_ListBackgroundChecks_FullMethodName        = "/v1consortium.services.BackgroundCheckService/ListBackgroundChecks"
	BackgroundCheckService_AddFinding_FullMethodName                  = "/v1consortium.services.BackgroundCheckService/AddFinding"
	BackgroundCheckService_UpdateFinding_FullMethodName               = "/v1consortium.services.BackgroundCheckService/UpdateFinding"
	BackgroundCheckService_ListFindings_FullMethodName                = "/v1consortium.services.BackgroundCheckService/ListFindings"
	BackgroundCheckService_InitiateAdverseAction_FullMethodName       = "/v1consortium.services.BackgroundCheckService/InitiateAdverseAction"
	BackgroundCheckService_HandleDispute_FullMethodName               = "/v1consortium.services.BackgroundCheckService/HandleDispute"
	BackgroundCheckService_GetAdverseActionStatus_FullMethodName      = "/v1consortium.services.BackgroundCheckService/GetAdverseActionStatus"
	BackgroundCheckService_GetAvailablePackages_FullMethodName        = "/v1consortium.services.BackgroundCheckService/GetAvailablePackages"
	BackgroundCheckService_GetProviderStatus_FullMethodName           = "/v1consortium.services.BackgroundCheckService/GetProviderStatus"
	BackgroundCheckService_GetBackgroundCheckAnalytics_FullMethodName = "/v1consortium.services.BackgroundCheckService/GetBackgroundCheckAnalytics"
)

// BackgroundCheckServiceClient is the client API for BackgroundCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Background Check Service Definition
type BackgroundCheckServiceClient interface {
	// Background Check Management
	OrderBackgroundCheck(ctx context.Context, in *OrderBackgroundCheckRequest, opts ...grpc.CallOption) (*OrderBackgroundCheckResponse, error)
	GetBackgroundCheck(ctx context.Context, in *GetBackgroundCheckRequest, opts ...grpc.CallOption) (*GetBackgroundCheckResponse, error)
	UpdateBackgroundCheck(ctx context.Context, in *UpdateBackgroundCheckRequest, opts ...grpc.CallOption) (*UpdateBackgroundCheckResponse, error)
	ListBackgroundChecks(ctx context.Context, in *ListBackgroundChecksRequest, opts ...grpc.CallOption) (*ListBackgroundChecksResponse, error)
	// Findings Management
	AddFinding(ctx context.Context, in *AddFindingRequest, opts ...grpc.CallOption) (*AddFindingResponse, error)
	UpdateFinding(ctx context.Context, in *UpdateFindingRequest, opts ...grpc.CallOption) (*UpdateFindingResponse, error)
	ListFindings(ctx context.Context, in *ListFindingsRequest, opts ...grpc.CallOption) (*ListFindingsResponse, error)
	// FCRA Compliance
	InitiateAdverseAction(ctx context.Context, in *InitiateAdverseActionRequest, opts ...grpc.CallOption) (*InitiateAdverseActionResponse, error)
	HandleDispute(ctx context.Context, in *HandleDisputeRequest, opts ...grpc.CallOption) (*HandleDisputeResponse, error)
	GetAdverseActionStatus(ctx context.Context, in *GetAdverseActionStatusRequest, opts ...grpc.CallOption) (*GetAdverseActionStatusResponse, error)
	// Package and Provider Management
	GetAvailablePackages(ctx context.Context, in *GetAvailablePackagesRequest, opts ...grpc.CallOption) (*GetAvailablePackagesResponse, error)
	GetProviderStatus(ctx context.Context, in *GetProviderStatusRequest, opts ...grpc.CallOption) (*GetProviderStatusResponse, error)
	// Analytics
	GetBackgroundCheckAnalytics(ctx context.Context, in *GetBackgroundCheckAnalyticsRequest, opts ...grpc.CallOption) (*GetBackgroundCheckAnalyticsResponse, error)
}

type backgroundCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackgroundCheckServiceClient(cc grpc.ClientConnInterface) BackgroundCheckServiceClient {
	return &backgroundCheckServiceClient{cc}
}

func (c *backgroundCheckServiceClient) OrderBackgroundCheck(ctx context.Context, in *OrderBackgroundCheckRequest, opts ...grpc.CallOption) (*OrderBackgroundCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderBackgroundCheckResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_OrderBackgroundCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) GetBackgroundCheck(ctx context.Context, in *GetBackgroundCheckRequest, opts ...grpc.CallOption) (*GetBackgroundCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackgroundCheckResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_GetBackgroundCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) UpdateBackgroundCheck(ctx context.Context, in *UpdateBackgroundCheckRequest, opts ...grpc.CallOption) (*UpdateBackgroundCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBackgroundCheckResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_UpdateBackgroundCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) ListBackgroundChecks(ctx context.Context, in *ListBackgroundChecksRequest, opts ...grpc.CallOption) (*ListBackgroundChecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackgroundChecksResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_ListBackgroundChecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) AddFinding(ctx context.Context, in *AddFindingRequest, opts ...grpc.CallOption) (*AddFindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFindingResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_AddFinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) UpdateFinding(ctx context.Context, in *UpdateFindingRequest, opts ...grpc.CallOption) (*UpdateFindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFindingResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_UpdateFinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) ListFindings(ctx context.Context, in *ListFindingsRequest, opts ...grpc.CallOption) (*ListFindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFindingsResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_ListFindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) InitiateAdverseAction(ctx context.Context, in *InitiateAdverseActionRequest, opts ...grpc.CallOption) (*InitiateAdverseActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateAdverseActionResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_InitiateAdverseAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) HandleDispute(ctx context.Context, in *HandleDisputeRequest, opts ...grpc.CallOption) (*HandleDisputeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleDisputeResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_HandleDispute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) GetAdverseActionStatus(ctx context.Context, in *GetAdverseActionStatusRequest, opts ...grpc.CallOption) (*GetAdverseActionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdverseActionStatusResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_GetAdverseActionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) GetAvailablePackages(ctx context.Context, in *GetAvailablePackagesRequest, opts ...grpc.CallOption) (*GetAvailablePackagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailablePackagesResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_GetAvailablePackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) GetProviderStatus(ctx context.Context, in *GetProviderStatusRequest, opts ...grpc.CallOption) (*GetProviderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderStatusResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_GetProviderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundCheckServiceClient) GetBackgroundCheckAnalytics(ctx context.Context, in *GetBackgroundCheckAnalyticsRequest, opts ...grpc.CallOption) (*GetBackgroundCheckAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackgroundCheckAnalyticsResponse)
	err := c.cc.Invoke(ctx, BackgroundCheckService_GetBackgroundCheckAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackgroundCheckServiceServer is the server API for BackgroundCheckService service.
// All implementations must embed UnimplementedBackgroundCheckServiceServer
// for forward compatibility.
//
// Background Check Service Definition
type BackgroundCheckServiceServer interface {
	// Background Check Management
	OrderBackgroundCheck(context.Context, *OrderBackgroundCheckRequest) (*OrderBackgroundCheckResponse, error)
	GetBackgroundCheck(context.Context, *GetBackgroundCheckRequest) (*GetBackgroundCheckResponse, error)
	UpdateBackgroundCheck(context.Context, *UpdateBackgroundCheckRequest) (*UpdateBackgroundCheckResponse, error)
	ListBackgroundChecks(context.Context, *ListBackgroundChecksRequest) (*ListBackgroundChecksResponse, error)
	// Findings Management
	AddFinding(context.Context, *AddFindingRequest) (*AddFindingResponse, error)
	UpdateFinding(context.Context, *UpdateFindingRequest) (*UpdateFindingResponse, error)
	ListFindings(context.Context, *ListFindingsRequest) (*ListFindingsResponse, error)
	// FCRA Compliance
	InitiateAdverseAction(context.Context, *InitiateAdverseActionRequest) (*InitiateAdverseActionResponse, error)
	HandleDispute(context.Context, *HandleDisputeRequest) (*HandleDisputeResponse, error)
	GetAdverseActionStatus(context.Context, *GetAdverseActionStatusRequest) (*GetAdverseActionStatusResponse, error)
	// Package and Provider Management
	GetAvailablePackages(context.Context, *GetAvailablePackagesRequest) (*GetAvailablePackagesResponse, error)
	GetProviderStatus(context.Context, *GetProviderStatusRequest) (*GetProviderStatusResponse, error)
	// Analytics
	GetBackgroundCheckAnalytics(context.Context, *GetBackgroundCheckAnalyticsRequest) (*GetBackgroundCheckAnalyticsResponse, error)
	mustEmbedUnimplementedBackgroundCheckServiceServer()
}

// UnimplementedBackgroundCheckServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackgroundCheckServiceServer struct{}

func (UnimplementedBackgroundCheckServiceServer) OrderBackgroundCheck(context.Context, *OrderBackgroundCheckRequest) (*OrderBackgroundCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBackgroundCheck not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) GetBackgroundCheck(context.Context, *GetBackgroundCheckRequest) (*GetBackgroundCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackgroundCheck not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) UpdateBackgroundCheck(context.Context, *UpdateBackgroundCheckRequest) (*UpdateBackgroundCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackgroundCheck not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) ListBackgroundChecks(context.Context, *ListBackgroundChecksRequest) (*ListBackgroundChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackgroundChecks not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) AddFinding(context.Context, *AddFindingRequest) (*AddFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFinding not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) UpdateFinding(context.Context, *UpdateFindingRequest) (*UpdateFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinding not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) ListFindings(context.Context, *ListFindingsRequest) (*ListFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFindings not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) InitiateAdverseAction(context.Context, *InitiateAdverseActionRequest) (*InitiateAdverseActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateAdverseAction not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) HandleDispute(context.Context, *HandleDisputeRequest) (*HandleDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDispute not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) GetAdverseActionStatus(context.Context, *GetAdverseActionStatusRequest) (*GetAdverseActionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdverseActionStatus not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) GetAvailablePackages(context.Context, *GetAvailablePackagesRequest) (*GetAvailablePackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePackages not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) GetProviderStatus(context.Context, *GetProviderStatusRequest) (*GetProviderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderStatus not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) GetBackgroundCheckAnalytics(context.Context, *GetBackgroundCheckAnalyticsRequest) (*GetBackgroundCheckAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackgroundCheckAnalytics not implemented")
}
func (UnimplementedBackgroundCheckServiceServer) mustEmbedUnimplementedBackgroundCheckServiceServer() {
}
func (UnimplementedBackgroundCheckServiceServer) testEmbeddedByValue() {}

// UnsafeBackgroundCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackgroundCheckServiceServer will
// result in compilation errors.
type UnsafeBackgroundCheckServiceServer interface {
	mustEmbedUnimplementedBackgroundCheckServiceServer()
}

func RegisterBackgroundCheckServiceServer(s grpc.ServiceRegistrar, srv BackgroundCheckServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackgroundCheckServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackgroundCheckService_ServiceDesc, srv)
}

func _BackgroundCheckService_OrderBackgroundCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBackgroundCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).OrderBackgroundCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_OrderBackgroundCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).OrderBackgroundCheck(ctx, req.(*OrderBackgroundCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_GetBackgroundCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackgroundCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).GetBackgroundCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_GetBackgroundCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).GetBackgroundCheck(ctx, req.(*GetBackgroundCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_UpdateBackgroundCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackgroundCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).UpdateBackgroundCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_UpdateBackgroundCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).UpdateBackgroundCheck(ctx, req.(*UpdateBackgroundCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_ListBackgroundChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackgroundChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).ListBackgroundChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_ListBackgroundChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).ListBackgroundChecks(ctx, req.(*ListBackgroundChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_AddFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).AddFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_AddFinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).AddFinding(ctx, req.(*AddFindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_UpdateFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).UpdateFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_UpdateFinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).UpdateFinding(ctx, req.(*UpdateFindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_ListFindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).ListFindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_ListFindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).ListFindings(ctx, req.(*ListFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_InitiateAdverseAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateAdverseActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).InitiateAdverseAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_InitiateAdverseAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).InitiateAdverseAction(ctx, req.(*InitiateAdverseActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_HandleDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).HandleDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_HandleDispute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).HandleDispute(ctx, req.(*HandleDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_GetAdverseActionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdverseActionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).GetAdverseActionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_GetAdverseActionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).GetAdverseActionStatus(ctx, req.(*GetAdverseActionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_GetAvailablePackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailablePackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).GetAvailablePackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_GetAvailablePackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).GetAvailablePackages(ctx, req.(*GetAvailablePackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_GetProviderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).GetProviderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_GetProviderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).GetProviderStatus(ctx, req.(*GetProviderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundCheckService_GetBackgroundCheckAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackgroundCheckAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundCheckServiceServer).GetBackgroundCheckAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundCheckService_GetBackgroundCheckAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundCheckServiceServer).GetBackgroundCheckAnalytics(ctx, req.(*GetBackgroundCheckAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackgroundCheckService_ServiceDesc is the grpc.ServiceDesc for BackgroundCheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackgroundCheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.BackgroundCheckService",
	HandlerType: (*BackgroundCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderBackgroundCheck",
			Handler:    _BackgroundCheckService_OrderBackgroundCheck_Handler,
		},
		{
			MethodName: "GetBackgroundCheck",
			Handler:    _BackgroundCheckService_GetBackgroundCheck_Handler,
		},
		{
			MethodName: "UpdateBackgroundCheck",
			Handler:    _BackgroundCheckService_UpdateBackgroundCheck_Handler,
		},
		{
			MethodName: "ListBackgroundChecks",
			Handler:    _BackgroundCheckService_ListBackgroundChecks_Handler,
		},
		{
			MethodName: "AddFinding",
			Handler:    _BackgroundCheckService_AddFinding_Handler,
		},
		{
			MethodName: "UpdateFinding",
			Handler:    _BackgroundCheckService_UpdateFinding_Handler,
		},
		{
			MethodName: "ListFindings",
			Handler:    _BackgroundCheckService_ListFindings_Handler,
		},
		{
			MethodName: "InitiateAdverseAction",
			Handler:    _BackgroundCheckService_InitiateAdverseAction_Handler,
		},
		{
			MethodName: "HandleDispute",
			Handler:    _BackgroundCheckService_HandleDispute_Handler,
		},
		{
			MethodName: "GetAdverseActionStatus",
			Handler:    _BackgroundCheckService_GetAdverseActionStatus_Handler,
		},
		{
			MethodName: "GetAvailablePackages",
			Handler:    _BackgroundCheckService_GetAvailablePackages_Handler,
		},
		{
			MethodName: "GetProviderStatus",
			Handler:    _BackgroundCheckService_GetProviderStatus_Handler,
		},
		{
			MethodName: "GetBackgroundCheckAnalytics",
			Handler:    _BackgroundCheckService_GetBackgroundCheckAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/background_check.proto",
}
