// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: services/v1/dot_physical.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	pbentity "v1consortium/api/pbentity"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DOT Physical Management Messages
type ScheduleDOTPhysicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId      string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId              string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MedicalExaminerId   string                 `protobuf:"bytes,3,opt,name=medical_examiner_id,json=medicalExaminerId,proto3" json:"medical_examiner_id,omitempty" Optional:"specific examiner"` // Optional: specific examiner
	PreferredDate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=preferred_date,json=preferredDate,proto3" json:"preferred_date,omitempty"`
	ExaminationType     string                 `protobuf:"bytes,5,opt,name=examination_type,json=examinationType,proto3" json:"examination_type,omitempty" dc:"'initial', 'renewal', 'follow_up'"` // "initial", "renewal", "follow_up"
	ScheduledBy         string                 `protobuf:"bytes,6,opt,name=scheduled_by,json=scheduledBy,proto3" json:"scheduled_by,omitempty"`
	FacilityPreference  string                 `protobuf:"bytes,7,opt,name=facility_preference,json=facilityPreference,proto3" json:"facility_preference,omitempty"`
	SpecialRequirements string                 `protobuf:"bytes,8,opt,name=special_requirements,json=specialRequirements,proto3" json:"special_requirements,omitempty" dc:"Any special accommodations needed"` // Any special accommodations needed
}

func (x *ScheduleDOTPhysicalRequest) Reset() {
	*x = ScheduleDOTPhysicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleDOTPhysicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleDOTPhysicalRequest) ProtoMessage() {}

func (x *ScheduleDOTPhysicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleDOTPhysicalRequest.ProtoReflect.Descriptor instead.
func (*ScheduleDOTPhysicalRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleDOTPhysicalRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ScheduleDOTPhysicalRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScheduleDOTPhysicalRequest) GetMedicalExaminerId() string {
	if x != nil {
		return x.MedicalExaminerId
	}
	return ""
}

func (x *ScheduleDOTPhysicalRequest) GetPreferredDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PreferredDate
	}
	return nil
}

func (x *ScheduleDOTPhysicalRequest) GetExaminationType() string {
	if x != nil {
		return x.ExaminationType
	}
	return ""
}

func (x *ScheduleDOTPhysicalRequest) GetScheduledBy() string {
	if x != nil {
		return x.ScheduledBy
	}
	return ""
}

func (x *ScheduleDOTPhysicalRequest) GetFacilityPreference() string {
	if x != nil {
		return x.FacilityPreference
	}
	return ""
}

func (x *ScheduleDOTPhysicalRequest) GetSpecialRequirements() string {
	if x != nil {
		return x.SpecialRequirements
	}
	return ""
}

type ScheduleDOTPhysicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physical                *pbentity.DotPhysicals `protobuf:"bytes,1,opt,name=physical,proto3" json:"physical,omitempty"`
	AppointmentConfirmation string                 `protobuf:"bytes,2,opt,name=appointment_confirmation,json=appointmentConfirmation,proto3" json:"appointment_confirmation,omitempty"`
	ExaminerName            string                 `protobuf:"bytes,3,opt,name=examiner_name,json=examinerName,proto3" json:"examiner_name,omitempty"`
	FacilityName            string                 `protobuf:"bytes,4,opt,name=facility_name,json=facilityName,proto3" json:"facility_name,omitempty"`
	FacilityAddress         string                 `protobuf:"bytes,5,opt,name=facility_address,json=facilityAddress,proto3" json:"facility_address,omitempty"`
}

func (x *ScheduleDOTPhysicalResponse) Reset() {
	*x = ScheduleDOTPhysicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleDOTPhysicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleDOTPhysicalResponse) ProtoMessage() {}

func (x *ScheduleDOTPhysicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleDOTPhysicalResponse.ProtoReflect.Descriptor instead.
func (*ScheduleDOTPhysicalResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleDOTPhysicalResponse) GetPhysical() *pbentity.DotPhysicals {
	if x != nil {
		return x.Physical
	}
	return nil
}

func (x *ScheduleDOTPhysicalResponse) GetAppointmentConfirmation() string {
	if x != nil {
		return x.AppointmentConfirmation
	}
	return ""
}

func (x *ScheduleDOTPhysicalResponse) GetExaminerName() string {
	if x != nil {
		return x.ExaminerName
	}
	return ""
}

func (x *ScheduleDOTPhysicalResponse) GetFacilityName() string {
	if x != nil {
		return x.FacilityName
	}
	return ""
}

func (x *ScheduleDOTPhysicalResponse) GetFacilityAddress() string {
	if x != nil {
		return x.FacilityAddress
	}
	return ""
}

type GetDOTPhysicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalId string `protobuf:"bytes,1,opt,name=physical_id,json=physicalId,proto3" json:"physical_id,omitempty"`
}

func (x *GetDOTPhysicalRequest) Reset() {
	*x = GetDOTPhysicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDOTPhysicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDOTPhysicalRequest) ProtoMessage() {}

func (x *GetDOTPhysicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDOTPhysicalRequest.ProtoReflect.Descriptor instead.
func (*GetDOTPhysicalRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{2}
}

func (x *GetDOTPhysicalRequest) GetPhysicalId() string {
	if x != nil {
		return x.PhysicalId
	}
	return ""
}

type GetDOTPhysicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physical *pbentity.DotPhysicals `protobuf:"bytes,1,opt,name=physical,proto3" json:"physical,omitempty"`
}

func (x *GetDOTPhysicalResponse) Reset() {
	*x = GetDOTPhysicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDOTPhysicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDOTPhysicalResponse) ProtoMessage() {}

func (x *GetDOTPhysicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDOTPhysicalResponse.ProtoReflect.Descriptor instead.
func (*GetDOTPhysicalResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{3}
}

func (x *GetDOTPhysicalResponse) GetPhysical() *pbentity.DotPhysicals {
	if x != nil {
		return x.Physical
	}
	return nil
}

type UpdateDOTPhysicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalId                string                 `protobuf:"bytes,1,opt,name=physical_id,json=physicalId,proto3" json:"physical_id,omitempty"`
	Status                    string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" dc:"'scheduled', 'completed', 'cancelled', 'no_show'"` // "scheduled", "completed", "cancelled", "no_show"
	ExaminationDate           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=examination_date,json=examinationDate,proto3" json:"examination_date,omitempty"`
	QualificationStatus       string                 `protobuf:"bytes,4,opt,name=qualification_status,json=qualificationStatus,proto3" json:"qualification_status,omitempty" dc:"'qualified', 'disqualified', 'qualified_with_restrictions'"` // "qualified", "disqualified", "qualified_with_restrictions"
	CertificateIssueDate      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=certificate_issue_date,json=certificateIssueDate,proto3" json:"certificate_issue_date,omitempty"`
	CertificateExpirationDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=certificate_expiration_date,json=certificateExpirationDate,proto3" json:"certificate_expiration_date,omitempty"`
	CertificateNumber         string                 `protobuf:"bytes,7,opt,name=certificate_number,json=certificateNumber,proto3" json:"certificate_number,omitempty"`
	Restrictions              string                 `protobuf:"bytes,8,opt,name=restrictions,proto3" json:"restrictions,omitempty" dc:"JSON string of any restrictions"` // JSON string of any restrictions
	ExaminerNotes             string                 `protobuf:"bytes,9,opt,name=examiner_notes,json=examinerNotes,proto3" json:"examiner_notes,omitempty"`
	RequiresMonitoring        bool                   `protobuf:"varint,10,opt,name=requires_monitoring,json=requiresMonitoring,proto3" json:"requires_monitoring,omitempty"`
	MonitoringRequirements    string                 `protobuf:"bytes,11,opt,name=monitoring_requirements,json=monitoringRequirements,proto3" json:"monitoring_requirements,omitempty"`
	ExemptionType             string                 `protobuf:"bytes,12,opt,name=exemption_type,json=exemptionType,proto3" json:"exemption_type,omitempty"`
	ExemptionExpiration       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=exemption_expiration,json=exemptionExpiration,proto3" json:"exemption_expiration,omitempty"`
}

func (x *UpdateDOTPhysicalRequest) Reset() {
	*x = UpdateDOTPhysicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDOTPhysicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDOTPhysicalRequest) ProtoMessage() {}

func (x *UpdateDOTPhysicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDOTPhysicalRequest.ProtoReflect.Descriptor instead.
func (*UpdateDOTPhysicalRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDOTPhysicalRequest) GetPhysicalId() string {
	if x != nil {
		return x.PhysicalId
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetExaminationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExaminationDate
	}
	return nil
}

func (x *UpdateDOTPhysicalRequest) GetQualificationStatus() string {
	if x != nil {
		return x.QualificationStatus
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetCertificateIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateIssueDate
	}
	return nil
}

func (x *UpdateDOTPhysicalRequest) GetCertificateExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificateExpirationDate
	}
	return nil
}

func (x *UpdateDOTPhysicalRequest) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetRestrictions() string {
	if x != nil {
		return x.Restrictions
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetExaminerNotes() string {
	if x != nil {
		return x.ExaminerNotes
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetRequiresMonitoring() bool {
	if x != nil {
		return x.RequiresMonitoring
	}
	return false
}

func (x *UpdateDOTPhysicalRequest) GetMonitoringRequirements() string {
	if x != nil {
		return x.MonitoringRequirements
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetExemptionType() string {
	if x != nil {
		return x.ExemptionType
	}
	return ""
}

func (x *UpdateDOTPhysicalRequest) GetExemptionExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.ExemptionExpiration
	}
	return nil
}

type UpdateDOTPhysicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physical *pbentity.DotPhysicals `protobuf:"bytes,1,opt,name=physical,proto3" json:"physical,omitempty"`
}

func (x *UpdateDOTPhysicalResponse) Reset() {
	*x = UpdateDOTPhysicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDOTPhysicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDOTPhysicalResponse) ProtoMessage() {}

func (x *UpdateDOTPhysicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDOTPhysicalResponse.ProtoReflect.Descriptor instead.
func (*UpdateDOTPhysicalResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDOTPhysicalResponse) GetPhysical() *pbentity.DotPhysicals {
	if x != nil {
		return x.Physical
	}
	return nil
}

type ListDOTPhysicalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId      string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId              string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" Optional:"filter by user"`                                                 // Optional: filter by user
	MedicalExaminerId   string                 `protobuf:"bytes,3,opt,name=medical_examiner_id,json=medicalExaminerId,proto3" json:"medical_examiner_id,omitempty" Optional:"filter by examiner"`          // Optional: filter by examiner
	Status              string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" Optional:"filter by status"`                                                             // Optional: filter by status
	QualificationStatus string                 `protobuf:"bytes,5,opt,name=qualification_status,json=qualificationStatus,proto3" json:"qualification_status,omitempty" Optional:"filter by qualification"` // Optional: filter by qualification
	StartDate           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Page                int32                  `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	PageSize            int32                  `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDOTPhysicalsRequest) Reset() {
	*x = ListDOTPhysicalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDOTPhysicalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDOTPhysicalsRequest) ProtoMessage() {}

func (x *ListDOTPhysicalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDOTPhysicalsRequest.ProtoReflect.Descriptor instead.
func (*ListDOTPhysicalsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{6}
}

func (x *ListDOTPhysicalsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListDOTPhysicalsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListDOTPhysicalsRequest) GetMedicalExaminerId() string {
	if x != nil {
		return x.MedicalExaminerId
	}
	return ""
}

func (x *ListDOTPhysicalsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListDOTPhysicalsRequest) GetQualificationStatus() string {
	if x != nil {
		return x.QualificationStatus
	}
	return ""
}

func (x *ListDOTPhysicalsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListDOTPhysicalsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListDOTPhysicalsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDOTPhysicalsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListDOTPhysicalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physicals  []*pbentity.DotPhysicals `protobuf:"bytes,1,rep,name=physicals,proto3" json:"physicals,omitempty"`
	TotalCount int32                    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page       int32                    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32                    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDOTPhysicalsResponse) Reset() {
	*x = ListDOTPhysicalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDOTPhysicalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDOTPhysicalsResponse) ProtoMessage() {}

func (x *ListDOTPhysicalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDOTPhysicalsResponse.ProtoReflect.Descriptor instead.
func (*ListDOTPhysicalsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{7}
}

func (x *ListDOTPhysicalsResponse) GetPhysicals() []*pbentity.DotPhysicals {
	if x != nil {
		return x.Physicals
	}
	return nil
}

func (x *ListDOTPhysicalsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListDOTPhysicalsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDOTPhysicalsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Medical Examiner Management
type RegisterMedicalExaminerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName               string                 `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName                string                 `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email                   string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone                   string                 `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	LicenseNumber           string                 `protobuf:"bytes,5,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	LicenseState            string                 `protobuf:"bytes,6,opt,name=license_state,json=licenseState,proto3" json:"license_state,omitempty"`
	LicenseExpiration       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=license_expiration,json=licenseExpiration,proto3" json:"license_expiration,omitempty"`
	CertificationNumber     string                 `protobuf:"bytes,8,opt,name=certification_number,json=certificationNumber,proto3" json:"certification_number,omitempty"`
	CertificationExpiration *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=certification_expiration,json=certificationExpiration,proto3" json:"certification_expiration,omitempty"`
	PracticeName            string                 `protobuf:"bytes,10,opt,name=practice_name,json=practiceName,proto3" json:"practice_name,omitempty"`
	AddressLine1            string                 `protobuf:"bytes,11,opt,name=address_line1,json=addressLine1,proto3" json:"address_line1,omitempty"`
	AddressLine2            string                 `protobuf:"bytes,12,opt,name=address_line2,json=addressLine2,proto3" json:"address_line2,omitempty"`
	City                    string                 `protobuf:"bytes,13,opt,name=city,proto3" json:"city,omitempty"`
	State                   string                 `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
	ZipCode                 string                 `protobuf:"bytes,15,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	AcceptsNewPatients      bool                   `protobuf:"varint,16,opt,name=accepts_new_patients,json=acceptsNewPatients,proto3" json:"accepts_new_patients,omitempty"`
	Specializations         []string               `protobuf:"bytes,17,rep,name=specializations,proto3" json:"specializations,omitempty"`
}

func (x *RegisterMedicalExaminerRequest) Reset() {
	*x = RegisterMedicalExaminerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMedicalExaminerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMedicalExaminerRequest) ProtoMessage() {}

func (x *RegisterMedicalExaminerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMedicalExaminerRequest.ProtoReflect.Descriptor instead.
func (*RegisterMedicalExaminerRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterMedicalExaminerRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetLicenseState() string {
	if x != nil {
		return x.LicenseState
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetLicenseExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.LicenseExpiration
	}
	return nil
}

func (x *RegisterMedicalExaminerRequest) GetCertificationNumber() string {
	if x != nil {
		return x.CertificationNumber
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetCertificationExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificationExpiration
	}
	return nil
}

func (x *RegisterMedicalExaminerRequest) GetPracticeName() string {
	if x != nil {
		return x.PracticeName
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *RegisterMedicalExaminerRequest) GetAcceptsNewPatients() bool {
	if x != nil {
		return x.AcceptsNewPatients
	}
	return false
}

func (x *RegisterMedicalExaminerRequest) GetSpecializations() []string {
	if x != nil {
		return x.Specializations
	}
	return nil
}

type RegisterMedicalExaminerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExaminerId string `protobuf:"bytes,1,opt,name=examiner_id,json=examinerId,proto3" json:"examiner_id,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RegisterMedicalExaminerResponse) Reset() {
	*x = RegisterMedicalExaminerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMedicalExaminerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMedicalExaminerResponse) ProtoMessage() {}

func (x *RegisterMedicalExaminerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMedicalExaminerResponse.ProtoReflect.Descriptor instead.
func (*RegisterMedicalExaminerResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterMedicalExaminerResponse) GetExaminerId() string {
	if x != nil {
		return x.ExaminerId
	}
	return ""
}

func (x *RegisterMedicalExaminerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMedicalExaminerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExaminerId string `protobuf:"bytes,1,opt,name=examiner_id,json=examinerId,proto3" json:"examiner_id,omitempty"`
}

func (x *GetMedicalExaminerRequest) Reset() {
	*x = GetMedicalExaminerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicalExaminerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicalExaminerRequest) ProtoMessage() {}

func (x *GetMedicalExaminerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicalExaminerRequest.ProtoReflect.Descriptor instead.
func (*GetMedicalExaminerRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{10}
}

func (x *GetMedicalExaminerRequest) GetExaminerId() string {
	if x != nil {
		return x.ExaminerId
	}
	return ""
}

type MedicalExaminerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExaminerId              string                 `protobuf:"bytes,1,opt,name=examiner_id,json=examinerId,proto3" json:"examiner_id,omitempty"`
	FirstName               string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName                string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email                   string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Phone                   string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	LicenseNumber           string                 `protobuf:"bytes,6,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	LicenseState            string                 `protobuf:"bytes,7,opt,name=license_state,json=licenseState,proto3" json:"license_state,omitempty"`
	LicenseExpiration       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=license_expiration,json=licenseExpiration,proto3" json:"license_expiration,omitempty"`
	CertificationNumber     string                 `protobuf:"bytes,9,opt,name=certification_number,json=certificationNumber,proto3" json:"certification_number,omitempty"`
	CertificationExpiration *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=certification_expiration,json=certificationExpiration,proto3" json:"certification_expiration,omitempty"`
	PracticeName            string                 `protobuf:"bytes,11,opt,name=practice_name,json=practiceName,proto3" json:"practice_name,omitempty"`
	FullAddress             string                 `protobuf:"bytes,12,opt,name=full_address,json=fullAddress,proto3" json:"full_address,omitempty"`
	AcceptsNewPatients      bool                   `protobuf:"varint,13,opt,name=accepts_new_patients,json=acceptsNewPatients,proto3" json:"accepts_new_patients,omitempty"`
	Specializations         []string               `protobuf:"bytes,14,rep,name=specializations,proto3" json:"specializations,omitempty"`
	IsActive                bool                   `protobuf:"varint,15,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Rating                  float32                `protobuf:"fixed32,16,opt,name=rating,proto3" json:"rating,omitempty"`
	ExaminationsCompleted   int32                  `protobuf:"varint,17,opt,name=examinations_completed,json=examinationsCompleted,proto3" json:"examinations_completed,omitempty"`
}

func (x *MedicalExaminerInfo) Reset() {
	*x = MedicalExaminerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalExaminerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalExaminerInfo) ProtoMessage() {}

func (x *MedicalExaminerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalExaminerInfo.ProtoReflect.Descriptor instead.
func (*MedicalExaminerInfo) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{11}
}

func (x *MedicalExaminerInfo) GetExaminerId() string {
	if x != nil {
		return x.ExaminerId
	}
	return ""
}

func (x *MedicalExaminerInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *MedicalExaminerInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *MedicalExaminerInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MedicalExaminerInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MedicalExaminerInfo) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *MedicalExaminerInfo) GetLicenseState() string {
	if x != nil {
		return x.LicenseState
	}
	return ""
}

func (x *MedicalExaminerInfo) GetLicenseExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.LicenseExpiration
	}
	return nil
}

func (x *MedicalExaminerInfo) GetCertificationNumber() string {
	if x != nil {
		return x.CertificationNumber
	}
	return ""
}

func (x *MedicalExaminerInfo) GetCertificationExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.CertificationExpiration
	}
	return nil
}

func (x *MedicalExaminerInfo) GetPracticeName() string {
	if x != nil {
		return x.PracticeName
	}
	return ""
}

func (x *MedicalExaminerInfo) GetFullAddress() string {
	if x != nil {
		return x.FullAddress
	}
	return ""
}

func (x *MedicalExaminerInfo) GetAcceptsNewPatients() bool {
	if x != nil {
		return x.AcceptsNewPatients
	}
	return false
}

func (x *MedicalExaminerInfo) GetSpecializations() []string {
	if x != nil {
		return x.Specializations
	}
	return nil
}

func (x *MedicalExaminerInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *MedicalExaminerInfo) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *MedicalExaminerInfo) GetExaminationsCompleted() int32 {
	if x != nil {
		return x.ExaminationsCompleted
	}
	return 0
}

type GetMedicalExaminerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Examiner *MedicalExaminerInfo `protobuf:"bytes,1,opt,name=examiner,proto3" json:"examiner,omitempty"`
}

func (x *GetMedicalExaminerResponse) Reset() {
	*x = GetMedicalExaminerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicalExaminerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicalExaminerResponse) ProtoMessage() {}

func (x *GetMedicalExaminerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicalExaminerResponse.ProtoReflect.Descriptor instead.
func (*GetMedicalExaminerResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{12}
}

func (x *GetMedicalExaminerResponse) GetExaminer() *MedicalExaminerInfo {
	if x != nil {
		return x.Examiner
	}
	return nil
}

type ListMedicalExaminersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State              string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty" Optional:"filter by state"`                                                               // Optional: filter by state
	City               string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty" Optional:"filter by city"`                                                                  // Optional: filter by city
	ZipCode            string `protobuf:"bytes,3,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty" Optional:"filter by zip code"`                                         // Optional: filter by zip code
	AcceptsNewPatients bool   `protobuf:"varint,4,opt,name=accepts_new_patients,json=acceptsNewPatients,proto3" json:"accepts_new_patients,omitempty" Optional:"filter by availability"` // Optional: filter by availability
	RadiusMiles        int32  `protobuf:"varint,5,opt,name=radius_miles,json=radiusMiles,proto3" json:"radius_miles,omitempty" Optional:"search radius"`                                 // Optional: search radius
	Location           string `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty" Optional:"center point for radius search"`                                          // Optional: center point for radius search
}

func (x *ListMedicalExaminersRequest) Reset() {
	*x = ListMedicalExaminersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicalExaminersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicalExaminersRequest) ProtoMessage() {}

func (x *ListMedicalExaminersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicalExaminersRequest.ProtoReflect.Descriptor instead.
func (*ListMedicalExaminersRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{13}
}

func (x *ListMedicalExaminersRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ListMedicalExaminersRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListMedicalExaminersRequest) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *ListMedicalExaminersRequest) GetAcceptsNewPatients() bool {
	if x != nil {
		return x.AcceptsNewPatients
	}
	return false
}

func (x *ListMedicalExaminersRequest) GetRadiusMiles() int32 {
	if x != nil {
		return x.RadiusMiles
	}
	return 0
}

func (x *ListMedicalExaminersRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type ListMedicalExaminersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Examiners []*MedicalExaminerInfo `protobuf:"bytes,1,rep,name=examiners,proto3" json:"examiners,omitempty"`
}

func (x *ListMedicalExaminersResponse) Reset() {
	*x = ListMedicalExaminersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicalExaminersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicalExaminersResponse) ProtoMessage() {}

func (x *ListMedicalExaminersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicalExaminersResponse.ProtoReflect.Descriptor instead.
func (*ListMedicalExaminersResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{14}
}

func (x *ListMedicalExaminersResponse) GetExaminers() []*MedicalExaminerInfo {
	if x != nil {
		return x.Examiners
	}
	return nil
}

// Certificate Management
type GenerateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalId          string `protobuf:"bytes,1,opt,name=physical_id,json=physicalId,proto3" json:"physical_id,omitempty"`
	TemplateType        string `protobuf:"bytes,2,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty" dc:"'dot_medical_certificate', 'exemption_certificate'"` // "dot_medical_certificate", "exemption_certificate"
	IncludeRestrictions bool   `protobuf:"varint,3,opt,name=include_restrictions,json=includeRestrictions,proto3" json:"include_restrictions,omitempty"`
}

func (x *GenerateCertificateRequest) Reset() {
	*x = GenerateCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCertificateRequest) ProtoMessage() {}

func (x *GenerateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCertificateRequest.ProtoReflect.Descriptor instead.
func (*GenerateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateCertificateRequest) GetPhysicalId() string {
	if x != nil {
		return x.PhysicalId
	}
	return ""
}

func (x *GenerateCertificateRequest) GetTemplateType() string {
	if x != nil {
		return x.TemplateType
	}
	return ""
}

func (x *GenerateCertificateRequest) GetIncludeRestrictions() bool {
	if x != nil {
		return x.IncludeRestrictions
	}
	return false
}

type GenerateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateUrl    string                 `protobuf:"bytes,1,opt,name=certificate_url,json=certificateUrl,proto3" json:"certificate_url,omitempty"`
	CertificateNumber string                 `protobuf:"bytes,2,opt,name=certificate_number,json=certificateNumber,proto3" json:"certificate_number,omitempty"`
	GeneratedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
}

func (x *GenerateCertificateResponse) Reset() {
	*x = GenerateCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCertificateResponse) ProtoMessage() {}

func (x *GenerateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCertificateResponse.ProtoReflect.Descriptor instead.
func (*GenerateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{16}
}

func (x *GenerateCertificateResponse) GetCertificateUrl() string {
	if x != nil {
		return x.CertificateUrl
	}
	return ""
}

func (x *GenerateCertificateResponse) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *GenerateCertificateResponse) GetGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedAt
	}
	return nil
}

type ValidateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateNumber string `protobuf:"bytes,1,opt,name=certificate_number,json=certificateNumber,proto3" json:"certificate_number,omitempty"`
	UserId            string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" Optional:"validate for specific user"` // Optional: validate for specific user
}

func (x *ValidateCertificateRequest) Reset() {
	*x = ValidateCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCertificateRequest) ProtoMessage() {}

func (x *ValidateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCertificateRequest.ProtoReflect.Descriptor instead.
func (*ValidateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{17}
}

func (x *ValidateCertificateRequest) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *ValidateCertificateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ValidateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid         bool                   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Status          string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" dc:"'valid', 'expired', 'revoked', 'not_found'"` // "valid", "expired", "revoked", "not_found"
	ExpirationDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	HolderName      string                 `protobuf:"bytes,4,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	Restrictions    string                 `protobuf:"bytes,5,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	IssuingExaminer string                 `protobuf:"bytes,6,opt,name=issuing_examiner,json=issuingExaminer,proto3" json:"issuing_examiner,omitempty"`
}

func (x *ValidateCertificateResponse) Reset() {
	*x = ValidateCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCertificateResponse) ProtoMessage() {}

func (x *ValidateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCertificateResponse.ProtoReflect.Descriptor instead.
func (*ValidateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{18}
}

func (x *ValidateCertificateResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateCertificateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ValidateCertificateResponse) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *ValidateCertificateResponse) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *ValidateCertificateResponse) GetRestrictions() string {
	if x != nil {
		return x.Restrictions
	}
	return ""
}

func (x *ValidateCertificateResponse) GetIssuingExaminer() string {
	if x != nil {
		return x.IssuingExaminer
	}
	return ""
}

// Expiration Monitoring
type GetExpiringCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DaysAhead      int32  `protobuf:"varint,2,opt,name=days_ahead,json=daysAhead,proto3" json:"days_ahead,omitempty" dc:"How many days in advance to check"` // How many days in advance to check
}

func (x *GetExpiringCertificatesRequest) Reset() {
	*x = GetExpiringCertificatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExpiringCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpiringCertificatesRequest) ProtoMessage() {}

func (x *GetExpiringCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpiringCertificatesRequest.ProtoReflect.Descriptor instead.
func (*GetExpiringCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{19}
}

func (x *GetExpiringCertificatesRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetExpiringCertificatesRequest) GetDaysAhead() int32 {
	if x != nil {
		return x.DaysAhead
	}
	return 0
}

type ExpiringCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName            string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	CertificateNumber   string                 `protobuf:"bytes,3,opt,name=certificate_number,json=certificateNumber,proto3" json:"certificate_number,omitempty"`
	ExpirationDate      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	DaysUntilExpiration int32                  `protobuf:"varint,5,opt,name=days_until_expiration,json=daysUntilExpiration,proto3" json:"days_until_expiration,omitempty"`
	QualificationStatus string                 `protobuf:"bytes,6,opt,name=qualification_status,json=qualificationStatus,proto3" json:"qualification_status,omitempty"`
}

func (x *ExpiringCertificate) Reset() {
	*x = ExpiringCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpiringCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpiringCertificate) ProtoMessage() {}

func (x *ExpiringCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpiringCertificate.ProtoReflect.Descriptor instead.
func (*ExpiringCertificate) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{20}
}

func (x *ExpiringCertificate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ExpiringCertificate) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ExpiringCertificate) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *ExpiringCertificate) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *ExpiringCertificate) GetDaysUntilExpiration() int32 {
	if x != nil {
		return x.DaysUntilExpiration
	}
	return 0
}

func (x *ExpiringCertificate) GetQualificationStatus() string {
	if x != nil {
		return x.QualificationStatus
	}
	return ""
}

type GetExpiringCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiringCertificates []*ExpiringCertificate `protobuf:"bytes,1,rep,name=expiring_certificates,json=expiringCertificates,proto3" json:"expiring_certificates,omitempty"`
}

func (x *GetExpiringCertificatesResponse) Reset() {
	*x = GetExpiringCertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExpiringCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpiringCertificatesResponse) ProtoMessage() {}

func (x *GetExpiringCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpiringCertificatesResponse.ProtoReflect.Descriptor instead.
func (*GetExpiringCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{21}
}

func (x *GetExpiringCertificatesResponse) GetExpiringCertificates() []*ExpiringCertificate {
	if x != nil {
		return x.ExpiringCertificates
	}
	return nil
}

type SetExpirationReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId         string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ReminderDays           []int32  `protobuf:"varint,2,rep,packed,name=reminder_days,json=reminderDays,proto3" json:"reminder_days,omitempty" dc:"Days before expiration to send reminders"` // Days before expiration to send reminders
	EmailEnabled           bool     `protobuf:"varint,3,opt,name=email_enabled,json=emailEnabled,proto3" json:"email_enabled,omitempty"`
	SmsEnabled             bool     `protobuf:"varint,4,opt,name=sms_enabled,json=smsEnabled,proto3" json:"sms_enabled,omitempty"`
	NotificationRecipients []string `protobuf:"bytes,5,rep,name=notification_recipients,json=notificationRecipients,proto3" json:"notification_recipients,omitempty" dc:"Additional recipients"` // Additional recipients
}

func (x *SetExpirationReminderRequest) Reset() {
	*x = SetExpirationReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExpirationReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExpirationReminderRequest) ProtoMessage() {}

func (x *SetExpirationReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExpirationReminderRequest.ProtoReflect.Descriptor instead.
func (*SetExpirationReminderRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{22}
}

func (x *SetExpirationReminderRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *SetExpirationReminderRequest) GetReminderDays() []int32 {
	if x != nil {
		return x.ReminderDays
	}
	return nil
}

func (x *SetExpirationReminderRequest) GetEmailEnabled() bool {
	if x != nil {
		return x.EmailEnabled
	}
	return false
}

func (x *SetExpirationReminderRequest) GetSmsEnabled() bool {
	if x != nil {
		return x.SmsEnabled
	}
	return false
}

func (x *SetExpirationReminderRequest) GetNotificationRecipients() []string {
	if x != nil {
		return x.NotificationRecipients
	}
	return nil
}

type SetExpirationReminderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetExpirationReminderResponse) Reset() {
	*x = SetExpirationReminderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_dot_physical_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetExpirationReminderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExpirationReminderResponse) ProtoMessage() {}

func (x *SetExpirationReminderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_dot_physical_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExpirationReminderResponse.ProtoReflect.Descriptor instead.
func (*SetExpirationReminderResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_dot_physical_proto_rawDescGZIP(), []int{23}
}

func (x *SetExpirationReminderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_services_v1_dot_physical_proto protoreflect.FileDescriptor

var file_services_v1_dot_physical_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f,
	0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2f, 0x64, 0x6f, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x03, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x1b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x6f, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x52, 0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x39,
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x61,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44,
	0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x44, 0x6f, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x52, 0x08, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x22, 0xd5, 0x05, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x10,
	0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x37, 0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4d, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x65, 0x78, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x6f, 0x74, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x73, 0x52, 0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x22,
	0xf9, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x6f, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x73, 0x52, 0x09, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xb9, 0x05, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x18, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x1f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcf, 0x05, 0x0a, 0x13, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x18, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x16, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x31, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0x95, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x64, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x68, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x73,
	0x5f, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61,
	0x79, 0x73, 0x41, 0x68, 0x65, 0x61, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x79,
	0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x61, 0x79, 0x73, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x6d, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xec,
	0x0f, 0x0a, 0x12, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x31, 0x2e,
	0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x4f,
	0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22,
	0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x74, 0x2d, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x4f,
	0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x74, 0x2d, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4f,
	0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x31, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x6f, 0x74, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x2f, 0x7b,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x4f, 0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x73, 0x12, 0x2e, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x4f,
	0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x4f,
	0x54, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x74, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x73, 0x12, 0xae, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x2e,
	0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xa2, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x32, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x76,
	0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x76,
	0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x74, 0x2d, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0xaa, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x31, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x6f, 0x74, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0xd3, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12,
	0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x74, 0x2d, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0xd8, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x76,
	0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a,
	0x01, 0x2a, 0x22, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x74, 0x2d,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x42, 0x1e, 0x5a,
	0x1c, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_v1_dot_physical_proto_rawDescOnce sync.Once
	file_services_v1_dot_physical_proto_rawDescData = file_services_v1_dot_physical_proto_rawDesc
)

func file_services_v1_dot_physical_proto_rawDescGZIP() []byte {
	file_services_v1_dot_physical_proto_rawDescOnce.Do(func() {
		file_services_v1_dot_physical_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_v1_dot_physical_proto_rawDescData)
	})
	return file_services_v1_dot_physical_proto_rawDescData
}

var file_services_v1_dot_physical_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_services_v1_dot_physical_proto_goTypes = []interface{}{
	(*ScheduleDOTPhysicalRequest)(nil),      // 0: v1consortium.services.ScheduleDOTPhysicalRequest
	(*ScheduleDOTPhysicalResponse)(nil),     // 1: v1consortium.services.ScheduleDOTPhysicalResponse
	(*GetDOTPhysicalRequest)(nil),           // 2: v1consortium.services.GetDOTPhysicalRequest
	(*GetDOTPhysicalResponse)(nil),          // 3: v1consortium.services.GetDOTPhysicalResponse
	(*UpdateDOTPhysicalRequest)(nil),        // 4: v1consortium.services.UpdateDOTPhysicalRequest
	(*UpdateDOTPhysicalResponse)(nil),       // 5: v1consortium.services.UpdateDOTPhysicalResponse
	(*ListDOTPhysicalsRequest)(nil),         // 6: v1consortium.services.ListDOTPhysicalsRequest
	(*ListDOTPhysicalsResponse)(nil),        // 7: v1consortium.services.ListDOTPhysicalsResponse
	(*RegisterMedicalExaminerRequest)(nil),  // 8: v1consortium.services.RegisterMedicalExaminerRequest
	(*RegisterMedicalExaminerResponse)(nil), // 9: v1consortium.services.RegisterMedicalExaminerResponse
	(*GetMedicalExaminerRequest)(nil),       // 10: v1consortium.services.GetMedicalExaminerRequest
	(*MedicalExaminerInfo)(nil),             // 11: v1consortium.services.MedicalExaminerInfo
	(*GetMedicalExaminerResponse)(nil),      // 12: v1consortium.services.GetMedicalExaminerResponse
	(*ListMedicalExaminersRequest)(nil),     // 13: v1consortium.services.ListMedicalExaminersRequest
	(*ListMedicalExaminersResponse)(nil),    // 14: v1consortium.services.ListMedicalExaminersResponse
	(*GenerateCertificateRequest)(nil),      // 15: v1consortium.services.GenerateCertificateRequest
	(*GenerateCertificateResponse)(nil),     // 16: v1consortium.services.GenerateCertificateResponse
	(*ValidateCertificateRequest)(nil),      // 17: v1consortium.services.ValidateCertificateRequest
	(*ValidateCertificateResponse)(nil),     // 18: v1consortium.services.ValidateCertificateResponse
	(*GetExpiringCertificatesRequest)(nil),  // 19: v1consortium.services.GetExpiringCertificatesRequest
	(*ExpiringCertificate)(nil),             // 20: v1consortium.services.ExpiringCertificate
	(*GetExpiringCertificatesResponse)(nil), // 21: v1consortium.services.GetExpiringCertificatesResponse
	(*SetExpirationReminderRequest)(nil),    // 22: v1consortium.services.SetExpirationReminderRequest
	(*SetExpirationReminderResponse)(nil),   // 23: v1consortium.services.SetExpirationReminderResponse
	(*timestamppb.Timestamp)(nil),           // 24: google.protobuf.Timestamp
	(*pbentity.DotPhysicals)(nil),           // 25: pbentity.DotPhysicals
}
var file_services_v1_dot_physical_proto_depIdxs = []int32{
	24, // 0: v1consortium.services.ScheduleDOTPhysicalRequest.preferred_date:type_name -> google.protobuf.Timestamp
	25, // 1: v1consortium.services.ScheduleDOTPhysicalResponse.physical:type_name -> pbentity.DotPhysicals
	25, // 2: v1consortium.services.GetDOTPhysicalResponse.physical:type_name -> pbentity.DotPhysicals
	24, // 3: v1consortium.services.UpdateDOTPhysicalRequest.examination_date:type_name -> google.protobuf.Timestamp
	24, // 4: v1consortium.services.UpdateDOTPhysicalRequest.certificate_issue_date:type_name -> google.protobuf.Timestamp
	24, // 5: v1consortium.services.UpdateDOTPhysicalRequest.certificate_expiration_date:type_name -> google.protobuf.Timestamp
	24, // 6: v1consortium.services.UpdateDOTPhysicalRequest.exemption_expiration:type_name -> google.protobuf.Timestamp
	25, // 7: v1consortium.services.UpdateDOTPhysicalResponse.physical:type_name -> pbentity.DotPhysicals
	24, // 8: v1consortium.services.ListDOTPhysicalsRequest.start_date:type_name -> google.protobuf.Timestamp
	24, // 9: v1consortium.services.ListDOTPhysicalsRequest.end_date:type_name -> google.protobuf.Timestamp
	25, // 10: v1consortium.services.ListDOTPhysicalsResponse.physicals:type_name -> pbentity.DotPhysicals
	24, // 11: v1consortium.services.RegisterMedicalExaminerRequest.license_expiration:type_name -> google.protobuf.Timestamp
	24, // 12: v1consortium.services.RegisterMedicalExaminerRequest.certification_expiration:type_name -> google.protobuf.Timestamp
	24, // 13: v1consortium.services.MedicalExaminerInfo.license_expiration:type_name -> google.protobuf.Timestamp
	24, // 14: v1consortium.services.MedicalExaminerInfo.certification_expiration:type_name -> google.protobuf.Timestamp
	11, // 15: v1consortium.services.GetMedicalExaminerResponse.examiner:type_name -> v1consortium.services.MedicalExaminerInfo
	11, // 16: v1consortium.services.ListMedicalExaminersResponse.examiners:type_name -> v1consortium.services.MedicalExaminerInfo
	24, // 17: v1consortium.services.GenerateCertificateResponse.generated_at:type_name -> google.protobuf.Timestamp
	24, // 18: v1consortium.services.ValidateCertificateResponse.expiration_date:type_name -> google.protobuf.Timestamp
	24, // 19: v1consortium.services.ExpiringCertificate.expiration_date:type_name -> google.protobuf.Timestamp
	20, // 20: v1consortium.services.GetExpiringCertificatesResponse.expiring_certificates:type_name -> v1consortium.services.ExpiringCertificate
	0,  // 21: v1consortium.services.DOTPhysicalService.ScheduleDOTPhysical:input_type -> v1consortium.services.ScheduleDOTPhysicalRequest
	2,  // 22: v1consortium.services.DOTPhysicalService.GetDOTPhysical:input_type -> v1consortium.services.GetDOTPhysicalRequest
	4,  // 23: v1consortium.services.DOTPhysicalService.UpdateDOTPhysical:input_type -> v1consortium.services.UpdateDOTPhysicalRequest
	6,  // 24: v1consortium.services.DOTPhysicalService.ListDOTPhysicals:input_type -> v1consortium.services.ListDOTPhysicalsRequest
	8,  // 25: v1consortium.services.DOTPhysicalService.RegisterMedicalExaminer:input_type -> v1consortium.services.RegisterMedicalExaminerRequest
	10, // 26: v1consortium.services.DOTPhysicalService.GetMedicalExaminer:input_type -> v1consortium.services.GetMedicalExaminerRequest
	13, // 27: v1consortium.services.DOTPhysicalService.ListMedicalExaminers:input_type -> v1consortium.services.ListMedicalExaminersRequest
	15, // 28: v1consortium.services.DOTPhysicalService.GenerateCertificate:input_type -> v1consortium.services.GenerateCertificateRequest
	17, // 29: v1consortium.services.DOTPhysicalService.ValidateCertificate:input_type -> v1consortium.services.ValidateCertificateRequest
	19, // 30: v1consortium.services.DOTPhysicalService.GetExpiringCertificates:input_type -> v1consortium.services.GetExpiringCertificatesRequest
	22, // 31: v1consortium.services.DOTPhysicalService.SetExpirationReminder:input_type -> v1consortium.services.SetExpirationReminderRequest
	1,  // 32: v1consortium.services.DOTPhysicalService.ScheduleDOTPhysical:output_type -> v1consortium.services.ScheduleDOTPhysicalResponse
	3,  // 33: v1consortium.services.DOTPhysicalService.GetDOTPhysical:output_type -> v1consortium.services.GetDOTPhysicalResponse
	5,  // 34: v1consortium.services.DOTPhysicalService.UpdateDOTPhysical:output_type -> v1consortium.services.UpdateDOTPhysicalResponse
	7,  // 35: v1consortium.services.DOTPhysicalService.ListDOTPhysicals:output_type -> v1consortium.services.ListDOTPhysicalsResponse
	9,  // 36: v1consortium.services.DOTPhysicalService.RegisterMedicalExaminer:output_type -> v1consortium.services.RegisterMedicalExaminerResponse
	12, // 37: v1consortium.services.DOTPhysicalService.GetMedicalExaminer:output_type -> v1consortium.services.GetMedicalExaminerResponse
	14, // 38: v1consortium.services.DOTPhysicalService.ListMedicalExaminers:output_type -> v1consortium.services.ListMedicalExaminersResponse
	16, // 39: v1consortium.services.DOTPhysicalService.GenerateCertificate:output_type -> v1consortium.services.GenerateCertificateResponse
	18, // 40: v1consortium.services.DOTPhysicalService.ValidateCertificate:output_type -> v1consortium.services.ValidateCertificateResponse
	21, // 41: v1consortium.services.DOTPhysicalService.GetExpiringCertificates:output_type -> v1consortium.services.GetExpiringCertificatesResponse
	23, // 42: v1consortium.services.DOTPhysicalService.SetExpirationReminder:output_type -> v1consortium.services.SetExpirationReminderResponse
	32, // [32:43] is the sub-list for method output_type
	21, // [21:32] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_services_v1_dot_physical_proto_init() }
func file_services_v1_dot_physical_proto_init() {
	if File_services_v1_dot_physical_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_v1_dot_physical_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleDOTPhysicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleDOTPhysicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDOTPhysicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDOTPhysicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDOTPhysicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDOTPhysicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDOTPhysicalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDOTPhysicalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMedicalExaminerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMedicalExaminerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicalExaminerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalExaminerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicalExaminerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicalExaminersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicalExaminersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExpiringCertificatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpiringCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExpiringCertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExpirationReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_dot_physical_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetExpirationReminderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_v1_dot_physical_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_v1_dot_physical_proto_goTypes,
		DependencyIndexes: file_services_v1_dot_physical_proto_depIdxs,
		MessageInfos:      file_services_v1_dot_physical_proto_msgTypes,
	}.Build()
	File_services_v1_dot_physical_proto = out.File
	file_services_v1_dot_physical_proto_rawDesc = nil
	file_services_v1_dot_physical_proto_goTypes = nil
	file_services_v1_dot_physical_proto_depIdxs = nil
}
