// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/workflow.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowService_StartWorkflow_FullMethodName                = "/v1consortium.services.WorkflowService/StartWorkflow"
	WorkflowService_GetWorkflow_FullMethodName                  = "/v1consortium.services.WorkflowService/GetWorkflow"
	WorkflowService_ListWorkflows_FullMethodName                = "/v1consortium.services.WorkflowService/ListWorkflows"
	WorkflowService_UpdateWorkflow_FullMethodName               = "/v1consortium.services.WorkflowService/UpdateWorkflow"
	WorkflowService_CancelWorkflow_FullMethodName               = "/v1consortium.services.WorkflowService/CancelWorkflow"
	WorkflowService_RetryWorkflow_FullMethodName                = "/v1consortium.services.WorkflowService/RetryWorkflow"
	WorkflowService_StartDrugTestOrderWorkflow_FullMethodName   = "/v1consortium.services.WorkflowService/StartDrugTestOrderWorkflow"
	WorkflowService_StartMVRMonitoringWorkflow_FullMethodName   = "/v1consortium.services.WorkflowService/StartMVRMonitoringWorkflow"
	WorkflowService_StartRandomSelectionWorkflow_FullMethodName = "/v1consortium.services.WorkflowService/StartRandomSelectionWorkflow"
	WorkflowService_StartBackgroundCheckWorkflow_FullMethodName = "/v1consortium.services.WorkflowService/StartBackgroundCheckWorkflow"
	WorkflowService_StartNotificationWorkflow_FullMethodName    = "/v1consortium.services.WorkflowService/StartNotificationWorkflow"
	WorkflowService_GetWorkflowAnalytics_FullMethodName         = "/v1consortium.services.WorkflowService/GetWorkflowAnalytics"
	WorkflowService_GetFailedWorkflows_FullMethodName           = "/v1consortium.services.WorkflowService/GetFailedWorkflows"
	WorkflowService_GetRunningWorkflows_FullMethodName          = "/v1consortium.services.WorkflowService/GetRunningWorkflows"
)

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Workflow Service Definition
type WorkflowServiceClient interface {
	// Generic Workflow Management
	StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error)
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error)
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error)
	CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error)
	RetryWorkflow(ctx context.Context, in *RetryWorkflowRequest, opts ...grpc.CallOption) (*RetryWorkflowResponse, error)
	// Specific Workflow Types
	StartDrugTestOrderWorkflow(ctx context.Context, in *StartDrugTestOrderWorkflowRequest, opts ...grpc.CallOption) (*StartDrugTestOrderWorkflowResponse, error)
	StartMVRMonitoringWorkflow(ctx context.Context, in *StartMVRMonitoringWorkflowRequest, opts ...grpc.CallOption) (*StartMVRMonitoringWorkflowResponse, error)
	StartRandomSelectionWorkflow(ctx context.Context, in *StartRandomSelectionWorkflowRequest, opts ...grpc.CallOption) (*StartRandomSelectionWorkflowResponse, error)
	StartBackgroundCheckWorkflow(ctx context.Context, in *StartBackgroundCheckWorkflowRequest, opts ...grpc.CallOption) (*StartBackgroundCheckWorkflowResponse, error)
	StartNotificationWorkflow(ctx context.Context, in *StartNotificationWorkflowRequest, opts ...grpc.CallOption) (*StartNotificationWorkflowResponse, error)
	// Workflow Analytics and Monitoring
	GetWorkflowAnalytics(ctx context.Context, in *GetWorkflowAnalyticsRequest, opts ...grpc.CallOption) (*GetWorkflowAnalyticsResponse, error)
	GetFailedWorkflows(ctx context.Context, in *GetFailedWorkflowsRequest, opts ...grpc.CallOption) (*GetFailedWorkflowsResponse, error)
	GetRunningWorkflows(ctx context.Context, in *GetRunningWorkflowsRequest, opts ...grpc.CallOption) (*GetRunningWorkflowsResponse, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_UpdateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_CancelWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RetryWorkflow(ctx context.Context, in *RetryWorkflowRequest, opts ...grpc.CallOption) (*RetryWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_RetryWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) StartDrugTestOrderWorkflow(ctx context.Context, in *StartDrugTestOrderWorkflowRequest, opts ...grpc.CallOption) (*StartDrugTestOrderWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartDrugTestOrderWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartDrugTestOrderWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) StartMVRMonitoringWorkflow(ctx context.Context, in *StartMVRMonitoringWorkflowRequest, opts ...grpc.CallOption) (*StartMVRMonitoringWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartMVRMonitoringWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartMVRMonitoringWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) StartRandomSelectionWorkflow(ctx context.Context, in *StartRandomSelectionWorkflowRequest, opts ...grpc.CallOption) (*StartRandomSelectionWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRandomSelectionWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartRandomSelectionWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) StartBackgroundCheckWorkflow(ctx context.Context, in *StartBackgroundCheckWorkflowRequest, opts ...grpc.CallOption) (*StartBackgroundCheckWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartBackgroundCheckWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartBackgroundCheckWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) StartNotificationWorkflow(ctx context.Context, in *StartNotificationWorkflowRequest, opts ...grpc.CallOption) (*StartNotificationWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartNotificationWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartNotificationWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowAnalytics(ctx context.Context, in *GetWorkflowAnalyticsRequest, opts ...grpc.CallOption) (*GetWorkflowAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowAnalyticsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetFailedWorkflows(ctx context.Context, in *GetFailedWorkflowsRequest, opts ...grpc.CallOption) (*GetFailedWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFailedWorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetFailedWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetRunningWorkflows(ctx context.Context, in *GetRunningWorkflowsRequest, opts ...grpc.CallOption) (*GetRunningWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunningWorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetRunningWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility.
//
// Workflow Service Definition
type WorkflowServiceServer interface {
	// Generic Workflow Management
	StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error)
	GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error)
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)
	UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error)
	CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error)
	RetryWorkflow(context.Context, *RetryWorkflowRequest) (*RetryWorkflowResponse, error)
	// Specific Workflow Types
	StartDrugTestOrderWorkflow(context.Context, *StartDrugTestOrderWorkflowRequest) (*StartDrugTestOrderWorkflowResponse, error)
	StartMVRMonitoringWorkflow(context.Context, *StartMVRMonitoringWorkflowRequest) (*StartMVRMonitoringWorkflowResponse, error)
	StartRandomSelectionWorkflow(context.Context, *StartRandomSelectionWorkflowRequest) (*StartRandomSelectionWorkflowResponse, error)
	StartBackgroundCheckWorkflow(context.Context, *StartBackgroundCheckWorkflowRequest) (*StartBackgroundCheckWorkflowResponse, error)
	StartNotificationWorkflow(context.Context, *StartNotificationWorkflowRequest) (*StartNotificationWorkflowResponse, error)
	// Workflow Analytics and Monitoring
	GetWorkflowAnalytics(context.Context, *GetWorkflowAnalyticsRequest) (*GetWorkflowAnalyticsResponse, error)
	GetFailedWorkflows(context.Context, *GetFailedWorkflowsRequest) (*GetFailedWorkflowsResponse, error)
	GetRunningWorkflows(context.Context, *GetRunningWorkflowsRequest) (*GetRunningWorkflowsResponse, error)
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkflowServiceServer struct{}

func (UnimplementedWorkflowServiceServer) StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) RetryWorkflow(context.Context, *RetryWorkflowRequest) (*RetryWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) StartDrugTestOrderWorkflow(context.Context, *StartDrugTestOrderWorkflowRequest) (*StartDrugTestOrderWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDrugTestOrderWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) StartMVRMonitoringWorkflow(context.Context, *StartMVRMonitoringWorkflowRequest) (*StartMVRMonitoringWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMVRMonitoringWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) StartRandomSelectionWorkflow(context.Context, *StartRandomSelectionWorkflowRequest) (*StartRandomSelectionWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRandomSelectionWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) StartBackgroundCheckWorkflow(context.Context, *StartBackgroundCheckWorkflowRequest) (*StartBackgroundCheckWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBackgroundCheckWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) StartNotificationWorkflow(context.Context, *StartNotificationWorkflowRequest) (*StartNotificationWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNotificationWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowAnalytics(context.Context, *GetWorkflowAnalyticsRequest) (*GetWorkflowAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowAnalytics not implemented")
}
func (UnimplementedWorkflowServiceServer) GetFailedWorkflows(context.Context, *GetFailedWorkflowsRequest) (*GetFailedWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailedWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) GetRunningWorkflows(context.Context, *GetRunningWorkflowsRequest) (*GetRunningWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}
func (UnimplementedWorkflowServiceServer) testEmbeddedByValue()                         {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkflowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_StartWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartWorkflow(ctx, req.(*StartWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_UpdateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CancelWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CancelWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CancelWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CancelWorkflow(ctx, req.(*CancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RetryWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RetryWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_RetryWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RetryWorkflow(ctx, req.(*RetryWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_StartDrugTestOrderWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDrugTestOrderWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartDrugTestOrderWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartDrugTestOrderWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartDrugTestOrderWorkflow(ctx, req.(*StartDrugTestOrderWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_StartMVRMonitoringWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMVRMonitoringWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartMVRMonitoringWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartMVRMonitoringWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartMVRMonitoringWorkflow(ctx, req.(*StartMVRMonitoringWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_StartRandomSelectionWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRandomSelectionWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartRandomSelectionWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartRandomSelectionWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartRandomSelectionWorkflow(ctx, req.(*StartRandomSelectionWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_StartBackgroundCheckWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBackgroundCheckWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartBackgroundCheckWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartBackgroundCheckWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartBackgroundCheckWorkflow(ctx, req.(*StartBackgroundCheckWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_StartNotificationWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNotificationWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartNotificationWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartNotificationWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartNotificationWorkflow(ctx, req.(*StartNotificationWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowAnalytics(ctx, req.(*GetWorkflowAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetFailedWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFailedWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetFailedWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetFailedWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetFailedWorkflows(ctx, req.(*GetFailedWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetRunningWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetRunningWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetRunningWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetRunningWorkflows(ctx, req.(*GetRunningWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWorkflow",
			Handler:    _WorkflowService_StartWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _WorkflowService_ListWorkflows_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _WorkflowService_UpdateWorkflow_Handler,
		},
		{
			MethodName: "CancelWorkflow",
			Handler:    _WorkflowService_CancelWorkflow_Handler,
		},
		{
			MethodName: "RetryWorkflow",
			Handler:    _WorkflowService_RetryWorkflow_Handler,
		},
		{
			MethodName: "StartDrugTestOrderWorkflow",
			Handler:    _WorkflowService_StartDrugTestOrderWorkflow_Handler,
		},
		{
			MethodName: "StartMVRMonitoringWorkflow",
			Handler:    _WorkflowService_StartMVRMonitoringWorkflow_Handler,
		},
		{
			MethodName: "StartRandomSelectionWorkflow",
			Handler:    _WorkflowService_StartRandomSelectionWorkflow_Handler,
		},
		{
			MethodName: "StartBackgroundCheckWorkflow",
			Handler:    _WorkflowService_StartBackgroundCheckWorkflow_Handler,
		},
		{
			MethodName: "StartNotificationWorkflow",
			Handler:    _WorkflowService_StartNotificationWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowAnalytics",
			Handler:    _WorkflowService_GetWorkflowAnalytics_Handler,
		},
		{
			MethodName: "GetFailedWorkflows",
			Handler:    _WorkflowService_GetFailedWorkflows_Handler,
		},
		{
			MethodName: "GetRunningWorkflows",
			Handler:    _WorkflowService_GetRunningWorkflows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/workflow.proto",
}
