// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: services/v1/mvr.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	pbentity "v1consortium/api/pbentity"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MVR Management Messages
type OrderMVRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LicenseNumber  string `protobuf:"bytes,3,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	LicenseState   string `protobuf:"bytes,4,opt,name=license_state,json=licenseState,proto3" json:"license_state,omitempty"`
	OrderedBy      string `protobuf:"bytes,5,opt,name=ordered_by,json=orderedBy,proto3" json:"ordered_by,omitempty"`
	ReportType     string `protobuf:"bytes,6,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty" dc:"'initial', 'annual', 'continuous_monitoring'"` // "initial", "annual", "continuous_monitoring"
	Provider       string `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty" dc:"'mvr_com', 'hireright', 'sterling'"`                                 // "mvr_com", "hireright", "sterling"
}

func (x *OrderMVRRequest) Reset() {
	*x = OrderMVRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMVRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMVRRequest) ProtoMessage() {}

func (x *OrderMVRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMVRRequest.ProtoReflect.Descriptor instead.
func (*OrderMVRRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{0}
}

func (x *OrderMVRRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *OrderMVRRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OrderMVRRequest) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *OrderMVRRequest) GetLicenseState() string {
	if x != nil {
		return x.LicenseState
	}
	return ""
}

func (x *OrderMVRRequest) GetOrderedBy() string {
	if x != nil {
		return x.OrderedBy
	}
	return ""
}

func (x *OrderMVRRequest) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *OrderMVRRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type OrderMVRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report              *pbentity.MvrReports   `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	ExternalOrderId     string                 `protobuf:"bytes,2,opt,name=external_order_id,json=externalOrderId,proto3" json:"external_order_id,omitempty"`
	ConfirmationCode    string                 `protobuf:"bytes,3,opt,name=confirmation_code,json=confirmationCode,proto3" json:"confirmation_code,omitempty"`
	EstimatedCompletion *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=estimated_completion,json=estimatedCompletion,proto3" json:"estimated_completion,omitempty"`
}

func (x *OrderMVRResponse) Reset() {
	*x = OrderMVRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMVRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMVRResponse) ProtoMessage() {}

func (x *OrderMVRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMVRResponse.ProtoReflect.Descriptor instead.
func (*OrderMVRResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{1}
}

func (x *OrderMVRResponse) GetReport() *pbentity.MvrReports {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *OrderMVRResponse) GetExternalOrderId() string {
	if x != nil {
		return x.ExternalOrderId
	}
	return ""
}

func (x *OrderMVRResponse) GetConfirmationCode() string {
	if x != nil {
		return x.ConfirmationCode
	}
	return ""
}

func (x *OrderMVRResponse) GetEstimatedCompletion() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedCompletion
	}
	return nil
}

type GetMVRReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *GetMVRReportRequest) Reset() {
	*x = GetMVRReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMVRReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMVRReportRequest) ProtoMessage() {}

func (x *GetMVRReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMVRReportRequest.ProtoReflect.Descriptor instead.
func (*GetMVRReportRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{2}
}

func (x *GetMVRReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type GetMVRReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report     *pbentity.MvrReports      `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Violations []*pbentity.MvrViolations `protobuf:"bytes,2,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (x *GetMVRReportResponse) Reset() {
	*x = GetMVRReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMVRReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMVRReportResponse) ProtoMessage() {}

func (x *GetMVRReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMVRReportResponse.ProtoReflect.Descriptor instead.
func (*GetMVRReportResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{3}
}

func (x *GetMVRReportResponse) GetReport() *pbentity.MvrReports {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *GetMVRReportResponse) GetViolations() []*pbentity.MvrViolations {
	if x != nil {
		return x.Violations
	}
	return nil
}

type UpdateMVRReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId          string                 `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Status            string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" dc:"'ordered', 'processing', 'completed', 'failed'"` // "ordered", "processing", "completed", "failed"
	ReportDate        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=report_date,json=reportDate,proto3" json:"report_date,omitempty"`
	LicenseStatus     string                 `protobuf:"bytes,4,opt,name=license_status,json=licenseStatus,proto3" json:"license_status,omitempty" dc:"'valid', 'suspended', 'revoked', 'expired'"` // "valid", "suspended", "revoked", "expired"
	CdlStatus         string                 `protobuf:"bytes,5,opt,name=cdl_status,json=cdlStatus,proto3" json:"cdl_status,omitempty" dc:"'valid', 'disqualified', 'not_applicable'"`              // "valid", "disqualified", "not_applicable"
	RawData           string                 `protobuf:"bytes,6,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty" dc:"JSON string from provider"`                                    // JSON string from provider
	ProviderReference string                 `protobuf:"bytes,7,opt,name=provider_reference,json=providerReference,proto3" json:"provider_reference,omitempty"`
}

func (x *UpdateMVRReportRequest) Reset() {
	*x = UpdateMVRReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMVRReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMVRReportRequest) ProtoMessage() {}

func (x *UpdateMVRReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMVRReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateMVRReportRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateMVRReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *UpdateMVRReportRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateMVRReportRequest) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *UpdateMVRReportRequest) GetLicenseStatus() string {
	if x != nil {
		return x.LicenseStatus
	}
	return ""
}

func (x *UpdateMVRReportRequest) GetCdlStatus() string {
	if x != nil {
		return x.CdlStatus
	}
	return ""
}

func (x *UpdateMVRReportRequest) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *UpdateMVRReportRequest) GetProviderReference() string {
	if x != nil {
		return x.ProviderReference
	}
	return ""
}

type UpdateMVRReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report *pbentity.MvrReports `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *UpdateMVRReportResponse) Reset() {
	*x = UpdateMVRReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMVRReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMVRReportResponse) ProtoMessage() {}

func (x *UpdateMVRReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMVRReportResponse.ProtoReflect.Descriptor instead.
func (*UpdateMVRReportResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateMVRReportResponse) GetReport() *pbentity.MvrReports {
	if x != nil {
		return x.Report
	}
	return nil
}

type ListMVRReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" Optional:"filter by user"` // Optional: filter by user
	Status         string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" Optional:"filter by status"`             // Optional: filter by status
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Page           int32                  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListMVRReportsRequest) Reset() {
	*x = ListMVRReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMVRReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMVRReportsRequest) ProtoMessage() {}

func (x *ListMVRReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMVRReportsRequest.ProtoReflect.Descriptor instead.
func (*ListMVRReportsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{6}
}

func (x *ListMVRReportsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListMVRReportsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListMVRReportsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListMVRReportsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListMVRReportsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListMVRReportsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMVRReportsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMVRReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports    []*pbentity.MvrReports `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	TotalCount int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page       int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListMVRReportsResponse) Reset() {
	*x = ListMVRReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMVRReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMVRReportsResponse) ProtoMessage() {}

func (x *ListMVRReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMVRReportsResponse.ProtoReflect.Descriptor instead.
func (*ListMVRReportsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{7}
}

func (x *ListMVRReportsResponse) GetReports() []*pbentity.MvrReports {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ListMVRReportsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListMVRReportsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMVRReportsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// MVR Violation Management
type AddMVRViolationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MvrReportId    string                 `protobuf:"bytes,1,opt,name=mvr_report_id,json=mvrReportId,proto3" json:"mvr_report_id,omitempty"`
	ViolationType  string                 `protobuf:"bytes,2,opt,name=violation_type,json=violationType,proto3" json:"violation_type,omitempty" dc:"'speeding', 'dui', 'reckless_driving', etc."` // "speeding", "dui", "reckless_driving", etc.
	ViolationDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=violation_date,json=violationDate,proto3" json:"violation_date,omitempty"`
	Jurisdiction   string                 `protobuf:"bytes,4,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty" dc:"State/county where violation occurred"` // State/county where violation occurred
	Description    string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Severity       string                 `protobuf:"bytes,6,opt,name=severity,proto3" json:"severity,omitempty" dc:"'minor', 'major', 'serious'"` // "minor", "major", "serious"
	FineAmount     string                 `protobuf:"bytes,7,opt,name=fine_amount,json=fineAmount,proto3" json:"fine_amount,omitempty"`
	CaseNumber     string                 `protobuf:"bytes,8,opt,name=case_number,json=caseNumber,proto3" json:"case_number,omitempty"`
	AffectsCdl     bool                   `protobuf:"varint,9,opt,name=affects_cdl,json=affectsCdl,proto3" json:"affects_cdl,omitempty"`
	RequiresAction bool                   `protobuf:"varint,10,opt,name=requires_action,json=requiresAction,proto3" json:"requires_action,omitempty"`
}

func (x *AddMVRViolationRequest) Reset() {
	*x = AddMVRViolationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMVRViolationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMVRViolationRequest) ProtoMessage() {}

func (x *AddMVRViolationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMVRViolationRequest.ProtoReflect.Descriptor instead.
func (*AddMVRViolationRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{8}
}

func (x *AddMVRViolationRequest) GetMvrReportId() string {
	if x != nil {
		return x.MvrReportId
	}
	return ""
}

func (x *AddMVRViolationRequest) GetViolationType() string {
	if x != nil {
		return x.ViolationType
	}
	return ""
}

func (x *AddMVRViolationRequest) GetViolationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ViolationDate
	}
	return nil
}

func (x *AddMVRViolationRequest) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *AddMVRViolationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddMVRViolationRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *AddMVRViolationRequest) GetFineAmount() string {
	if x != nil {
		return x.FineAmount
	}
	return ""
}

func (x *AddMVRViolationRequest) GetCaseNumber() string {
	if x != nil {
		return x.CaseNumber
	}
	return ""
}

func (x *AddMVRViolationRequest) GetAffectsCdl() bool {
	if x != nil {
		return x.AffectsCdl
	}
	return false
}

func (x *AddMVRViolationRequest) GetRequiresAction() bool {
	if x != nil {
		return x.RequiresAction
	}
	return false
}

type AddMVRViolationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Violation *pbentity.MvrViolations `protobuf:"bytes,1,opt,name=violation,proto3" json:"violation,omitempty"`
}

func (x *AddMVRViolationResponse) Reset() {
	*x = AddMVRViolationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMVRViolationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMVRViolationResponse) ProtoMessage() {}

func (x *AddMVRViolationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMVRViolationResponse.ProtoReflect.Descriptor instead.
func (*AddMVRViolationResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{9}
}

func (x *AddMVRViolationResponse) GetViolation() *pbentity.MvrViolations {
	if x != nil {
		return x.Violation
	}
	return nil
}

type UpdateMVRViolationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViolationId    string                 `protobuf:"bytes,1,opt,name=violation_id,json=violationId,proto3" json:"violation_id,omitempty"`
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" dc:"'active', 'resolved', 'dismissed'"` // "active", "resolved", "dismissed"
	ActionTaken    string                 `protobuf:"bytes,3,opt,name=action_taken,json=actionTaken,proto3" json:"action_taken,omitempty"`
	ResolutionDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	Notes          string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *UpdateMVRViolationRequest) Reset() {
	*x = UpdateMVRViolationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMVRViolationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMVRViolationRequest) ProtoMessage() {}

func (x *UpdateMVRViolationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMVRViolationRequest.ProtoReflect.Descriptor instead.
func (*UpdateMVRViolationRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateMVRViolationRequest) GetViolationId() string {
	if x != nil {
		return x.ViolationId
	}
	return ""
}

func (x *UpdateMVRViolationRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateMVRViolationRequest) GetActionTaken() string {
	if x != nil {
		return x.ActionTaken
	}
	return ""
}

func (x *UpdateMVRViolationRequest) GetResolutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *UpdateMVRViolationRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type UpdateMVRViolationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Violation *pbentity.MvrViolations `protobuf:"bytes,1,opt,name=violation,proto3" json:"violation,omitempty"`
}

func (x *UpdateMVRViolationResponse) Reset() {
	*x = UpdateMVRViolationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMVRViolationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMVRViolationResponse) ProtoMessage() {}

func (x *UpdateMVRViolationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMVRViolationResponse.ProtoReflect.Descriptor instead.
func (*UpdateMVRViolationResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMVRViolationResponse) GetViolation() *pbentity.MvrViolations {
	if x != nil {
		return x.Violation
	}
	return nil
}

type ListMVRViolationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" Optional:"filter by user"`                               // Optional: filter by user
	MvrReportId    string                 `protobuf:"bytes,3,opt,name=mvr_report_id,json=mvrReportId,proto3" json:"mvr_report_id,omitempty" Optional:"filter by specific report"`   // Optional: filter by specific report
	Severity       string                 `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty" Optional:"filter by severity"`                                     // Optional: filter by severity
	AffectsCdl     bool                   `protobuf:"varint,5,opt,name=affects_cdl,json=affectsCdl,proto3" json:"affects_cdl,omitempty" Optional:"filter CDL-affecting violations"` // Optional: filter CDL-affecting violations
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Page           int32                  `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListMVRViolationsRequest) Reset() {
	*x = ListMVRViolationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMVRViolationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMVRViolationsRequest) ProtoMessage() {}

func (x *ListMVRViolationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMVRViolationsRequest.ProtoReflect.Descriptor instead.
func (*ListMVRViolationsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{12}
}

func (x *ListMVRViolationsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListMVRViolationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListMVRViolationsRequest) GetMvrReportId() string {
	if x != nil {
		return x.MvrReportId
	}
	return ""
}

func (x *ListMVRViolationsRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ListMVRViolationsRequest) GetAffectsCdl() bool {
	if x != nil {
		return x.AffectsCdl
	}
	return false
}

func (x *ListMVRViolationsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListMVRViolationsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListMVRViolationsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMVRViolationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMVRViolationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Violations []*pbentity.MvrViolations `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	TotalCount int32                     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page       int32                     `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32                     `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListMVRViolationsResponse) Reset() {
	*x = ListMVRViolationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMVRViolationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMVRViolationsResponse) ProtoMessage() {}

func (x *ListMVRViolationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMVRViolationsResponse.ProtoReflect.Descriptor instead.
func (*ListMVRViolationsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{13}
}

func (x *ListMVRViolationsResponse) GetViolations() []*pbentity.MvrViolations {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *ListMVRViolationsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListMVRViolationsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMVRViolationsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Continuous Monitoring Messages
type EnableContinuousMonitoringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId      string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	MonitoringFrequency string `protobuf:"bytes,3,opt,name=monitoring_frequency,json=monitoringFrequency,proto3" json:"monitoring_frequency,omitempty" dc:"'monthly', 'quarterly', 'annual'"` // "monthly", "quarterly", "annual"
	Enabled             bool   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *EnableContinuousMonitoringRequest) Reset() {
	*x = EnableContinuousMonitoringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableContinuousMonitoringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableContinuousMonitoringRequest) ProtoMessage() {}

func (x *EnableContinuousMonitoringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableContinuousMonitoringRequest.ProtoReflect.Descriptor instead.
func (*EnableContinuousMonitoringRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{14}
}

func (x *EnableContinuousMonitoringRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EnableContinuousMonitoringRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *EnableContinuousMonitoringRequest) GetMonitoringFrequency() string {
	if x != nil {
		return x.MonitoringFrequency
	}
	return ""
}

func (x *EnableContinuousMonitoringRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type EnableContinuousMonitoringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EnableContinuousMonitoringResponse) Reset() {
	*x = EnableContinuousMonitoringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableContinuousMonitoringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableContinuousMonitoringResponse) ProtoMessage() {}

func (x *EnableContinuousMonitoringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableContinuousMonitoringResponse.ProtoReflect.Descriptor instead.
func (*EnableContinuousMonitoringResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{15}
}

func (x *EnableContinuousMonitoringResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMonitoringStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetMonitoringStatusRequest) Reset() {
	*x = GetMonitoringStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitoringStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitoringStatusRequest) ProtoMessage() {}

func (x *GetMonitoringStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitoringStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMonitoringStatusRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{16}
}

func (x *GetMonitoringStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetMonitoringStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMonitoringEnabled bool                   `protobuf:"varint,1,opt,name=is_monitoring_enabled,json=isMonitoringEnabled,proto3" json:"is_monitoring_enabled,omitempty"`
	MonitoringFrequency string                 `protobuf:"bytes,2,opt,name=monitoring_frequency,json=monitoringFrequency,proto3" json:"monitoring_frequency,omitempty"`
	LastCheckDate       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_check_date,json=lastCheckDate,proto3" json:"last_check_date,omitempty"`
	NextCheckDate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=next_check_date,json=nextCheckDate,proto3" json:"next_check_date,omitempty"`
	TotalViolations     int32                  `protobuf:"varint,5,opt,name=total_violations,json=totalViolations,proto3" json:"total_violations,omitempty"`
	ActiveViolations    int32                  `protobuf:"varint,6,opt,name=active_violations,json=activeViolations,proto3" json:"active_violations,omitempty"`
}

func (x *GetMonitoringStatusResponse) Reset() {
	*x = GetMonitoringStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitoringStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitoringStatusResponse) ProtoMessage() {}

func (x *GetMonitoringStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitoringStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMonitoringStatusResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{17}
}

func (x *GetMonitoringStatusResponse) GetIsMonitoringEnabled() bool {
	if x != nil {
		return x.IsMonitoringEnabled
	}
	return false
}

func (x *GetMonitoringStatusResponse) GetMonitoringFrequency() string {
	if x != nil {
		return x.MonitoringFrequency
	}
	return ""
}

func (x *GetMonitoringStatusResponse) GetLastCheckDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCheckDate
	}
	return nil
}

func (x *GetMonitoringStatusResponse) GetNextCheckDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NextCheckDate
	}
	return nil
}

func (x *GetMonitoringStatusResponse) GetTotalViolations() int32 {
	if x != nil {
		return x.TotalViolations
	}
	return 0
}

func (x *GetMonitoringStatusResponse) GetActiveViolations() int32 {
	if x != nil {
		return x.ActiveViolations
	}
	return 0
}

// MVR Analytics Messages
type GetMVRAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *GetMVRAnalyticsRequest) Reset() {
	*x = GetMVRAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMVRAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMVRAnalyticsRequest) ProtoMessage() {}

func (x *GetMVRAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMVRAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetMVRAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{18}
}

func (x *GetMVRAnalyticsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetMVRAnalyticsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetMVRAnalyticsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type ViolationSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViolationType string `protobuf:"bytes,1,opt,name=violation_type,json=violationType,proto3" json:"violation_type,omitempty"`
	Count         int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Severity      string `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"`
}

func (x *ViolationSummary) Reset() {
	*x = ViolationSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViolationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViolationSummary) ProtoMessage() {}

func (x *ViolationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViolationSummary.ProtoReflect.Descriptor instead.
func (*ViolationSummary) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{19}
}

func (x *ViolationSummary) GetViolationType() string {
	if x != nil {
		return x.ViolationType
	}
	return ""
}

func (x *ViolationSummary) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ViolationSummary) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

type GetMVRAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalReports               int32               `protobuf:"varint,1,opt,name=total_reports,json=totalReports,proto3" json:"total_reports,omitempty"`
	ActiveViolations           int32               `protobuf:"varint,2,opt,name=active_violations,json=activeViolations,proto3" json:"active_violations,omitempty"`
	DriversWithViolations      int32               `protobuf:"varint,3,opt,name=drivers_with_violations,json=driversWithViolations,proto3" json:"drivers_with_violations,omitempty"`
	ViolationSummary           []*ViolationSummary `protobuf:"bytes,4,rep,name=violation_summary,json=violationSummary,proto3" json:"violation_summary,omitempty"`
	CdlDisqualifications       int32               `protobuf:"varint,5,opt,name=cdl_disqualifications,json=cdlDisqualifications,proto3" json:"cdl_disqualifications,omitempty"`
	AverageViolationsPerDriver float32             `protobuf:"fixed32,6,opt,name=average_violations_per_driver,json=averageViolationsPerDriver,proto3" json:"average_violations_per_driver,omitempty"`
}

func (x *GetMVRAnalyticsResponse) Reset() {
	*x = GetMVRAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMVRAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMVRAnalyticsResponse) ProtoMessage() {}

func (x *GetMVRAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMVRAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetMVRAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{20}
}

func (x *GetMVRAnalyticsResponse) GetTotalReports() int32 {
	if x != nil {
		return x.TotalReports
	}
	return 0
}

func (x *GetMVRAnalyticsResponse) GetActiveViolations() int32 {
	if x != nil {
		return x.ActiveViolations
	}
	return 0
}

func (x *GetMVRAnalyticsResponse) GetDriversWithViolations() int32 {
	if x != nil {
		return x.DriversWithViolations
	}
	return 0
}

func (x *GetMVRAnalyticsResponse) GetViolationSummary() []*ViolationSummary {
	if x != nil {
		return x.ViolationSummary
	}
	return nil
}

func (x *GetMVRAnalyticsResponse) GetCdlDisqualifications() int32 {
	if x != nil {
		return x.CdlDisqualifications
	}
	return 0
}

func (x *GetMVRAnalyticsResponse) GetAverageViolationsPerDriver() float32 {
	if x != nil {
		return x.AverageViolationsPerDriver
	}
	return 0
}

// Provider Integration Messages
type SyncProviderDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty" dc:"'mvr_com', 'hireright', 'sterling'"` // "mvr_com", "hireright", "sterling"
	LastSync *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_sync,json=lastSync,proto3" json:"last_sync,omitempty"`
}

func (x *SyncProviderDataRequest) Reset() {
	*x = SyncProviderDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProviderDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProviderDataRequest) ProtoMessage() {}

func (x *SyncProviderDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProviderDataRequest.ProtoReflect.Descriptor instead.
func (*SyncProviderDataRequest) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{21}
}

func (x *SyncProviderDataRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *SyncProviderDataRequest) GetLastSync() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSync
	}
	return nil
}

type SyncProviderDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportsSynced   int32                  `protobuf:"varint,1,opt,name=reports_synced,json=reportsSynced,proto3" json:"reports_synced,omitempty"`
	ViolationsAdded int32                  `protobuf:"varint,2,opt,name=violations_added,json=violationsAdded,proto3" json:"violations_added,omitempty"`
	SyncCompletedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=sync_completed_at,json=syncCompletedAt,proto3" json:"sync_completed_at,omitempty"`
	Errors          []string               `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SyncProviderDataResponse) Reset() {
	*x = SyncProviderDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_v1_mvr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProviderDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProviderDataResponse) ProtoMessage() {}

func (x *SyncProviderDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_v1_mvr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProviderDataResponse.ProtoReflect.Descriptor instead.
func (*SyncProviderDataResponse) Descriptor() ([]byte, []int) {
	return file_services_v1_mvr_proto_rawDescGZIP(), []int{22}
}

func (x *SyncProviderDataResponse) GetReportsSynced() int32 {
	if x != nil {
		return x.ReportsSynced
	}
	return 0
}

func (x *SyncProviderDataResponse) GetViolationsAdded() int32 {
	if x != nil {
		return x.ViolationsAdded
	}
	return 0
}

func (x *SyncProviderDataResponse) GetSyncCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncCompletedAt
	}
	return nil
}

func (x *SyncProviderDataResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_services_v1_mvr_proto protoreflect.FileDescriptor

var file_services_v1_mvr_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x76,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x6d, 0x76, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x62, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x6d, 0x76, 0x72, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x56, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x76, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x76, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x76, 0x72, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x64, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x64,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x47, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x56, 0x52, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x76, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x76, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x94,
	0x03, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x76, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x76, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x64, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x43, 0x64, 0x6c, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4d, 0x56, 0x52, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4d,
	0x76, 0x72, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x53,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x76, 0x72, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x76, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x76, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x64,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x43, 0x64, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x4d, 0x76, 0x72, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xb2, 0x01, 0x0a, 0x21, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x22, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6b, 0x0a, 0x10, 0x56, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xf1, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x10, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x64, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x63, 0x64, 0x6c, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x17, 0x53, 0x79, 0x6e,
	0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x53, 0x79,
	0x6e, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0xf9, 0x0e, 0x0a, 0x0a, 0x4d, 0x56, 0x52,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x56, 0x52, 0x12, 0x26, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76,
	0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a,
	0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x56,
	0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x2e, 0x76,
	0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x56, 0x52, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x76, 0x72, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x76, 0x31, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12,
	0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4d, 0x56, 0x52, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a,
	0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x76, 0x72, 0x2d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x6d, 0x76, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x56, 0x52,
	0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xb6, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x56, 0x52, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x1a, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0xb3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x2e, 0x76, 0x31, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x31,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x56,
	0x52, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x2e, 0x76, 0x31, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x31, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6e,
	0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e,
	0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x76, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2d,
	0x73, 0x79, 0x6e, 0x63, 0x42, 0x1e, 0x5a, 0x1c, 0x76, 0x31, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_v1_mvr_proto_rawDescOnce sync.Once
	file_services_v1_mvr_proto_rawDescData = file_services_v1_mvr_proto_rawDesc
)

func file_services_v1_mvr_proto_rawDescGZIP() []byte {
	file_services_v1_mvr_proto_rawDescOnce.Do(func() {
		file_services_v1_mvr_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_v1_mvr_proto_rawDescData)
	})
	return file_services_v1_mvr_proto_rawDescData
}

var file_services_v1_mvr_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_services_v1_mvr_proto_goTypes = []interface{}{
	(*OrderMVRRequest)(nil),                    // 0: v1consortium.services.OrderMVRRequest
	(*OrderMVRResponse)(nil),                   // 1: v1consortium.services.OrderMVRResponse
	(*GetMVRReportRequest)(nil),                // 2: v1consortium.services.GetMVRReportRequest
	(*GetMVRReportResponse)(nil),               // 3: v1consortium.services.GetMVRReportResponse
	(*UpdateMVRReportRequest)(nil),             // 4: v1consortium.services.UpdateMVRReportRequest
	(*UpdateMVRReportResponse)(nil),            // 5: v1consortium.services.UpdateMVRReportResponse
	(*ListMVRReportsRequest)(nil),              // 6: v1consortium.services.ListMVRReportsRequest
	(*ListMVRReportsResponse)(nil),             // 7: v1consortium.services.ListMVRReportsResponse
	(*AddMVRViolationRequest)(nil),             // 8: v1consortium.services.AddMVRViolationRequest
	(*AddMVRViolationResponse)(nil),            // 9: v1consortium.services.AddMVRViolationResponse
	(*UpdateMVRViolationRequest)(nil),          // 10: v1consortium.services.UpdateMVRViolationRequest
	(*UpdateMVRViolationResponse)(nil),         // 11: v1consortium.services.UpdateMVRViolationResponse
	(*ListMVRViolationsRequest)(nil),           // 12: v1consortium.services.ListMVRViolationsRequest
	(*ListMVRViolationsResponse)(nil),          // 13: v1consortium.services.ListMVRViolationsResponse
	(*EnableContinuousMonitoringRequest)(nil),  // 14: v1consortium.services.EnableContinuousMonitoringRequest
	(*EnableContinuousMonitoringResponse)(nil), // 15: v1consortium.services.EnableContinuousMonitoringResponse
	(*GetMonitoringStatusRequest)(nil),         // 16: v1consortium.services.GetMonitoringStatusRequest
	(*GetMonitoringStatusResponse)(nil),        // 17: v1consortium.services.GetMonitoringStatusResponse
	(*GetMVRAnalyticsRequest)(nil),             // 18: v1consortium.services.GetMVRAnalyticsRequest
	(*ViolationSummary)(nil),                   // 19: v1consortium.services.ViolationSummary
	(*GetMVRAnalyticsResponse)(nil),            // 20: v1consortium.services.GetMVRAnalyticsResponse
	(*SyncProviderDataRequest)(nil),            // 21: v1consortium.services.SyncProviderDataRequest
	(*SyncProviderDataResponse)(nil),           // 22: v1consortium.services.SyncProviderDataResponse
	(*pbentity.MvrReports)(nil),                // 23: pbentity.MvrReports
	(*timestamppb.Timestamp)(nil),              // 24: google.protobuf.Timestamp
	(*pbentity.MvrViolations)(nil),             // 25: pbentity.MvrViolations
}
var file_services_v1_mvr_proto_depIdxs = []int32{
	23, // 0: v1consortium.services.OrderMVRResponse.report:type_name -> pbentity.MvrReports
	24, // 1: v1consortium.services.OrderMVRResponse.estimated_completion:type_name -> google.protobuf.Timestamp
	23, // 2: v1consortium.services.GetMVRReportResponse.report:type_name -> pbentity.MvrReports
	25, // 3: v1consortium.services.GetMVRReportResponse.violations:type_name -> pbentity.MvrViolations
	24, // 4: v1consortium.services.UpdateMVRReportRequest.report_date:type_name -> google.protobuf.Timestamp
	23, // 5: v1consortium.services.UpdateMVRReportResponse.report:type_name -> pbentity.MvrReports
	24, // 6: v1consortium.services.ListMVRReportsRequest.start_date:type_name -> google.protobuf.Timestamp
	24, // 7: v1consortium.services.ListMVRReportsRequest.end_date:type_name -> google.protobuf.Timestamp
	23, // 8: v1consortium.services.ListMVRReportsResponse.reports:type_name -> pbentity.MvrReports
	24, // 9: v1consortium.services.AddMVRViolationRequest.violation_date:type_name -> google.protobuf.Timestamp
	25, // 10: v1consortium.services.AddMVRViolationResponse.violation:type_name -> pbentity.MvrViolations
	24, // 11: v1consortium.services.UpdateMVRViolationRequest.resolution_date:type_name -> google.protobuf.Timestamp
	25, // 12: v1consortium.services.UpdateMVRViolationResponse.violation:type_name -> pbentity.MvrViolations
	24, // 13: v1consortium.services.ListMVRViolationsRequest.start_date:type_name -> google.protobuf.Timestamp
	24, // 14: v1consortium.services.ListMVRViolationsRequest.end_date:type_name -> google.protobuf.Timestamp
	25, // 15: v1consortium.services.ListMVRViolationsResponse.violations:type_name -> pbentity.MvrViolations
	24, // 16: v1consortium.services.GetMonitoringStatusResponse.last_check_date:type_name -> google.protobuf.Timestamp
	24, // 17: v1consortium.services.GetMonitoringStatusResponse.next_check_date:type_name -> google.protobuf.Timestamp
	24, // 18: v1consortium.services.GetMVRAnalyticsRequest.start_date:type_name -> google.protobuf.Timestamp
	24, // 19: v1consortium.services.GetMVRAnalyticsRequest.end_date:type_name -> google.protobuf.Timestamp
	19, // 20: v1consortium.services.GetMVRAnalyticsResponse.violation_summary:type_name -> v1consortium.services.ViolationSummary
	24, // 21: v1consortium.services.SyncProviderDataRequest.last_sync:type_name -> google.protobuf.Timestamp
	24, // 22: v1consortium.services.SyncProviderDataResponse.sync_completed_at:type_name -> google.protobuf.Timestamp
	0,  // 23: v1consortium.services.MVRService.OrderMVR:input_type -> v1consortium.services.OrderMVRRequest
	2,  // 24: v1consortium.services.MVRService.GetMVRReport:input_type -> v1consortium.services.GetMVRReportRequest
	4,  // 25: v1consortium.services.MVRService.UpdateMVRReport:input_type -> v1consortium.services.UpdateMVRReportRequest
	6,  // 26: v1consortium.services.MVRService.ListMVRReports:input_type -> v1consortium.services.ListMVRReportsRequest
	8,  // 27: v1consortium.services.MVRService.AddMVRViolation:input_type -> v1consortium.services.AddMVRViolationRequest
	10, // 28: v1consortium.services.MVRService.UpdateMVRViolation:input_type -> v1consortium.services.UpdateMVRViolationRequest
	12, // 29: v1consortium.services.MVRService.ListMVRViolations:input_type -> v1consortium.services.ListMVRViolationsRequest
	14, // 30: v1consortium.services.MVRService.EnableContinuousMonitoring:input_type -> v1consortium.services.EnableContinuousMonitoringRequest
	16, // 31: v1consortium.services.MVRService.GetMonitoringStatus:input_type -> v1consortium.services.GetMonitoringStatusRequest
	18, // 32: v1consortium.services.MVRService.GetMVRAnalytics:input_type -> v1consortium.services.GetMVRAnalyticsRequest
	21, // 33: v1consortium.services.MVRService.SyncProviderData:input_type -> v1consortium.services.SyncProviderDataRequest
	1,  // 34: v1consortium.services.MVRService.OrderMVR:output_type -> v1consortium.services.OrderMVRResponse
	3,  // 35: v1consortium.services.MVRService.GetMVRReport:output_type -> v1consortium.services.GetMVRReportResponse
	5,  // 36: v1consortium.services.MVRService.UpdateMVRReport:output_type -> v1consortium.services.UpdateMVRReportResponse
	7,  // 37: v1consortium.services.MVRService.ListMVRReports:output_type -> v1consortium.services.ListMVRReportsResponse
	9,  // 38: v1consortium.services.MVRService.AddMVRViolation:output_type -> v1consortium.services.AddMVRViolationResponse
	11, // 39: v1consortium.services.MVRService.UpdateMVRViolation:output_type -> v1consortium.services.UpdateMVRViolationResponse
	13, // 40: v1consortium.services.MVRService.ListMVRViolations:output_type -> v1consortium.services.ListMVRViolationsResponse
	15, // 41: v1consortium.services.MVRService.EnableContinuousMonitoring:output_type -> v1consortium.services.EnableContinuousMonitoringResponse
	17, // 42: v1consortium.services.MVRService.GetMonitoringStatus:output_type -> v1consortium.services.GetMonitoringStatusResponse
	20, // 43: v1consortium.services.MVRService.GetMVRAnalytics:output_type -> v1consortium.services.GetMVRAnalyticsResponse
	22, // 44: v1consortium.services.MVRService.SyncProviderData:output_type -> v1consortium.services.SyncProviderDataResponse
	34, // [34:45] is the sub-list for method output_type
	23, // [23:34] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_services_v1_mvr_proto_init() }
func file_services_v1_mvr_proto_init() {
	if File_services_v1_mvr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_v1_mvr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMVRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMVRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMVRReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMVRReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMVRReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMVRReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMVRReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMVRReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMVRViolationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMVRViolationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMVRViolationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMVRViolationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMVRViolationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMVRViolationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableContinuousMonitoringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableContinuousMonitoringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonitoringStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonitoringStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMVRAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViolationSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMVRAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProviderDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_v1_mvr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProviderDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_v1_mvr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_v1_mvr_proto_goTypes,
		DependencyIndexes: file_services_v1_mvr_proto_depIdxs,
		MessageInfos:      file_services_v1_mvr_proto_msgTypes,
	}.Build()
	File_services_v1_mvr_proto = out.File
	file_services_v1_mvr_proto_rawDesc = nil
	file_services_v1_mvr_proto_goTypes = nil
	file_services_v1_mvr_proto_depIdxs = nil
}
