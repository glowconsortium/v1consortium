// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/document.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentService_UploadDocument_FullMethodName             = "/v1consortium.services.DocumentService/UploadDocument"
	DocumentService_GetDocument_FullMethodName                = "/v1consortium.services.DocumentService/GetDocument"
	DocumentService_ListDocuments_FullMethodName              = "/v1consortium.services.DocumentService/ListDocuments"
	DocumentService_UpdateDocument_FullMethodName             = "/v1consortium.services.DocumentService/UpdateDocument"
	DocumentService_DeleteDocument_FullMethodName             = "/v1consortium.services.DocumentService/DeleteDocument"
	DocumentService_GetDocumentVersions_FullMethodName        = "/v1consortium.services.DocumentService/GetDocumentVersions"
	DocumentService_ShareDocument_FullMethodName              = "/v1consortium.services.DocumentService/ShareDocument"
	DocumentService_GetSharedDocuments_FullMethodName         = "/v1consortium.services.DocumentService/GetSharedDocuments"
	DocumentService_RevokeDocumentShare_FullMethodName        = "/v1consortium.services.DocumentService/RevokeDocumentShare"
	DocumentService_SearchDocuments_FullMethodName            = "/v1consortium.services.DocumentService/SearchDocuments"
	DocumentService_GetDocumentAnalytics_FullMethodName       = "/v1consortium.services.DocumentService/GetDocumentAnalytics"
	DocumentService_GetDocumentRetentionStatus_FullMethodName = "/v1consortium.services.DocumentService/GetDocumentRetentionStatus"
	DocumentService_ApplyRetentionPolicy_FullMethodName       = "/v1consortium.services.DocumentService/ApplyRetentionPolicy"
)

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Document Service Definition
type DocumentServiceClient interface {
	// Document Management
	UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	GetDocumentVersions(ctx context.Context, in *GetDocumentVersionsRequest, opts ...grpc.CallOption) (*GetDocumentVersionsResponse, error)
	// Document Sharing
	ShareDocument(ctx context.Context, in *ShareDocumentRequest, opts ...grpc.CallOption) (*ShareDocumentResponse, error)
	GetSharedDocuments(ctx context.Context, in *GetSharedDocumentsRequest, opts ...grpc.CallOption) (*GetSharedDocumentsResponse, error)
	RevokeDocumentShare(ctx context.Context, in *RevokeDocumentShareRequest, opts ...grpc.CallOption) (*RevokeDocumentShareResponse, error)
	// Document Search
	SearchDocuments(ctx context.Context, in *SearchDocumentsRequest, opts ...grpc.CallOption) (*SearchDocumentsResponse, error)
	// Document Analytics
	GetDocumentAnalytics(ctx context.Context, in *GetDocumentAnalyticsRequest, opts ...grpc.CallOption) (*GetDocumentAnalyticsResponse, error)
	// Document Compliance
	GetDocumentRetentionStatus(ctx context.Context, in *GetDocumentRetentionStatusRequest, opts ...grpc.CallOption) (*GetDocumentRetentionStatusResponse, error)
	ApplyRetentionPolicy(ctx context.Context, in *ApplyRetentionPolicyRequest, opts ...grpc.CallOption) (*ApplyRetentionPolicyResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentService_UploadDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, DocumentService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentService_UpdateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentVersions(ctx context.Context, in *GetDocumentVersionsRequest, opts ...grpc.CallOption) (*GetDocumentVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentVersionsResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetDocumentVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) ShareDocument(ctx context.Context, in *ShareDocumentRequest, opts ...grpc.CallOption) (*ShareDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentService_ShareDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetSharedDocuments(ctx context.Context, in *GetSharedDocumentsRequest, opts ...grpc.CallOption) (*GetSharedDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSharedDocumentsResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetSharedDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) RevokeDocumentShare(ctx context.Context, in *RevokeDocumentShareRequest, opts ...grpc.CallOption) (*RevokeDocumentShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeDocumentShareResponse)
	err := c.cc.Invoke(ctx, DocumentService_RevokeDocumentShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) SearchDocuments(ctx context.Context, in *SearchDocumentsRequest, opts ...grpc.CallOption) (*SearchDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDocumentsResponse)
	err := c.cc.Invoke(ctx, DocumentService_SearchDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentAnalytics(ctx context.Context, in *GetDocumentAnalyticsRequest, opts ...grpc.CallOption) (*GetDocumentAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentAnalyticsResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetDocumentAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentRetentionStatus(ctx context.Context, in *GetDocumentRetentionStatusRequest, opts ...grpc.CallOption) (*GetDocumentRetentionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentRetentionStatusResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetDocumentRetentionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) ApplyRetentionPolicy(ctx context.Context, in *ApplyRetentionPolicyRequest, opts ...grpc.CallOption) (*ApplyRetentionPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyRetentionPolicyResponse)
	err := c.cc.Invoke(ctx, DocumentService_ApplyRetentionPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility.
//
// Document Service Definition
type DocumentServiceServer interface {
	// Document Management
	UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error)
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	GetDocumentVersions(context.Context, *GetDocumentVersionsRequest) (*GetDocumentVersionsResponse, error)
	// Document Sharing
	ShareDocument(context.Context, *ShareDocumentRequest) (*ShareDocumentResponse, error)
	GetSharedDocuments(context.Context, *GetSharedDocumentsRequest) (*GetSharedDocumentsResponse, error)
	RevokeDocumentShare(context.Context, *RevokeDocumentShareRequest) (*RevokeDocumentShareResponse, error)
	// Document Search
	SearchDocuments(context.Context, *SearchDocumentsRequest) (*SearchDocumentsResponse, error)
	// Document Analytics
	GetDocumentAnalytics(context.Context, *GetDocumentAnalyticsRequest) (*GetDocumentAnalyticsResponse, error)
	// Document Compliance
	GetDocumentRetentionStatus(context.Context, *GetDocumentRetentionStatusRequest) (*GetDocumentRetentionStatusResponse, error)
	ApplyRetentionPolicy(context.Context, *ApplyRetentionPolicyRequest) (*ApplyRetentionPolicyResponse, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentServiceServer struct{}

func (UnimplementedDocumentServiceServer) UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocumentServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocumentServiceServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDocumentServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentVersions(context.Context, *GetDocumentVersionsRequest) (*GetDocumentVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentVersions not implemented")
}
func (UnimplementedDocumentServiceServer) ShareDocument(context.Context, *ShareDocumentRequest) (*ShareDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDocument not implemented")
}
func (UnimplementedDocumentServiceServer) GetSharedDocuments(context.Context, *GetSharedDocumentsRequest) (*GetSharedDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedDocuments not implemented")
}
func (UnimplementedDocumentServiceServer) RevokeDocumentShare(context.Context, *RevokeDocumentShareRequest) (*RevokeDocumentShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDocumentShare not implemented")
}
func (UnimplementedDocumentServiceServer) SearchDocuments(context.Context, *SearchDocumentsRequest) (*SearchDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDocuments not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentAnalytics(context.Context, *GetDocumentAnalyticsRequest) (*GetDocumentAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentAnalytics not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentRetentionStatus(context.Context, *GetDocumentRetentionStatusRequest) (*GetDocumentRetentionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentRetentionStatus not implemented")
}
func (UnimplementedDocumentServiceServer) ApplyRetentionPolicy(context.Context, *ApplyRetentionPolicyRequest) (*ApplyRetentionPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyRetentionPolicy not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}
func (UnimplementedDocumentServiceServer) testEmbeddedByValue()                         {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_UploadDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).UploadDocument(ctx, req.(*UploadDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetDocumentVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentVersions(ctx, req.(*GetDocumentVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_ShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).ShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_ShareDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).ShareDocument(ctx, req.(*ShareDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetSharedDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharedDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetSharedDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetSharedDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetSharedDocuments(ctx, req.(*GetSharedDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_RevokeDocumentShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeDocumentShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).RevokeDocumentShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_RevokeDocumentShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).RevokeDocumentShare(ctx, req.(*RevokeDocumentShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_SearchDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).SearchDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_SearchDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).SearchDocuments(ctx, req.(*SearchDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetDocumentAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentAnalytics(ctx, req.(*GetDocumentAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentRetentionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRetentionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentRetentionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetDocumentRetentionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentRetentionStatus(ctx, req.(*GetDocumentRetentionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_ApplyRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRetentionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).ApplyRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_ApplyRetentionPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).ApplyRetentionPolicy(ctx, req.(*ApplyRetentionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDocument",
			Handler:    _DocumentService_UploadDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocumentService_GetDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _DocumentService_ListDocuments_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _DocumentService_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DocumentService_DeleteDocument_Handler,
		},
		{
			MethodName: "GetDocumentVersions",
			Handler:    _DocumentService_GetDocumentVersions_Handler,
		},
		{
			MethodName: "ShareDocument",
			Handler:    _DocumentService_ShareDocument_Handler,
		},
		{
			MethodName: "GetSharedDocuments",
			Handler:    _DocumentService_GetSharedDocuments_Handler,
		},
		{
			MethodName: "RevokeDocumentShare",
			Handler:    _DocumentService_RevokeDocumentShare_Handler,
		},
		{
			MethodName: "SearchDocuments",
			Handler:    _DocumentService_SearchDocuments_Handler,
		},
		{
			MethodName: "GetDocumentAnalytics",
			Handler:    _DocumentService_GetDocumentAnalytics_Handler,
		},
		{
			MethodName: "GetDocumentRetentionStatus",
			Handler:    _DocumentService_GetDocumentRetentionStatus_Handler,
		},
		{
			MethodName: "ApplyRetentionPolicy",
			Handler:    _DocumentService_ApplyRetentionPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/document.proto",
}
