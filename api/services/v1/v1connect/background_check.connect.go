// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/background_check.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackgroundCheckServiceName is the fully-qualified name of the BackgroundCheckService service.
	BackgroundCheckServiceName = "v1consortium.services.BackgroundCheckService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackgroundCheckServiceOrderBackgroundCheckProcedure is the fully-qualified name of the
	// BackgroundCheckService's OrderBackgroundCheck RPC.
	BackgroundCheckServiceOrderBackgroundCheckProcedure = "/v1consortium.services.BackgroundCheckService/OrderBackgroundCheck"
	// BackgroundCheckServiceGetBackgroundCheckProcedure is the fully-qualified name of the
	// BackgroundCheckService's GetBackgroundCheck RPC.
	BackgroundCheckServiceGetBackgroundCheckProcedure = "/v1consortium.services.BackgroundCheckService/GetBackgroundCheck"
	// BackgroundCheckServiceUpdateBackgroundCheckProcedure is the fully-qualified name of the
	// BackgroundCheckService's UpdateBackgroundCheck RPC.
	BackgroundCheckServiceUpdateBackgroundCheckProcedure = "/v1consortium.services.BackgroundCheckService/UpdateBackgroundCheck"
	// BackgroundCheckServiceListBackgroundChecksProcedure is the fully-qualified name of the
	// BackgroundCheckService's ListBackgroundChecks RPC.
	BackgroundCheckServiceListBackgroundChecksProcedure = "/v1consortium.services.BackgroundCheckService/ListBackgroundChecks"
	// BackgroundCheckServiceAddFindingProcedure is the fully-qualified name of the
	// BackgroundCheckService's AddFinding RPC.
	BackgroundCheckServiceAddFindingProcedure = "/v1consortium.services.BackgroundCheckService/AddFinding"
	// BackgroundCheckServiceUpdateFindingProcedure is the fully-qualified name of the
	// BackgroundCheckService's UpdateFinding RPC.
	BackgroundCheckServiceUpdateFindingProcedure = "/v1consortium.services.BackgroundCheckService/UpdateFinding"
	// BackgroundCheckServiceListFindingsProcedure is the fully-qualified name of the
	// BackgroundCheckService's ListFindings RPC.
	BackgroundCheckServiceListFindingsProcedure = "/v1consortium.services.BackgroundCheckService/ListFindings"
	// BackgroundCheckServiceInitiateAdverseActionProcedure is the fully-qualified name of the
	// BackgroundCheckService's InitiateAdverseAction RPC.
	BackgroundCheckServiceInitiateAdverseActionProcedure = "/v1consortium.services.BackgroundCheckService/InitiateAdverseAction"
	// BackgroundCheckServiceHandleDisputeProcedure is the fully-qualified name of the
	// BackgroundCheckService's HandleDispute RPC.
	BackgroundCheckServiceHandleDisputeProcedure = "/v1consortium.services.BackgroundCheckService/HandleDispute"
	// BackgroundCheckServiceGetAdverseActionStatusProcedure is the fully-qualified name of the
	// BackgroundCheckService's GetAdverseActionStatus RPC.
	BackgroundCheckServiceGetAdverseActionStatusProcedure = "/v1consortium.services.BackgroundCheckService/GetAdverseActionStatus"
	// BackgroundCheckServiceGetAvailablePackagesProcedure is the fully-qualified name of the
	// BackgroundCheckService's GetAvailablePackages RPC.
	BackgroundCheckServiceGetAvailablePackagesProcedure = "/v1consortium.services.BackgroundCheckService/GetAvailablePackages"
	// BackgroundCheckServiceGetProviderStatusProcedure is the fully-qualified name of the
	// BackgroundCheckService's GetProviderStatus RPC.
	BackgroundCheckServiceGetProviderStatusProcedure = "/v1consortium.services.BackgroundCheckService/GetProviderStatus"
	// BackgroundCheckServiceGetBackgroundCheckAnalyticsProcedure is the fully-qualified name of the
	// BackgroundCheckService's GetBackgroundCheckAnalytics RPC.
	BackgroundCheckServiceGetBackgroundCheckAnalyticsProcedure = "/v1consortium.services.BackgroundCheckService/GetBackgroundCheckAnalytics"
)

// BackgroundCheckServiceClient is a client for the v1consortium.services.BackgroundCheckService
// service.
type BackgroundCheckServiceClient interface {
	// Background Check Management
	OrderBackgroundCheck(context.Context, *connect.Request[v1.OrderBackgroundCheckRequest]) (*connect.Response[v1.OrderBackgroundCheckResponse], error)
	GetBackgroundCheck(context.Context, *connect.Request[v1.GetBackgroundCheckRequest]) (*connect.Response[v1.GetBackgroundCheckResponse], error)
	UpdateBackgroundCheck(context.Context, *connect.Request[v1.UpdateBackgroundCheckRequest]) (*connect.Response[v1.UpdateBackgroundCheckResponse], error)
	ListBackgroundChecks(context.Context, *connect.Request[v1.ListBackgroundChecksRequest]) (*connect.Response[v1.ListBackgroundChecksResponse], error)
	// Findings Management
	AddFinding(context.Context, *connect.Request[v1.AddFindingRequest]) (*connect.Response[v1.AddFindingResponse], error)
	UpdateFinding(context.Context, *connect.Request[v1.UpdateFindingRequest]) (*connect.Response[v1.UpdateFindingResponse], error)
	ListFindings(context.Context, *connect.Request[v1.ListFindingsRequest]) (*connect.Response[v1.ListFindingsResponse], error)
	// FCRA Compliance
	InitiateAdverseAction(context.Context, *connect.Request[v1.InitiateAdverseActionRequest]) (*connect.Response[v1.InitiateAdverseActionResponse], error)
	HandleDispute(context.Context, *connect.Request[v1.HandleDisputeRequest]) (*connect.Response[v1.HandleDisputeResponse], error)
	GetAdverseActionStatus(context.Context, *connect.Request[v1.GetAdverseActionStatusRequest]) (*connect.Response[v1.GetAdverseActionStatusResponse], error)
	// Package and Provider Management
	GetAvailablePackages(context.Context, *connect.Request[v1.GetAvailablePackagesRequest]) (*connect.Response[v1.GetAvailablePackagesResponse], error)
	GetProviderStatus(context.Context, *connect.Request[v1.GetProviderStatusRequest]) (*connect.Response[v1.GetProviderStatusResponse], error)
	// Analytics
	GetBackgroundCheckAnalytics(context.Context, *connect.Request[v1.GetBackgroundCheckAnalyticsRequest]) (*connect.Response[v1.GetBackgroundCheckAnalyticsResponse], error)
}

// NewBackgroundCheckServiceClient constructs a client for the
// v1consortium.services.BackgroundCheckService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackgroundCheckServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackgroundCheckServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backgroundCheckServiceMethods := v1.File_services_v1_background_check_proto.Services().ByName("BackgroundCheckService").Methods()
	return &backgroundCheckServiceClient{
		orderBackgroundCheck: connect.NewClient[v1.OrderBackgroundCheckRequest, v1.OrderBackgroundCheckResponse](
			httpClient,
			baseURL+BackgroundCheckServiceOrderBackgroundCheckProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("OrderBackgroundCheck")),
			connect.WithClientOptions(opts...),
		),
		getBackgroundCheck: connect.NewClient[v1.GetBackgroundCheckRequest, v1.GetBackgroundCheckResponse](
			httpClient,
			baseURL+BackgroundCheckServiceGetBackgroundCheckProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("GetBackgroundCheck")),
			connect.WithClientOptions(opts...),
		),
		updateBackgroundCheck: connect.NewClient[v1.UpdateBackgroundCheckRequest, v1.UpdateBackgroundCheckResponse](
			httpClient,
			baseURL+BackgroundCheckServiceUpdateBackgroundCheckProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("UpdateBackgroundCheck")),
			connect.WithClientOptions(opts...),
		),
		listBackgroundChecks: connect.NewClient[v1.ListBackgroundChecksRequest, v1.ListBackgroundChecksResponse](
			httpClient,
			baseURL+BackgroundCheckServiceListBackgroundChecksProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("ListBackgroundChecks")),
			connect.WithClientOptions(opts...),
		),
		addFinding: connect.NewClient[v1.AddFindingRequest, v1.AddFindingResponse](
			httpClient,
			baseURL+BackgroundCheckServiceAddFindingProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("AddFinding")),
			connect.WithClientOptions(opts...),
		),
		updateFinding: connect.NewClient[v1.UpdateFindingRequest, v1.UpdateFindingResponse](
			httpClient,
			baseURL+BackgroundCheckServiceUpdateFindingProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("UpdateFinding")),
			connect.WithClientOptions(opts...),
		),
		listFindings: connect.NewClient[v1.ListFindingsRequest, v1.ListFindingsResponse](
			httpClient,
			baseURL+BackgroundCheckServiceListFindingsProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("ListFindings")),
			connect.WithClientOptions(opts...),
		),
		initiateAdverseAction: connect.NewClient[v1.InitiateAdverseActionRequest, v1.InitiateAdverseActionResponse](
			httpClient,
			baseURL+BackgroundCheckServiceInitiateAdverseActionProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("InitiateAdverseAction")),
			connect.WithClientOptions(opts...),
		),
		handleDispute: connect.NewClient[v1.HandleDisputeRequest, v1.HandleDisputeResponse](
			httpClient,
			baseURL+BackgroundCheckServiceHandleDisputeProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("HandleDispute")),
			connect.WithClientOptions(opts...),
		),
		getAdverseActionStatus: connect.NewClient[v1.GetAdverseActionStatusRequest, v1.GetAdverseActionStatusResponse](
			httpClient,
			baseURL+BackgroundCheckServiceGetAdverseActionStatusProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("GetAdverseActionStatus")),
			connect.WithClientOptions(opts...),
		),
		getAvailablePackages: connect.NewClient[v1.GetAvailablePackagesRequest, v1.GetAvailablePackagesResponse](
			httpClient,
			baseURL+BackgroundCheckServiceGetAvailablePackagesProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("GetAvailablePackages")),
			connect.WithClientOptions(opts...),
		),
		getProviderStatus: connect.NewClient[v1.GetProviderStatusRequest, v1.GetProviderStatusResponse](
			httpClient,
			baseURL+BackgroundCheckServiceGetProviderStatusProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("GetProviderStatus")),
			connect.WithClientOptions(opts...),
		),
		getBackgroundCheckAnalytics: connect.NewClient[v1.GetBackgroundCheckAnalyticsRequest, v1.GetBackgroundCheckAnalyticsResponse](
			httpClient,
			baseURL+BackgroundCheckServiceGetBackgroundCheckAnalyticsProcedure,
			connect.WithSchema(backgroundCheckServiceMethods.ByName("GetBackgroundCheckAnalytics")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backgroundCheckServiceClient implements BackgroundCheckServiceClient.
type backgroundCheckServiceClient struct {
	orderBackgroundCheck        *connect.Client[v1.OrderBackgroundCheckRequest, v1.OrderBackgroundCheckResponse]
	getBackgroundCheck          *connect.Client[v1.GetBackgroundCheckRequest, v1.GetBackgroundCheckResponse]
	updateBackgroundCheck       *connect.Client[v1.UpdateBackgroundCheckRequest, v1.UpdateBackgroundCheckResponse]
	listBackgroundChecks        *connect.Client[v1.ListBackgroundChecksRequest, v1.ListBackgroundChecksResponse]
	addFinding                  *connect.Client[v1.AddFindingRequest, v1.AddFindingResponse]
	updateFinding               *connect.Client[v1.UpdateFindingRequest, v1.UpdateFindingResponse]
	listFindings                *connect.Client[v1.ListFindingsRequest, v1.ListFindingsResponse]
	initiateAdverseAction       *connect.Client[v1.InitiateAdverseActionRequest, v1.InitiateAdverseActionResponse]
	handleDispute               *connect.Client[v1.HandleDisputeRequest, v1.HandleDisputeResponse]
	getAdverseActionStatus      *connect.Client[v1.GetAdverseActionStatusRequest, v1.GetAdverseActionStatusResponse]
	getAvailablePackages        *connect.Client[v1.GetAvailablePackagesRequest, v1.GetAvailablePackagesResponse]
	getProviderStatus           *connect.Client[v1.GetProviderStatusRequest, v1.GetProviderStatusResponse]
	getBackgroundCheckAnalytics *connect.Client[v1.GetBackgroundCheckAnalyticsRequest, v1.GetBackgroundCheckAnalyticsResponse]
}

// OrderBackgroundCheck calls v1consortium.services.BackgroundCheckService.OrderBackgroundCheck.
func (c *backgroundCheckServiceClient) OrderBackgroundCheck(ctx context.Context, req *connect.Request[v1.OrderBackgroundCheckRequest]) (*connect.Response[v1.OrderBackgroundCheckResponse], error) {
	return c.orderBackgroundCheck.CallUnary(ctx, req)
}

// GetBackgroundCheck calls v1consortium.services.BackgroundCheckService.GetBackgroundCheck.
func (c *backgroundCheckServiceClient) GetBackgroundCheck(ctx context.Context, req *connect.Request[v1.GetBackgroundCheckRequest]) (*connect.Response[v1.GetBackgroundCheckResponse], error) {
	return c.getBackgroundCheck.CallUnary(ctx, req)
}

// UpdateBackgroundCheck calls v1consortium.services.BackgroundCheckService.UpdateBackgroundCheck.
func (c *backgroundCheckServiceClient) UpdateBackgroundCheck(ctx context.Context, req *connect.Request[v1.UpdateBackgroundCheckRequest]) (*connect.Response[v1.UpdateBackgroundCheckResponse], error) {
	return c.updateBackgroundCheck.CallUnary(ctx, req)
}

// ListBackgroundChecks calls v1consortium.services.BackgroundCheckService.ListBackgroundChecks.
func (c *backgroundCheckServiceClient) ListBackgroundChecks(ctx context.Context, req *connect.Request[v1.ListBackgroundChecksRequest]) (*connect.Response[v1.ListBackgroundChecksResponse], error) {
	return c.listBackgroundChecks.CallUnary(ctx, req)
}

// AddFinding calls v1consortium.services.BackgroundCheckService.AddFinding.
func (c *backgroundCheckServiceClient) AddFinding(ctx context.Context, req *connect.Request[v1.AddFindingRequest]) (*connect.Response[v1.AddFindingResponse], error) {
	return c.addFinding.CallUnary(ctx, req)
}

// UpdateFinding calls v1consortium.services.BackgroundCheckService.UpdateFinding.
func (c *backgroundCheckServiceClient) UpdateFinding(ctx context.Context, req *connect.Request[v1.UpdateFindingRequest]) (*connect.Response[v1.UpdateFindingResponse], error) {
	return c.updateFinding.CallUnary(ctx, req)
}

// ListFindings calls v1consortium.services.BackgroundCheckService.ListFindings.
func (c *backgroundCheckServiceClient) ListFindings(ctx context.Context, req *connect.Request[v1.ListFindingsRequest]) (*connect.Response[v1.ListFindingsResponse], error) {
	return c.listFindings.CallUnary(ctx, req)
}

// InitiateAdverseAction calls v1consortium.services.BackgroundCheckService.InitiateAdverseAction.
func (c *backgroundCheckServiceClient) InitiateAdverseAction(ctx context.Context, req *connect.Request[v1.InitiateAdverseActionRequest]) (*connect.Response[v1.InitiateAdverseActionResponse], error) {
	return c.initiateAdverseAction.CallUnary(ctx, req)
}

// HandleDispute calls v1consortium.services.BackgroundCheckService.HandleDispute.
func (c *backgroundCheckServiceClient) HandleDispute(ctx context.Context, req *connect.Request[v1.HandleDisputeRequest]) (*connect.Response[v1.HandleDisputeResponse], error) {
	return c.handleDispute.CallUnary(ctx, req)
}

// GetAdverseActionStatus calls v1consortium.services.BackgroundCheckService.GetAdverseActionStatus.
func (c *backgroundCheckServiceClient) GetAdverseActionStatus(ctx context.Context, req *connect.Request[v1.GetAdverseActionStatusRequest]) (*connect.Response[v1.GetAdverseActionStatusResponse], error) {
	return c.getAdverseActionStatus.CallUnary(ctx, req)
}

// GetAvailablePackages calls v1consortium.services.BackgroundCheckService.GetAvailablePackages.
func (c *backgroundCheckServiceClient) GetAvailablePackages(ctx context.Context, req *connect.Request[v1.GetAvailablePackagesRequest]) (*connect.Response[v1.GetAvailablePackagesResponse], error) {
	return c.getAvailablePackages.CallUnary(ctx, req)
}

// GetProviderStatus calls v1consortium.services.BackgroundCheckService.GetProviderStatus.
func (c *backgroundCheckServiceClient) GetProviderStatus(ctx context.Context, req *connect.Request[v1.GetProviderStatusRequest]) (*connect.Response[v1.GetProviderStatusResponse], error) {
	return c.getProviderStatus.CallUnary(ctx, req)
}

// GetBackgroundCheckAnalytics calls
// v1consortium.services.BackgroundCheckService.GetBackgroundCheckAnalytics.
func (c *backgroundCheckServiceClient) GetBackgroundCheckAnalytics(ctx context.Context, req *connect.Request[v1.GetBackgroundCheckAnalyticsRequest]) (*connect.Response[v1.GetBackgroundCheckAnalyticsResponse], error) {
	return c.getBackgroundCheckAnalytics.CallUnary(ctx, req)
}

// BackgroundCheckServiceHandler is an implementation of the
// v1consortium.services.BackgroundCheckService service.
type BackgroundCheckServiceHandler interface {
	// Background Check Management
	OrderBackgroundCheck(context.Context, *connect.Request[v1.OrderBackgroundCheckRequest]) (*connect.Response[v1.OrderBackgroundCheckResponse], error)
	GetBackgroundCheck(context.Context, *connect.Request[v1.GetBackgroundCheckRequest]) (*connect.Response[v1.GetBackgroundCheckResponse], error)
	UpdateBackgroundCheck(context.Context, *connect.Request[v1.UpdateBackgroundCheckRequest]) (*connect.Response[v1.UpdateBackgroundCheckResponse], error)
	ListBackgroundChecks(context.Context, *connect.Request[v1.ListBackgroundChecksRequest]) (*connect.Response[v1.ListBackgroundChecksResponse], error)
	// Findings Management
	AddFinding(context.Context, *connect.Request[v1.AddFindingRequest]) (*connect.Response[v1.AddFindingResponse], error)
	UpdateFinding(context.Context, *connect.Request[v1.UpdateFindingRequest]) (*connect.Response[v1.UpdateFindingResponse], error)
	ListFindings(context.Context, *connect.Request[v1.ListFindingsRequest]) (*connect.Response[v1.ListFindingsResponse], error)
	// FCRA Compliance
	InitiateAdverseAction(context.Context, *connect.Request[v1.InitiateAdverseActionRequest]) (*connect.Response[v1.InitiateAdverseActionResponse], error)
	HandleDispute(context.Context, *connect.Request[v1.HandleDisputeRequest]) (*connect.Response[v1.HandleDisputeResponse], error)
	GetAdverseActionStatus(context.Context, *connect.Request[v1.GetAdverseActionStatusRequest]) (*connect.Response[v1.GetAdverseActionStatusResponse], error)
	// Package and Provider Management
	GetAvailablePackages(context.Context, *connect.Request[v1.GetAvailablePackagesRequest]) (*connect.Response[v1.GetAvailablePackagesResponse], error)
	GetProviderStatus(context.Context, *connect.Request[v1.GetProviderStatusRequest]) (*connect.Response[v1.GetProviderStatusResponse], error)
	// Analytics
	GetBackgroundCheckAnalytics(context.Context, *connect.Request[v1.GetBackgroundCheckAnalyticsRequest]) (*connect.Response[v1.GetBackgroundCheckAnalyticsResponse], error)
}

// NewBackgroundCheckServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackgroundCheckServiceHandler(svc BackgroundCheckServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backgroundCheckServiceMethods := v1.File_services_v1_background_check_proto.Services().ByName("BackgroundCheckService").Methods()
	backgroundCheckServiceOrderBackgroundCheckHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceOrderBackgroundCheckProcedure,
		svc.OrderBackgroundCheck,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("OrderBackgroundCheck")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceGetBackgroundCheckHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceGetBackgroundCheckProcedure,
		svc.GetBackgroundCheck,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("GetBackgroundCheck")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceUpdateBackgroundCheckHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceUpdateBackgroundCheckProcedure,
		svc.UpdateBackgroundCheck,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("UpdateBackgroundCheck")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceListBackgroundChecksHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceListBackgroundChecksProcedure,
		svc.ListBackgroundChecks,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("ListBackgroundChecks")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceAddFindingHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceAddFindingProcedure,
		svc.AddFinding,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("AddFinding")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceUpdateFindingHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceUpdateFindingProcedure,
		svc.UpdateFinding,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("UpdateFinding")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceListFindingsHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceListFindingsProcedure,
		svc.ListFindings,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("ListFindings")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceInitiateAdverseActionHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceInitiateAdverseActionProcedure,
		svc.InitiateAdverseAction,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("InitiateAdverseAction")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceHandleDisputeHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceHandleDisputeProcedure,
		svc.HandleDispute,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("HandleDispute")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceGetAdverseActionStatusHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceGetAdverseActionStatusProcedure,
		svc.GetAdverseActionStatus,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("GetAdverseActionStatus")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceGetAvailablePackagesHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceGetAvailablePackagesProcedure,
		svc.GetAvailablePackages,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("GetAvailablePackages")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceGetProviderStatusHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceGetProviderStatusProcedure,
		svc.GetProviderStatus,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("GetProviderStatus")),
		connect.WithHandlerOptions(opts...),
	)
	backgroundCheckServiceGetBackgroundCheckAnalyticsHandler := connect.NewUnaryHandler(
		BackgroundCheckServiceGetBackgroundCheckAnalyticsProcedure,
		svc.GetBackgroundCheckAnalytics,
		connect.WithSchema(backgroundCheckServiceMethods.ByName("GetBackgroundCheckAnalytics")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.BackgroundCheckService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackgroundCheckServiceOrderBackgroundCheckProcedure:
			backgroundCheckServiceOrderBackgroundCheckHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceGetBackgroundCheckProcedure:
			backgroundCheckServiceGetBackgroundCheckHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceUpdateBackgroundCheckProcedure:
			backgroundCheckServiceUpdateBackgroundCheckHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceListBackgroundChecksProcedure:
			backgroundCheckServiceListBackgroundChecksHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceAddFindingProcedure:
			backgroundCheckServiceAddFindingHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceUpdateFindingProcedure:
			backgroundCheckServiceUpdateFindingHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceListFindingsProcedure:
			backgroundCheckServiceListFindingsHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceInitiateAdverseActionProcedure:
			backgroundCheckServiceInitiateAdverseActionHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceHandleDisputeProcedure:
			backgroundCheckServiceHandleDisputeHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceGetAdverseActionStatusProcedure:
			backgroundCheckServiceGetAdverseActionStatusHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceGetAvailablePackagesProcedure:
			backgroundCheckServiceGetAvailablePackagesHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceGetProviderStatusProcedure:
			backgroundCheckServiceGetProviderStatusHandler.ServeHTTP(w, r)
		case BackgroundCheckServiceGetBackgroundCheckAnalyticsProcedure:
			backgroundCheckServiceGetBackgroundCheckAnalyticsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackgroundCheckServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackgroundCheckServiceHandler struct{}

func (UnimplementedBackgroundCheckServiceHandler) OrderBackgroundCheck(context.Context, *connect.Request[v1.OrderBackgroundCheckRequest]) (*connect.Response[v1.OrderBackgroundCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.OrderBackgroundCheck is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) GetBackgroundCheck(context.Context, *connect.Request[v1.GetBackgroundCheckRequest]) (*connect.Response[v1.GetBackgroundCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.GetBackgroundCheck is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) UpdateBackgroundCheck(context.Context, *connect.Request[v1.UpdateBackgroundCheckRequest]) (*connect.Response[v1.UpdateBackgroundCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.UpdateBackgroundCheck is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) ListBackgroundChecks(context.Context, *connect.Request[v1.ListBackgroundChecksRequest]) (*connect.Response[v1.ListBackgroundChecksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.ListBackgroundChecks is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) AddFinding(context.Context, *connect.Request[v1.AddFindingRequest]) (*connect.Response[v1.AddFindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.AddFinding is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) UpdateFinding(context.Context, *connect.Request[v1.UpdateFindingRequest]) (*connect.Response[v1.UpdateFindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.UpdateFinding is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) ListFindings(context.Context, *connect.Request[v1.ListFindingsRequest]) (*connect.Response[v1.ListFindingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.ListFindings is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) InitiateAdverseAction(context.Context, *connect.Request[v1.InitiateAdverseActionRequest]) (*connect.Response[v1.InitiateAdverseActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.InitiateAdverseAction is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) HandleDispute(context.Context, *connect.Request[v1.HandleDisputeRequest]) (*connect.Response[v1.HandleDisputeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.HandleDispute is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) GetAdverseActionStatus(context.Context, *connect.Request[v1.GetAdverseActionStatusRequest]) (*connect.Response[v1.GetAdverseActionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.GetAdverseActionStatus is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) GetAvailablePackages(context.Context, *connect.Request[v1.GetAvailablePackagesRequest]) (*connect.Response[v1.GetAvailablePackagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.GetAvailablePackages is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) GetProviderStatus(context.Context, *connect.Request[v1.GetProviderStatusRequest]) (*connect.Response[v1.GetProviderStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.GetProviderStatus is not implemented"))
}

func (UnimplementedBackgroundCheckServiceHandler) GetBackgroundCheckAnalytics(context.Context, *connect.Request[v1.GetBackgroundCheckAnalyticsRequest]) (*connect.Response[v1.GetBackgroundCheckAnalyticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.BackgroundCheckService.GetBackgroundCheckAnalytics is not implemented"))
}
