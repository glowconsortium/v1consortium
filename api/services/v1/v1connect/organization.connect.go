// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/organization.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "v1consortium.services.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceCreateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's CreateOrganization RPC.
	OrganizationServiceCreateOrganizationProcedure = "/v1consortium.services.OrganizationService/CreateOrganization"
	// OrganizationServiceGetOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganization RPC.
	OrganizationServiceGetOrganizationProcedure = "/v1consortium.services.OrganizationService/GetOrganization"
	// OrganizationServiceUpdateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganization RPC.
	OrganizationServiceUpdateOrganizationProcedure = "/v1consortium.services.OrganizationService/UpdateOrganization"
	// OrganizationServiceListOrganizationsProcedure is the fully-qualified name of the
	// OrganizationService's ListOrganizations RPC.
	OrganizationServiceListOrganizationsProcedure = "/v1consortium.services.OrganizationService/ListOrganizations"
	// OrganizationServiceDeactivateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's DeactivateOrganization RPC.
	OrganizationServiceDeactivateOrganizationProcedure = "/v1consortium.services.OrganizationService/DeactivateOrganization"
	// OrganizationServiceCreateUserProcedure is the fully-qualified name of the OrganizationService's
	// CreateUser RPC.
	OrganizationServiceCreateUserProcedure = "/v1consortium.services.OrganizationService/CreateUser"
	// OrganizationServiceGetUserProcedure is the fully-qualified name of the OrganizationService's
	// GetUser RPC.
	OrganizationServiceGetUserProcedure = "/v1consortium.services.OrganizationService/GetUser"
	// OrganizationServiceUpdateUserProcedure is the fully-qualified name of the OrganizationService's
	// UpdateUser RPC.
	OrganizationServiceUpdateUserProcedure = "/v1consortium.services.OrganizationService/UpdateUser"
	// OrganizationServiceListUsersProcedure is the fully-qualified name of the OrganizationService's
	// ListUsers RPC.
	OrganizationServiceListUsersProcedure = "/v1consortium.services.OrganizationService/ListUsers"
	// OrganizationServiceDeactivateUserProcedure is the fully-qualified name of the
	// OrganizationService's DeactivateUser RPC.
	OrganizationServiceDeactivateUserProcedure = "/v1consortium.services.OrganizationService/DeactivateUser"
	// OrganizationServiceCreateSubscriptionProcedure is the fully-qualified name of the
	// OrganizationService's CreateSubscription RPC.
	OrganizationServiceCreateSubscriptionProcedure = "/v1consortium.services.OrganizationService/CreateSubscription"
	// OrganizationServiceGetSubscriptionProcedure is the fully-qualified name of the
	// OrganizationService's GetSubscription RPC.
	OrganizationServiceGetSubscriptionProcedure = "/v1consortium.services.OrganizationService/GetSubscription"
	// OrganizationServiceUpdateSubscriptionProcedure is the fully-qualified name of the
	// OrganizationService's UpdateSubscription RPC.
	OrganizationServiceUpdateSubscriptionProcedure = "/v1consortium.services.OrganizationService/UpdateSubscription"
	// OrganizationServiceListSubscriptionPlansProcedure is the fully-qualified name of the
	// OrganizationService's ListSubscriptionPlans RPC.
	OrganizationServiceListSubscriptionPlansProcedure = "/v1consortium.services.OrganizationService/ListSubscriptionPlans"
)

// OrganizationServiceClient is a client for the v1consortium.services.OrganizationService service.
type OrganizationServiceClient interface {
	// Organization Management
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	DeactivateOrganization(context.Context, *connect.Request[v1.DeactivateOrganizationRequest]) (*connect.Response[v1.DeactivateOrganizationResponse], error)
	// User Management
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	DeactivateUser(context.Context, *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error)
	// Subscription Management
	CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error)
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	UpdateSubscription(context.Context, *connect.Request[v1.UpdateSubscriptionRequest]) (*connect.Response[v1.UpdateSubscriptionResponse], error)
	ListSubscriptionPlans(context.Context, *connect.Request[v1.ListSubscriptionPlansRequest]) (*connect.Response[v1.ListSubscriptionPlansResponse], error)
}

// NewOrganizationServiceClient constructs a client for the
// v1consortium.services.OrganizationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	organizationServiceMethods := v1.File_services_v1_organization_proto.Services().ByName("OrganizationService").Methods()
	return &organizationServiceClient{
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceCreateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("CreateOrganization")),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+OrganizationServiceListOrganizationsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListOrganizations")),
			connect.WithClientOptions(opts...),
		),
		deactivateOrganization: connect.NewClient[v1.DeactivateOrganizationRequest, v1.DeactivateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceDeactivateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeactivateOrganization")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+OrganizationServiceCreateUserProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+OrganizationServiceGetUserProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateUserProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+OrganizationServiceListUsersProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		deactivateUser: connect.NewClient[v1.DeactivateUserRequest, v1.DeactivateUserResponse](
			httpClient,
			baseURL+OrganizationServiceDeactivateUserProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeactivateUser")),
			connect.WithClientOptions(opts...),
		),
		createSubscription: connect.NewClient[v1.CreateSubscriptionRequest, v1.CreateSubscriptionResponse](
			httpClient,
			baseURL+OrganizationServiceCreateSubscriptionProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("CreateSubscription")),
			connect.WithClientOptions(opts...),
		),
		getSubscription: connect.NewClient[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse](
			httpClient,
			baseURL+OrganizationServiceGetSubscriptionProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetSubscription")),
			connect.WithClientOptions(opts...),
		),
		updateSubscription: connect.NewClient[v1.UpdateSubscriptionRequest, v1.UpdateSubscriptionResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateSubscriptionProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateSubscription")),
			connect.WithClientOptions(opts...),
		),
		listSubscriptionPlans: connect.NewClient[v1.ListSubscriptionPlansRequest, v1.ListSubscriptionPlansResponse](
			httpClient,
			baseURL+OrganizationServiceListSubscriptionPlansProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListSubscriptionPlans")),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	createOrganization     *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	getOrganization        *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	updateOrganization     *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listOrganizations      *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	deactivateOrganization *connect.Client[v1.DeactivateOrganizationRequest, v1.DeactivateOrganizationResponse]
	createUser             *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getUser                *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateUser             *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	listUsers              *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	deactivateUser         *connect.Client[v1.DeactivateUserRequest, v1.DeactivateUserResponse]
	createSubscription     *connect.Client[v1.CreateSubscriptionRequest, v1.CreateSubscriptionResponse]
	getSubscription        *connect.Client[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse]
	updateSubscription     *connect.Client[v1.UpdateSubscriptionRequest, v1.UpdateSubscriptionResponse]
	listSubscriptionPlans  *connect.Client[v1.ListSubscriptionPlansRequest, v1.ListSubscriptionPlansResponse]
}

// CreateOrganization calls v1consortium.services.OrganizationService.CreateOrganization.
func (c *organizationServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// GetOrganization calls v1consortium.services.OrganizationService.GetOrganization.
func (c *organizationServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls v1consortium.services.OrganizationService.UpdateOrganization.
func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls v1consortium.services.OrganizationService.ListOrganizations.
func (c *organizationServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// DeactivateOrganization calls v1consortium.services.OrganizationService.DeactivateOrganization.
func (c *organizationServiceClient) DeactivateOrganization(ctx context.Context, req *connect.Request[v1.DeactivateOrganizationRequest]) (*connect.Response[v1.DeactivateOrganizationResponse], error) {
	return c.deactivateOrganization.CallUnary(ctx, req)
}

// CreateUser calls v1consortium.services.OrganizationService.CreateUser.
func (c *organizationServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls v1consortium.services.OrganizationService.GetUser.
func (c *organizationServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls v1consortium.services.OrganizationService.UpdateUser.
func (c *organizationServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// ListUsers calls v1consortium.services.OrganizationService.ListUsers.
func (c *organizationServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// DeactivateUser calls v1consortium.services.OrganizationService.DeactivateUser.
func (c *organizationServiceClient) DeactivateUser(ctx context.Context, req *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error) {
	return c.deactivateUser.CallUnary(ctx, req)
}

// CreateSubscription calls v1consortium.services.OrganizationService.CreateSubscription.
func (c *organizationServiceClient) CreateSubscription(ctx context.Context, req *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error) {
	return c.createSubscription.CallUnary(ctx, req)
}

// GetSubscription calls v1consortium.services.OrganizationService.GetSubscription.
func (c *organizationServiceClient) GetSubscription(ctx context.Context, req *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// UpdateSubscription calls v1consortium.services.OrganizationService.UpdateSubscription.
func (c *organizationServiceClient) UpdateSubscription(ctx context.Context, req *connect.Request[v1.UpdateSubscriptionRequest]) (*connect.Response[v1.UpdateSubscriptionResponse], error) {
	return c.updateSubscription.CallUnary(ctx, req)
}

// ListSubscriptionPlans calls v1consortium.services.OrganizationService.ListSubscriptionPlans.
func (c *organizationServiceClient) ListSubscriptionPlans(ctx context.Context, req *connect.Request[v1.ListSubscriptionPlansRequest]) (*connect.Response[v1.ListSubscriptionPlansResponse], error) {
	return c.listSubscriptionPlans.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the v1consortium.services.OrganizationService
// service.
type OrganizationServiceHandler interface {
	// Organization Management
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	DeactivateOrganization(context.Context, *connect.Request[v1.DeactivateOrganizationRequest]) (*connect.Response[v1.DeactivateOrganizationResponse], error)
	// User Management
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	DeactivateUser(context.Context, *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error)
	// Subscription Management
	CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error)
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	UpdateSubscription(context.Context, *connect.Request[v1.UpdateSubscriptionRequest]) (*connect.Response[v1.UpdateSubscriptionResponse], error)
	ListSubscriptionPlans(context.Context, *connect.Request[v1.ListSubscriptionPlansRequest]) (*connect.Response[v1.ListSubscriptionPlansResponse], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceMethods := v1.File_services_v1_organization_proto.Services().ByName("OrganizationService").Methods()
	organizationServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("CreateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListOrganizationsHandler := connect.NewUnaryHandler(
		OrganizationServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(organizationServiceMethods.ByName("ListOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeactivateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceDeactivateOrganizationProcedure,
		svc.DeactivateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("DeactivateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateUserHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(organizationServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetUserHandler := connect.NewUnaryHandler(
		OrganizationServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(organizationServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateUserHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListUsersHandler := connect.NewUnaryHandler(
		OrganizationServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(organizationServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeactivateUserHandler := connect.NewUnaryHandler(
		OrganizationServiceDeactivateUserProcedure,
		svc.DeactivateUser,
		connect.WithSchema(organizationServiceMethods.ByName("DeactivateUser")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateSubscriptionHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateSubscriptionProcedure,
		svc.CreateSubscription,
		connect.WithSchema(organizationServiceMethods.ByName("CreateSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetSubscriptionHandler := connect.NewUnaryHandler(
		OrganizationServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		connect.WithSchema(organizationServiceMethods.ByName("GetSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateSubscriptionHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateSubscriptionProcedure,
		svc.UpdateSubscription,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListSubscriptionPlansHandler := connect.NewUnaryHandler(
		OrganizationServiceListSubscriptionPlansProcedure,
		svc.ListSubscriptionPlans,
		connect.WithSchema(organizationServiceMethods.ByName("ListSubscriptionPlans")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceCreateOrganizationProcedure:
			organizationServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceGetOrganizationProcedure:
			organizationServiceGetOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationProcedure:
			organizationServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceListOrganizationsProcedure:
			organizationServiceListOrganizationsHandler.ServeHTTP(w, r)
		case OrganizationServiceDeactivateOrganizationProcedure:
			organizationServiceDeactivateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateUserProcedure:
			organizationServiceCreateUserHandler.ServeHTTP(w, r)
		case OrganizationServiceGetUserProcedure:
			organizationServiceGetUserHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateUserProcedure:
			organizationServiceUpdateUserHandler.ServeHTTP(w, r)
		case OrganizationServiceListUsersProcedure:
			organizationServiceListUsersHandler.ServeHTTP(w, r)
		case OrganizationServiceDeactivateUserProcedure:
			organizationServiceDeactivateUserHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateSubscriptionProcedure:
			organizationServiceCreateSubscriptionHandler.ServeHTTP(w, r)
		case OrganizationServiceGetSubscriptionProcedure:
			organizationServiceGetSubscriptionHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateSubscriptionProcedure:
			organizationServiceUpdateSubscriptionHandler.ServeHTTP(w, r)
		case OrganizationServiceListSubscriptionPlansProcedure:
			organizationServiceListSubscriptionPlansHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.CreateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.GetOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.UpdateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.ListOrganizations is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeactivateOrganization(context.Context, *connect.Request[v1.DeactivateOrganizationRequest]) (*connect.Response[v1.DeactivateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.DeactivateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.CreateUser is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.GetUser is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.UpdateUser is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.ListUsers is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeactivateUser(context.Context, *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.DeactivateUser is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.CreateSubscription is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.GetSubscription is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateSubscription(context.Context, *connect.Request[v1.UpdateSubscriptionRequest]) (*connect.Response[v1.UpdateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.UpdateSubscription is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListSubscriptionPlans(context.Context, *connect.Request[v1.ListSubscriptionPlansRequest]) (*connect.Response[v1.ListSubscriptionPlansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.OrganizationService.ListSubscriptionPlans is not implemented"))
}
