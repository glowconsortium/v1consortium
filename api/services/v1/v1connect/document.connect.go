// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/document.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DocumentServiceName is the fully-qualified name of the DocumentService service.
	DocumentServiceName = "v1consortium.services.DocumentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DocumentServiceUploadDocumentProcedure is the fully-qualified name of the DocumentService's
	// UploadDocument RPC.
	DocumentServiceUploadDocumentProcedure = "/v1consortium.services.DocumentService/UploadDocument"
	// DocumentServiceGetDocumentProcedure is the fully-qualified name of the DocumentService's
	// GetDocument RPC.
	DocumentServiceGetDocumentProcedure = "/v1consortium.services.DocumentService/GetDocument"
	// DocumentServiceListDocumentsProcedure is the fully-qualified name of the DocumentService's
	// ListDocuments RPC.
	DocumentServiceListDocumentsProcedure = "/v1consortium.services.DocumentService/ListDocuments"
	// DocumentServiceUpdateDocumentProcedure is the fully-qualified name of the DocumentService's
	// UpdateDocument RPC.
	DocumentServiceUpdateDocumentProcedure = "/v1consortium.services.DocumentService/UpdateDocument"
	// DocumentServiceDeleteDocumentProcedure is the fully-qualified name of the DocumentService's
	// DeleteDocument RPC.
	DocumentServiceDeleteDocumentProcedure = "/v1consortium.services.DocumentService/DeleteDocument"
	// DocumentServiceGetDocumentVersionsProcedure is the fully-qualified name of the DocumentService's
	// GetDocumentVersions RPC.
	DocumentServiceGetDocumentVersionsProcedure = "/v1consortium.services.DocumentService/GetDocumentVersions"
	// DocumentServiceShareDocumentProcedure is the fully-qualified name of the DocumentService's
	// ShareDocument RPC.
	DocumentServiceShareDocumentProcedure = "/v1consortium.services.DocumentService/ShareDocument"
	// DocumentServiceGetSharedDocumentsProcedure is the fully-qualified name of the DocumentService's
	// GetSharedDocuments RPC.
	DocumentServiceGetSharedDocumentsProcedure = "/v1consortium.services.DocumentService/GetSharedDocuments"
	// DocumentServiceRevokeDocumentShareProcedure is the fully-qualified name of the DocumentService's
	// RevokeDocumentShare RPC.
	DocumentServiceRevokeDocumentShareProcedure = "/v1consortium.services.DocumentService/RevokeDocumentShare"
	// DocumentServiceSearchDocumentsProcedure is the fully-qualified name of the DocumentService's
	// SearchDocuments RPC.
	DocumentServiceSearchDocumentsProcedure = "/v1consortium.services.DocumentService/SearchDocuments"
	// DocumentServiceGetDocumentAnalyticsProcedure is the fully-qualified name of the DocumentService's
	// GetDocumentAnalytics RPC.
	DocumentServiceGetDocumentAnalyticsProcedure = "/v1consortium.services.DocumentService/GetDocumentAnalytics"
	// DocumentServiceGetDocumentRetentionStatusProcedure is the fully-qualified name of the
	// DocumentService's GetDocumentRetentionStatus RPC.
	DocumentServiceGetDocumentRetentionStatusProcedure = "/v1consortium.services.DocumentService/GetDocumentRetentionStatus"
	// DocumentServiceApplyRetentionPolicyProcedure is the fully-qualified name of the DocumentService's
	// ApplyRetentionPolicy RPC.
	DocumentServiceApplyRetentionPolicyProcedure = "/v1consortium.services.DocumentService/ApplyRetentionPolicy"
)

// DocumentServiceClient is a client for the v1consortium.services.DocumentService service.
type DocumentServiceClient interface {
	// Document Management
	UploadDocument(context.Context, *connect.Request[v1.UploadDocumentRequest]) (*connect.Response[v1.UploadDocumentResponse], error)
	GetDocument(context.Context, *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error)
	ListDocuments(context.Context, *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error)
	UpdateDocument(context.Context, *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error)
	DeleteDocument(context.Context, *connect.Request[v1.DeleteDocumentRequest]) (*connect.Response[v1.DeleteDocumentResponse], error)
	GetDocumentVersions(context.Context, *connect.Request[v1.GetDocumentVersionsRequest]) (*connect.Response[v1.GetDocumentVersionsResponse], error)
	// Document Sharing
	ShareDocument(context.Context, *connect.Request[v1.ShareDocumentRequest]) (*connect.Response[v1.ShareDocumentResponse], error)
	GetSharedDocuments(context.Context, *connect.Request[v1.GetSharedDocumentsRequest]) (*connect.Response[v1.GetSharedDocumentsResponse], error)
	RevokeDocumentShare(context.Context, *connect.Request[v1.RevokeDocumentShareRequest]) (*connect.Response[v1.RevokeDocumentShareResponse], error)
	// Document Search
	SearchDocuments(context.Context, *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error)
	// Document Analytics
	GetDocumentAnalytics(context.Context, *connect.Request[v1.GetDocumentAnalyticsRequest]) (*connect.Response[v1.GetDocumentAnalyticsResponse], error)
	// Document Compliance
	GetDocumentRetentionStatus(context.Context, *connect.Request[v1.GetDocumentRetentionStatusRequest]) (*connect.Response[v1.GetDocumentRetentionStatusResponse], error)
	ApplyRetentionPolicy(context.Context, *connect.Request[v1.ApplyRetentionPolicyRequest]) (*connect.Response[v1.ApplyRetentionPolicyResponse], error)
}

// NewDocumentServiceClient constructs a client for the v1consortium.services.DocumentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDocumentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DocumentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	documentServiceMethods := v1.File_services_v1_document_proto.Services().ByName("DocumentService").Methods()
	return &documentServiceClient{
		uploadDocument: connect.NewClient[v1.UploadDocumentRequest, v1.UploadDocumentResponse](
			httpClient,
			baseURL+DocumentServiceUploadDocumentProcedure,
			connect.WithSchema(documentServiceMethods.ByName("UploadDocument")),
			connect.WithClientOptions(opts...),
		),
		getDocument: connect.NewClient[v1.GetDocumentRequest, v1.GetDocumentResponse](
			httpClient,
			baseURL+DocumentServiceGetDocumentProcedure,
			connect.WithSchema(documentServiceMethods.ByName("GetDocument")),
			connect.WithClientOptions(opts...),
		),
		listDocuments: connect.NewClient[v1.ListDocumentsRequest, v1.ListDocumentsResponse](
			httpClient,
			baseURL+DocumentServiceListDocumentsProcedure,
			connect.WithSchema(documentServiceMethods.ByName("ListDocuments")),
			connect.WithClientOptions(opts...),
		),
		updateDocument: connect.NewClient[v1.UpdateDocumentRequest, v1.UpdateDocumentResponse](
			httpClient,
			baseURL+DocumentServiceUpdateDocumentProcedure,
			connect.WithSchema(documentServiceMethods.ByName("UpdateDocument")),
			connect.WithClientOptions(opts...),
		),
		deleteDocument: connect.NewClient[v1.DeleteDocumentRequest, v1.DeleteDocumentResponse](
			httpClient,
			baseURL+DocumentServiceDeleteDocumentProcedure,
			connect.WithSchema(documentServiceMethods.ByName("DeleteDocument")),
			connect.WithClientOptions(opts...),
		),
		getDocumentVersions: connect.NewClient[v1.GetDocumentVersionsRequest, v1.GetDocumentVersionsResponse](
			httpClient,
			baseURL+DocumentServiceGetDocumentVersionsProcedure,
			connect.WithSchema(documentServiceMethods.ByName("GetDocumentVersions")),
			connect.WithClientOptions(opts...),
		),
		shareDocument: connect.NewClient[v1.ShareDocumentRequest, v1.ShareDocumentResponse](
			httpClient,
			baseURL+DocumentServiceShareDocumentProcedure,
			connect.WithSchema(documentServiceMethods.ByName("ShareDocument")),
			connect.WithClientOptions(opts...),
		),
		getSharedDocuments: connect.NewClient[v1.GetSharedDocumentsRequest, v1.GetSharedDocumentsResponse](
			httpClient,
			baseURL+DocumentServiceGetSharedDocumentsProcedure,
			connect.WithSchema(documentServiceMethods.ByName("GetSharedDocuments")),
			connect.WithClientOptions(opts...),
		),
		revokeDocumentShare: connect.NewClient[v1.RevokeDocumentShareRequest, v1.RevokeDocumentShareResponse](
			httpClient,
			baseURL+DocumentServiceRevokeDocumentShareProcedure,
			connect.WithSchema(documentServiceMethods.ByName("RevokeDocumentShare")),
			connect.WithClientOptions(opts...),
		),
		searchDocuments: connect.NewClient[v1.SearchDocumentsRequest, v1.SearchDocumentsResponse](
			httpClient,
			baseURL+DocumentServiceSearchDocumentsProcedure,
			connect.WithSchema(documentServiceMethods.ByName("SearchDocuments")),
			connect.WithClientOptions(opts...),
		),
		getDocumentAnalytics: connect.NewClient[v1.GetDocumentAnalyticsRequest, v1.GetDocumentAnalyticsResponse](
			httpClient,
			baseURL+DocumentServiceGetDocumentAnalyticsProcedure,
			connect.WithSchema(documentServiceMethods.ByName("GetDocumentAnalytics")),
			connect.WithClientOptions(opts...),
		),
		getDocumentRetentionStatus: connect.NewClient[v1.GetDocumentRetentionStatusRequest, v1.GetDocumentRetentionStatusResponse](
			httpClient,
			baseURL+DocumentServiceGetDocumentRetentionStatusProcedure,
			connect.WithSchema(documentServiceMethods.ByName("GetDocumentRetentionStatus")),
			connect.WithClientOptions(opts...),
		),
		applyRetentionPolicy: connect.NewClient[v1.ApplyRetentionPolicyRequest, v1.ApplyRetentionPolicyResponse](
			httpClient,
			baseURL+DocumentServiceApplyRetentionPolicyProcedure,
			connect.WithSchema(documentServiceMethods.ByName("ApplyRetentionPolicy")),
			connect.WithClientOptions(opts...),
		),
	}
}

// documentServiceClient implements DocumentServiceClient.
type documentServiceClient struct {
	uploadDocument             *connect.Client[v1.UploadDocumentRequest, v1.UploadDocumentResponse]
	getDocument                *connect.Client[v1.GetDocumentRequest, v1.GetDocumentResponse]
	listDocuments              *connect.Client[v1.ListDocumentsRequest, v1.ListDocumentsResponse]
	updateDocument             *connect.Client[v1.UpdateDocumentRequest, v1.UpdateDocumentResponse]
	deleteDocument             *connect.Client[v1.DeleteDocumentRequest, v1.DeleteDocumentResponse]
	getDocumentVersions        *connect.Client[v1.GetDocumentVersionsRequest, v1.GetDocumentVersionsResponse]
	shareDocument              *connect.Client[v1.ShareDocumentRequest, v1.ShareDocumentResponse]
	getSharedDocuments         *connect.Client[v1.GetSharedDocumentsRequest, v1.GetSharedDocumentsResponse]
	revokeDocumentShare        *connect.Client[v1.RevokeDocumentShareRequest, v1.RevokeDocumentShareResponse]
	searchDocuments            *connect.Client[v1.SearchDocumentsRequest, v1.SearchDocumentsResponse]
	getDocumentAnalytics       *connect.Client[v1.GetDocumentAnalyticsRequest, v1.GetDocumentAnalyticsResponse]
	getDocumentRetentionStatus *connect.Client[v1.GetDocumentRetentionStatusRequest, v1.GetDocumentRetentionStatusResponse]
	applyRetentionPolicy       *connect.Client[v1.ApplyRetentionPolicyRequest, v1.ApplyRetentionPolicyResponse]
}

// UploadDocument calls v1consortium.services.DocumentService.UploadDocument.
func (c *documentServiceClient) UploadDocument(ctx context.Context, req *connect.Request[v1.UploadDocumentRequest]) (*connect.Response[v1.UploadDocumentResponse], error) {
	return c.uploadDocument.CallUnary(ctx, req)
}

// GetDocument calls v1consortium.services.DocumentService.GetDocument.
func (c *documentServiceClient) GetDocument(ctx context.Context, req *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error) {
	return c.getDocument.CallUnary(ctx, req)
}

// ListDocuments calls v1consortium.services.DocumentService.ListDocuments.
func (c *documentServiceClient) ListDocuments(ctx context.Context, req *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error) {
	return c.listDocuments.CallUnary(ctx, req)
}

// UpdateDocument calls v1consortium.services.DocumentService.UpdateDocument.
func (c *documentServiceClient) UpdateDocument(ctx context.Context, req *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error) {
	return c.updateDocument.CallUnary(ctx, req)
}

// DeleteDocument calls v1consortium.services.DocumentService.DeleteDocument.
func (c *documentServiceClient) DeleteDocument(ctx context.Context, req *connect.Request[v1.DeleteDocumentRequest]) (*connect.Response[v1.DeleteDocumentResponse], error) {
	return c.deleteDocument.CallUnary(ctx, req)
}

// GetDocumentVersions calls v1consortium.services.DocumentService.GetDocumentVersions.
func (c *documentServiceClient) GetDocumentVersions(ctx context.Context, req *connect.Request[v1.GetDocumentVersionsRequest]) (*connect.Response[v1.GetDocumentVersionsResponse], error) {
	return c.getDocumentVersions.CallUnary(ctx, req)
}

// ShareDocument calls v1consortium.services.DocumentService.ShareDocument.
func (c *documentServiceClient) ShareDocument(ctx context.Context, req *connect.Request[v1.ShareDocumentRequest]) (*connect.Response[v1.ShareDocumentResponse], error) {
	return c.shareDocument.CallUnary(ctx, req)
}

// GetSharedDocuments calls v1consortium.services.DocumentService.GetSharedDocuments.
func (c *documentServiceClient) GetSharedDocuments(ctx context.Context, req *connect.Request[v1.GetSharedDocumentsRequest]) (*connect.Response[v1.GetSharedDocumentsResponse], error) {
	return c.getSharedDocuments.CallUnary(ctx, req)
}

// RevokeDocumentShare calls v1consortium.services.DocumentService.RevokeDocumentShare.
func (c *documentServiceClient) RevokeDocumentShare(ctx context.Context, req *connect.Request[v1.RevokeDocumentShareRequest]) (*connect.Response[v1.RevokeDocumentShareResponse], error) {
	return c.revokeDocumentShare.CallUnary(ctx, req)
}

// SearchDocuments calls v1consortium.services.DocumentService.SearchDocuments.
func (c *documentServiceClient) SearchDocuments(ctx context.Context, req *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error) {
	return c.searchDocuments.CallUnary(ctx, req)
}

// GetDocumentAnalytics calls v1consortium.services.DocumentService.GetDocumentAnalytics.
func (c *documentServiceClient) GetDocumentAnalytics(ctx context.Context, req *connect.Request[v1.GetDocumentAnalyticsRequest]) (*connect.Response[v1.GetDocumentAnalyticsResponse], error) {
	return c.getDocumentAnalytics.CallUnary(ctx, req)
}

// GetDocumentRetentionStatus calls
// v1consortium.services.DocumentService.GetDocumentRetentionStatus.
func (c *documentServiceClient) GetDocumentRetentionStatus(ctx context.Context, req *connect.Request[v1.GetDocumentRetentionStatusRequest]) (*connect.Response[v1.GetDocumentRetentionStatusResponse], error) {
	return c.getDocumentRetentionStatus.CallUnary(ctx, req)
}

// ApplyRetentionPolicy calls v1consortium.services.DocumentService.ApplyRetentionPolicy.
func (c *documentServiceClient) ApplyRetentionPolicy(ctx context.Context, req *connect.Request[v1.ApplyRetentionPolicyRequest]) (*connect.Response[v1.ApplyRetentionPolicyResponse], error) {
	return c.applyRetentionPolicy.CallUnary(ctx, req)
}

// DocumentServiceHandler is an implementation of the v1consortium.services.DocumentService service.
type DocumentServiceHandler interface {
	// Document Management
	UploadDocument(context.Context, *connect.Request[v1.UploadDocumentRequest]) (*connect.Response[v1.UploadDocumentResponse], error)
	GetDocument(context.Context, *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error)
	ListDocuments(context.Context, *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error)
	UpdateDocument(context.Context, *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error)
	DeleteDocument(context.Context, *connect.Request[v1.DeleteDocumentRequest]) (*connect.Response[v1.DeleteDocumentResponse], error)
	GetDocumentVersions(context.Context, *connect.Request[v1.GetDocumentVersionsRequest]) (*connect.Response[v1.GetDocumentVersionsResponse], error)
	// Document Sharing
	ShareDocument(context.Context, *connect.Request[v1.ShareDocumentRequest]) (*connect.Response[v1.ShareDocumentResponse], error)
	GetSharedDocuments(context.Context, *connect.Request[v1.GetSharedDocumentsRequest]) (*connect.Response[v1.GetSharedDocumentsResponse], error)
	RevokeDocumentShare(context.Context, *connect.Request[v1.RevokeDocumentShareRequest]) (*connect.Response[v1.RevokeDocumentShareResponse], error)
	// Document Search
	SearchDocuments(context.Context, *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error)
	// Document Analytics
	GetDocumentAnalytics(context.Context, *connect.Request[v1.GetDocumentAnalyticsRequest]) (*connect.Response[v1.GetDocumentAnalyticsResponse], error)
	// Document Compliance
	GetDocumentRetentionStatus(context.Context, *connect.Request[v1.GetDocumentRetentionStatusRequest]) (*connect.Response[v1.GetDocumentRetentionStatusResponse], error)
	ApplyRetentionPolicy(context.Context, *connect.Request[v1.ApplyRetentionPolicyRequest]) (*connect.Response[v1.ApplyRetentionPolicyResponse], error)
}

// NewDocumentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDocumentServiceHandler(svc DocumentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	documentServiceMethods := v1.File_services_v1_document_proto.Services().ByName("DocumentService").Methods()
	documentServiceUploadDocumentHandler := connect.NewUnaryHandler(
		DocumentServiceUploadDocumentProcedure,
		svc.UploadDocument,
		connect.WithSchema(documentServiceMethods.ByName("UploadDocument")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceGetDocumentHandler := connect.NewUnaryHandler(
		DocumentServiceGetDocumentProcedure,
		svc.GetDocument,
		connect.WithSchema(documentServiceMethods.ByName("GetDocument")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceListDocumentsHandler := connect.NewUnaryHandler(
		DocumentServiceListDocumentsProcedure,
		svc.ListDocuments,
		connect.WithSchema(documentServiceMethods.ByName("ListDocuments")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceUpdateDocumentHandler := connect.NewUnaryHandler(
		DocumentServiceUpdateDocumentProcedure,
		svc.UpdateDocument,
		connect.WithSchema(documentServiceMethods.ByName("UpdateDocument")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceDeleteDocumentHandler := connect.NewUnaryHandler(
		DocumentServiceDeleteDocumentProcedure,
		svc.DeleteDocument,
		connect.WithSchema(documentServiceMethods.ByName("DeleteDocument")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceGetDocumentVersionsHandler := connect.NewUnaryHandler(
		DocumentServiceGetDocumentVersionsProcedure,
		svc.GetDocumentVersions,
		connect.WithSchema(documentServiceMethods.ByName("GetDocumentVersions")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceShareDocumentHandler := connect.NewUnaryHandler(
		DocumentServiceShareDocumentProcedure,
		svc.ShareDocument,
		connect.WithSchema(documentServiceMethods.ByName("ShareDocument")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceGetSharedDocumentsHandler := connect.NewUnaryHandler(
		DocumentServiceGetSharedDocumentsProcedure,
		svc.GetSharedDocuments,
		connect.WithSchema(documentServiceMethods.ByName("GetSharedDocuments")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceRevokeDocumentShareHandler := connect.NewUnaryHandler(
		DocumentServiceRevokeDocumentShareProcedure,
		svc.RevokeDocumentShare,
		connect.WithSchema(documentServiceMethods.ByName("RevokeDocumentShare")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceSearchDocumentsHandler := connect.NewUnaryHandler(
		DocumentServiceSearchDocumentsProcedure,
		svc.SearchDocuments,
		connect.WithSchema(documentServiceMethods.ByName("SearchDocuments")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceGetDocumentAnalyticsHandler := connect.NewUnaryHandler(
		DocumentServiceGetDocumentAnalyticsProcedure,
		svc.GetDocumentAnalytics,
		connect.WithSchema(documentServiceMethods.ByName("GetDocumentAnalytics")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceGetDocumentRetentionStatusHandler := connect.NewUnaryHandler(
		DocumentServiceGetDocumentRetentionStatusProcedure,
		svc.GetDocumentRetentionStatus,
		connect.WithSchema(documentServiceMethods.ByName("GetDocumentRetentionStatus")),
		connect.WithHandlerOptions(opts...),
	)
	documentServiceApplyRetentionPolicyHandler := connect.NewUnaryHandler(
		DocumentServiceApplyRetentionPolicyProcedure,
		svc.ApplyRetentionPolicy,
		connect.WithSchema(documentServiceMethods.ByName("ApplyRetentionPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.DocumentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DocumentServiceUploadDocumentProcedure:
			documentServiceUploadDocumentHandler.ServeHTTP(w, r)
		case DocumentServiceGetDocumentProcedure:
			documentServiceGetDocumentHandler.ServeHTTP(w, r)
		case DocumentServiceListDocumentsProcedure:
			documentServiceListDocumentsHandler.ServeHTTP(w, r)
		case DocumentServiceUpdateDocumentProcedure:
			documentServiceUpdateDocumentHandler.ServeHTTP(w, r)
		case DocumentServiceDeleteDocumentProcedure:
			documentServiceDeleteDocumentHandler.ServeHTTP(w, r)
		case DocumentServiceGetDocumentVersionsProcedure:
			documentServiceGetDocumentVersionsHandler.ServeHTTP(w, r)
		case DocumentServiceShareDocumentProcedure:
			documentServiceShareDocumentHandler.ServeHTTP(w, r)
		case DocumentServiceGetSharedDocumentsProcedure:
			documentServiceGetSharedDocumentsHandler.ServeHTTP(w, r)
		case DocumentServiceRevokeDocumentShareProcedure:
			documentServiceRevokeDocumentShareHandler.ServeHTTP(w, r)
		case DocumentServiceSearchDocumentsProcedure:
			documentServiceSearchDocumentsHandler.ServeHTTP(w, r)
		case DocumentServiceGetDocumentAnalyticsProcedure:
			documentServiceGetDocumentAnalyticsHandler.ServeHTTP(w, r)
		case DocumentServiceGetDocumentRetentionStatusProcedure:
			documentServiceGetDocumentRetentionStatusHandler.ServeHTTP(w, r)
		case DocumentServiceApplyRetentionPolicyProcedure:
			documentServiceApplyRetentionPolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDocumentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDocumentServiceHandler struct{}

func (UnimplementedDocumentServiceHandler) UploadDocument(context.Context, *connect.Request[v1.UploadDocumentRequest]) (*connect.Response[v1.UploadDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.UploadDocument is not implemented"))
}

func (UnimplementedDocumentServiceHandler) GetDocument(context.Context, *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.GetDocument is not implemented"))
}

func (UnimplementedDocumentServiceHandler) ListDocuments(context.Context, *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.ListDocuments is not implemented"))
}

func (UnimplementedDocumentServiceHandler) UpdateDocument(context.Context, *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.UpdateDocument is not implemented"))
}

func (UnimplementedDocumentServiceHandler) DeleteDocument(context.Context, *connect.Request[v1.DeleteDocumentRequest]) (*connect.Response[v1.DeleteDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.DeleteDocument is not implemented"))
}

func (UnimplementedDocumentServiceHandler) GetDocumentVersions(context.Context, *connect.Request[v1.GetDocumentVersionsRequest]) (*connect.Response[v1.GetDocumentVersionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.GetDocumentVersions is not implemented"))
}

func (UnimplementedDocumentServiceHandler) ShareDocument(context.Context, *connect.Request[v1.ShareDocumentRequest]) (*connect.Response[v1.ShareDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.ShareDocument is not implemented"))
}

func (UnimplementedDocumentServiceHandler) GetSharedDocuments(context.Context, *connect.Request[v1.GetSharedDocumentsRequest]) (*connect.Response[v1.GetSharedDocumentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.GetSharedDocuments is not implemented"))
}

func (UnimplementedDocumentServiceHandler) RevokeDocumentShare(context.Context, *connect.Request[v1.RevokeDocumentShareRequest]) (*connect.Response[v1.RevokeDocumentShareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.RevokeDocumentShare is not implemented"))
}

func (UnimplementedDocumentServiceHandler) SearchDocuments(context.Context, *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.SearchDocuments is not implemented"))
}

func (UnimplementedDocumentServiceHandler) GetDocumentAnalytics(context.Context, *connect.Request[v1.GetDocumentAnalyticsRequest]) (*connect.Response[v1.GetDocumentAnalyticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.GetDocumentAnalytics is not implemented"))
}

func (UnimplementedDocumentServiceHandler) GetDocumentRetentionStatus(context.Context, *connect.Request[v1.GetDocumentRetentionStatusRequest]) (*connect.Response[v1.GetDocumentRetentionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.GetDocumentRetentionStatus is not implemented"))
}

func (UnimplementedDocumentServiceHandler) ApplyRetentionPolicy(context.Context, *connect.Request[v1.ApplyRetentionPolicyRequest]) (*connect.Response[v1.ApplyRetentionPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DocumentService.ApplyRetentionPolicy is not implemented"))
}
