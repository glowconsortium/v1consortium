// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/notification.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "v1consortium.services.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceSendNotificationProcedure is the fully-qualified name of the
	// NotificationService's SendNotification RPC.
	NotificationServiceSendNotificationProcedure = "/v1consortium.services.NotificationService/SendNotification"
	// NotificationServiceGetNotificationProcedure is the fully-qualified name of the
	// NotificationService's GetNotification RPC.
	NotificationServiceGetNotificationProcedure = "/v1consortium.services.NotificationService/GetNotification"
	// NotificationServiceListNotificationsProcedure is the fully-qualified name of the
	// NotificationService's ListNotifications RPC.
	NotificationServiceListNotificationsProcedure = "/v1consortium.services.NotificationService/ListNotifications"
	// NotificationServiceMarkNotificationReadProcedure is the fully-qualified name of the
	// NotificationService's MarkNotificationRead RPC.
	NotificationServiceMarkNotificationReadProcedure = "/v1consortium.services.NotificationService/MarkNotificationRead"
	// NotificationServiceMarkAllNotificationsReadProcedure is the fully-qualified name of the
	// NotificationService's MarkAllNotificationsRead RPC.
	NotificationServiceMarkAllNotificationsReadProcedure = "/v1consortium.services.NotificationService/MarkAllNotificationsRead"
	// NotificationServiceCreateNotificationTemplateProcedure is the fully-qualified name of the
	// NotificationService's CreateNotificationTemplate RPC.
	NotificationServiceCreateNotificationTemplateProcedure = "/v1consortium.services.NotificationService/CreateNotificationTemplate"
	// NotificationServiceGetNotificationTemplateProcedure is the fully-qualified name of the
	// NotificationService's GetNotificationTemplate RPC.
	NotificationServiceGetNotificationTemplateProcedure = "/v1consortium.services.NotificationService/GetNotificationTemplate"
	// NotificationServiceListNotificationTemplatesProcedure is the fully-qualified name of the
	// NotificationService's ListNotificationTemplates RPC.
	NotificationServiceListNotificationTemplatesProcedure = "/v1consortium.services.NotificationService/ListNotificationTemplates"
	// NotificationServiceUpdateNotificationTemplateProcedure is the fully-qualified name of the
	// NotificationService's UpdateNotificationTemplate RPC.
	NotificationServiceUpdateNotificationTemplateProcedure = "/v1consortium.services.NotificationService/UpdateNotificationTemplate"
	// NotificationServiceGetNotificationPreferencesProcedure is the fully-qualified name of the
	// NotificationService's GetNotificationPreferences RPC.
	NotificationServiceGetNotificationPreferencesProcedure = "/v1consortium.services.NotificationService/GetNotificationPreferences"
	// NotificationServiceUpdateNotificationPreferencesProcedure is the fully-qualified name of the
	// NotificationService's UpdateNotificationPreferences RPC.
	NotificationServiceUpdateNotificationPreferencesProcedure = "/v1consortium.services.NotificationService/UpdateNotificationPreferences"
	// NotificationServiceSendBulkNotificationProcedure is the fully-qualified name of the
	// NotificationService's SendBulkNotification RPC.
	NotificationServiceSendBulkNotificationProcedure = "/v1consortium.services.NotificationService/SendBulkNotification"
	// NotificationServiceScheduleNotificationProcedure is the fully-qualified name of the
	// NotificationService's ScheduleNotification RPC.
	NotificationServiceScheduleNotificationProcedure = "/v1consortium.services.NotificationService/ScheduleNotification"
	// NotificationServiceListScheduledNotificationsProcedure is the fully-qualified name of the
	// NotificationService's ListScheduledNotifications RPC.
	NotificationServiceListScheduledNotificationsProcedure = "/v1consortium.services.NotificationService/ListScheduledNotifications"
	// NotificationServiceCancelScheduledNotificationProcedure is the fully-qualified name of the
	// NotificationService's CancelScheduledNotification RPC.
	NotificationServiceCancelScheduledNotificationProcedure = "/v1consortium.services.NotificationService/CancelScheduledNotification"
	// NotificationServiceGetNotificationAnalyticsProcedure is the fully-qualified name of the
	// NotificationService's GetNotificationAnalytics RPC.
	NotificationServiceGetNotificationAnalyticsProcedure = "/v1consortium.services.NotificationService/GetNotificationAnalytics"
)

// NotificationServiceClient is a client for the v1consortium.services.NotificationService service.
type NotificationServiceClient interface {
	// Basic Notification Management
	SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error)
	GetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error)
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	MarkNotificationRead(context.Context, *connect.Request[v1.MarkNotificationReadRequest]) (*connect.Response[v1.MarkNotificationReadResponse], error)
	MarkAllNotificationsRead(context.Context, *connect.Request[v1.MarkAllNotificationsReadRequest]) (*connect.Response[v1.MarkAllNotificationsReadResponse], error)
	// Template Management
	CreateNotificationTemplate(context.Context, *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error)
	GetNotificationTemplate(context.Context, *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error)
	ListNotificationTemplates(context.Context, *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error)
	UpdateNotificationTemplate(context.Context, *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error)
	// Preference Management
	GetNotificationPreferences(context.Context, *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error)
	UpdateNotificationPreferences(context.Context, *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error)
	// Bulk Operations
	SendBulkNotification(context.Context, *connect.Request[v1.SendBulkNotificationRequest]) (*connect.Response[v1.SendBulkNotificationResponse], error)
	// Scheduled Notifications
	ScheduleNotification(context.Context, *connect.Request[v1.ScheduleNotificationRequest]) (*connect.Response[v1.ScheduleNotificationResponse], error)
	ListScheduledNotifications(context.Context, *connect.Request[v1.ListScheduledNotificationsRequest]) (*connect.Response[v1.ListScheduledNotificationsResponse], error)
	CancelScheduledNotification(context.Context, *connect.Request[v1.CancelScheduledNotificationRequest]) (*connect.Response[v1.CancelScheduledNotificationResponse], error)
	// Analytics
	GetNotificationAnalytics(context.Context, *connect.Request[v1.GetNotificationAnalyticsRequest]) (*connect.Response[v1.GetNotificationAnalyticsResponse], error)
}

// NewNotificationServiceClient constructs a client for the
// v1consortium.services.NotificationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notificationServiceMethods := v1.File_services_v1_notification_proto.Services().ByName("NotificationService").Methods()
	return &notificationServiceClient{
		sendNotification: connect.NewClient[v1.SendNotificationRequest, v1.SendNotificationResponse](
			httpClient,
			baseURL+NotificationServiceSendNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("SendNotification")),
			connect.WithClientOptions(opts...),
		),
		getNotification: connect.NewClient[v1.GetNotificationRequest, v1.GetNotificationResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotification")),
			connect.WithClientOptions(opts...),
		),
		listNotifications: connect.NewClient[v1.ListNotificationsRequest, v1.ListNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceListNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListNotifications")),
			connect.WithClientOptions(opts...),
		),
		markNotificationRead: connect.NewClient[v1.MarkNotificationReadRequest, v1.MarkNotificationReadResponse](
			httpClient,
			baseURL+NotificationServiceMarkNotificationReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("MarkNotificationRead")),
			connect.WithClientOptions(opts...),
		),
		markAllNotificationsRead: connect.NewClient[v1.MarkAllNotificationsReadRequest, v1.MarkAllNotificationsReadResponse](
			httpClient,
			baseURL+NotificationServiceMarkAllNotificationsReadProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("MarkAllNotificationsRead")),
			connect.WithClientOptions(opts...),
		),
		createNotificationTemplate: connect.NewClient[v1.CreateNotificationTemplateRequest, v1.CreateNotificationTemplateResponse](
			httpClient,
			baseURL+NotificationServiceCreateNotificationTemplateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("CreateNotificationTemplate")),
			connect.WithClientOptions(opts...),
		),
		getNotificationTemplate: connect.NewClient[v1.GetNotificationTemplateRequest, v1.GetNotificationTemplateResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationTemplateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotificationTemplate")),
			connect.WithClientOptions(opts...),
		),
		listNotificationTemplates: connect.NewClient[v1.ListNotificationTemplatesRequest, v1.ListNotificationTemplatesResponse](
			httpClient,
			baseURL+NotificationServiceListNotificationTemplatesProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListNotificationTemplates")),
			connect.WithClientOptions(opts...),
		),
		updateNotificationTemplate: connect.NewClient[v1.UpdateNotificationTemplateRequest, v1.UpdateNotificationTemplateResponse](
			httpClient,
			baseURL+NotificationServiceUpdateNotificationTemplateProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationTemplate")),
			connect.WithClientOptions(opts...),
		),
		getNotificationPreferences: connect.NewClient[v1.GetNotificationPreferencesRequest, v1.GetNotificationPreferencesResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationPreferencesProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotificationPreferences")),
			connect.WithClientOptions(opts...),
		),
		updateNotificationPreferences: connect.NewClient[v1.UpdateNotificationPreferencesRequest, v1.UpdateNotificationPreferencesResponse](
			httpClient,
			baseURL+NotificationServiceUpdateNotificationPreferencesProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationPreferences")),
			connect.WithClientOptions(opts...),
		),
		sendBulkNotification: connect.NewClient[v1.SendBulkNotificationRequest, v1.SendBulkNotificationResponse](
			httpClient,
			baseURL+NotificationServiceSendBulkNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("SendBulkNotification")),
			connect.WithClientOptions(opts...),
		),
		scheduleNotification: connect.NewClient[v1.ScheduleNotificationRequest, v1.ScheduleNotificationResponse](
			httpClient,
			baseURL+NotificationServiceScheduleNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ScheduleNotification")),
			connect.WithClientOptions(opts...),
		),
		listScheduledNotifications: connect.NewClient[v1.ListScheduledNotificationsRequest, v1.ListScheduledNotificationsResponse](
			httpClient,
			baseURL+NotificationServiceListScheduledNotificationsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("ListScheduledNotifications")),
			connect.WithClientOptions(opts...),
		),
		cancelScheduledNotification: connect.NewClient[v1.CancelScheduledNotificationRequest, v1.CancelScheduledNotificationResponse](
			httpClient,
			baseURL+NotificationServiceCancelScheduledNotificationProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("CancelScheduledNotification")),
			connect.WithClientOptions(opts...),
		),
		getNotificationAnalytics: connect.NewClient[v1.GetNotificationAnalyticsRequest, v1.GetNotificationAnalyticsResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationAnalyticsProcedure,
			connect.WithSchema(notificationServiceMethods.ByName("GetNotificationAnalytics")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	sendNotification              *connect.Client[v1.SendNotificationRequest, v1.SendNotificationResponse]
	getNotification               *connect.Client[v1.GetNotificationRequest, v1.GetNotificationResponse]
	listNotifications             *connect.Client[v1.ListNotificationsRequest, v1.ListNotificationsResponse]
	markNotificationRead          *connect.Client[v1.MarkNotificationReadRequest, v1.MarkNotificationReadResponse]
	markAllNotificationsRead      *connect.Client[v1.MarkAllNotificationsReadRequest, v1.MarkAllNotificationsReadResponse]
	createNotificationTemplate    *connect.Client[v1.CreateNotificationTemplateRequest, v1.CreateNotificationTemplateResponse]
	getNotificationTemplate       *connect.Client[v1.GetNotificationTemplateRequest, v1.GetNotificationTemplateResponse]
	listNotificationTemplates     *connect.Client[v1.ListNotificationTemplatesRequest, v1.ListNotificationTemplatesResponse]
	updateNotificationTemplate    *connect.Client[v1.UpdateNotificationTemplateRequest, v1.UpdateNotificationTemplateResponse]
	getNotificationPreferences    *connect.Client[v1.GetNotificationPreferencesRequest, v1.GetNotificationPreferencesResponse]
	updateNotificationPreferences *connect.Client[v1.UpdateNotificationPreferencesRequest, v1.UpdateNotificationPreferencesResponse]
	sendBulkNotification          *connect.Client[v1.SendBulkNotificationRequest, v1.SendBulkNotificationResponse]
	scheduleNotification          *connect.Client[v1.ScheduleNotificationRequest, v1.ScheduleNotificationResponse]
	listScheduledNotifications    *connect.Client[v1.ListScheduledNotificationsRequest, v1.ListScheduledNotificationsResponse]
	cancelScheduledNotification   *connect.Client[v1.CancelScheduledNotificationRequest, v1.CancelScheduledNotificationResponse]
	getNotificationAnalytics      *connect.Client[v1.GetNotificationAnalyticsRequest, v1.GetNotificationAnalyticsResponse]
}

// SendNotification calls v1consortium.services.NotificationService.SendNotification.
func (c *notificationServiceClient) SendNotification(ctx context.Context, req *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error) {
	return c.sendNotification.CallUnary(ctx, req)
}

// GetNotification calls v1consortium.services.NotificationService.GetNotification.
func (c *notificationServiceClient) GetNotification(ctx context.Context, req *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error) {
	return c.getNotification.CallUnary(ctx, req)
}

// ListNotifications calls v1consortium.services.NotificationService.ListNotifications.
func (c *notificationServiceClient) ListNotifications(ctx context.Context, req *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return c.listNotifications.CallUnary(ctx, req)
}

// MarkNotificationRead calls v1consortium.services.NotificationService.MarkNotificationRead.
func (c *notificationServiceClient) MarkNotificationRead(ctx context.Context, req *connect.Request[v1.MarkNotificationReadRequest]) (*connect.Response[v1.MarkNotificationReadResponse], error) {
	return c.markNotificationRead.CallUnary(ctx, req)
}

// MarkAllNotificationsRead calls
// v1consortium.services.NotificationService.MarkAllNotificationsRead.
func (c *notificationServiceClient) MarkAllNotificationsRead(ctx context.Context, req *connect.Request[v1.MarkAllNotificationsReadRequest]) (*connect.Response[v1.MarkAllNotificationsReadResponse], error) {
	return c.markAllNotificationsRead.CallUnary(ctx, req)
}

// CreateNotificationTemplate calls
// v1consortium.services.NotificationService.CreateNotificationTemplate.
func (c *notificationServiceClient) CreateNotificationTemplate(ctx context.Context, req *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error) {
	return c.createNotificationTemplate.CallUnary(ctx, req)
}

// GetNotificationTemplate calls v1consortium.services.NotificationService.GetNotificationTemplate.
func (c *notificationServiceClient) GetNotificationTemplate(ctx context.Context, req *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error) {
	return c.getNotificationTemplate.CallUnary(ctx, req)
}

// ListNotificationTemplates calls
// v1consortium.services.NotificationService.ListNotificationTemplates.
func (c *notificationServiceClient) ListNotificationTemplates(ctx context.Context, req *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error) {
	return c.listNotificationTemplates.CallUnary(ctx, req)
}

// UpdateNotificationTemplate calls
// v1consortium.services.NotificationService.UpdateNotificationTemplate.
func (c *notificationServiceClient) UpdateNotificationTemplate(ctx context.Context, req *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error) {
	return c.updateNotificationTemplate.CallUnary(ctx, req)
}

// GetNotificationPreferences calls
// v1consortium.services.NotificationService.GetNotificationPreferences.
func (c *notificationServiceClient) GetNotificationPreferences(ctx context.Context, req *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error) {
	return c.getNotificationPreferences.CallUnary(ctx, req)
}

// UpdateNotificationPreferences calls
// v1consortium.services.NotificationService.UpdateNotificationPreferences.
func (c *notificationServiceClient) UpdateNotificationPreferences(ctx context.Context, req *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error) {
	return c.updateNotificationPreferences.CallUnary(ctx, req)
}

// SendBulkNotification calls v1consortium.services.NotificationService.SendBulkNotification.
func (c *notificationServiceClient) SendBulkNotification(ctx context.Context, req *connect.Request[v1.SendBulkNotificationRequest]) (*connect.Response[v1.SendBulkNotificationResponse], error) {
	return c.sendBulkNotification.CallUnary(ctx, req)
}

// ScheduleNotification calls v1consortium.services.NotificationService.ScheduleNotification.
func (c *notificationServiceClient) ScheduleNotification(ctx context.Context, req *connect.Request[v1.ScheduleNotificationRequest]) (*connect.Response[v1.ScheduleNotificationResponse], error) {
	return c.scheduleNotification.CallUnary(ctx, req)
}

// ListScheduledNotifications calls
// v1consortium.services.NotificationService.ListScheduledNotifications.
func (c *notificationServiceClient) ListScheduledNotifications(ctx context.Context, req *connect.Request[v1.ListScheduledNotificationsRequest]) (*connect.Response[v1.ListScheduledNotificationsResponse], error) {
	return c.listScheduledNotifications.CallUnary(ctx, req)
}

// CancelScheduledNotification calls
// v1consortium.services.NotificationService.CancelScheduledNotification.
func (c *notificationServiceClient) CancelScheduledNotification(ctx context.Context, req *connect.Request[v1.CancelScheduledNotificationRequest]) (*connect.Response[v1.CancelScheduledNotificationResponse], error) {
	return c.cancelScheduledNotification.CallUnary(ctx, req)
}

// GetNotificationAnalytics calls
// v1consortium.services.NotificationService.GetNotificationAnalytics.
func (c *notificationServiceClient) GetNotificationAnalytics(ctx context.Context, req *connect.Request[v1.GetNotificationAnalyticsRequest]) (*connect.Response[v1.GetNotificationAnalyticsResponse], error) {
	return c.getNotificationAnalytics.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the v1consortium.services.NotificationService
// service.
type NotificationServiceHandler interface {
	// Basic Notification Management
	SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error)
	GetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error)
	ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error)
	MarkNotificationRead(context.Context, *connect.Request[v1.MarkNotificationReadRequest]) (*connect.Response[v1.MarkNotificationReadResponse], error)
	MarkAllNotificationsRead(context.Context, *connect.Request[v1.MarkAllNotificationsReadRequest]) (*connect.Response[v1.MarkAllNotificationsReadResponse], error)
	// Template Management
	CreateNotificationTemplate(context.Context, *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error)
	GetNotificationTemplate(context.Context, *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error)
	ListNotificationTemplates(context.Context, *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error)
	UpdateNotificationTemplate(context.Context, *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error)
	// Preference Management
	GetNotificationPreferences(context.Context, *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error)
	UpdateNotificationPreferences(context.Context, *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error)
	// Bulk Operations
	SendBulkNotification(context.Context, *connect.Request[v1.SendBulkNotificationRequest]) (*connect.Response[v1.SendBulkNotificationResponse], error)
	// Scheduled Notifications
	ScheduleNotification(context.Context, *connect.Request[v1.ScheduleNotificationRequest]) (*connect.Response[v1.ScheduleNotificationResponse], error)
	ListScheduledNotifications(context.Context, *connect.Request[v1.ListScheduledNotificationsRequest]) (*connect.Response[v1.ListScheduledNotificationsResponse], error)
	CancelScheduledNotification(context.Context, *connect.Request[v1.CancelScheduledNotificationRequest]) (*connect.Response[v1.CancelScheduledNotificationResponse], error)
	// Analytics
	GetNotificationAnalytics(context.Context, *connect.Request[v1.GetNotificationAnalyticsRequest]) (*connect.Response[v1.GetNotificationAnalyticsResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notificationServiceMethods := v1.File_services_v1_notification_proto.Services().ByName("NotificationService").Methods()
	notificationServiceSendNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceSendNotificationProcedure,
		svc.SendNotification,
		connect.WithSchema(notificationServiceMethods.ByName("SendNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationProcedure,
		svc.GetNotification,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceListNotificationsProcedure,
		svc.ListNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("ListNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceMarkNotificationReadHandler := connect.NewUnaryHandler(
		NotificationServiceMarkNotificationReadProcedure,
		svc.MarkNotificationRead,
		connect.WithSchema(notificationServiceMethods.ByName("MarkNotificationRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceMarkAllNotificationsReadHandler := connect.NewUnaryHandler(
		NotificationServiceMarkAllNotificationsReadProcedure,
		svc.MarkAllNotificationsRead,
		connect.WithSchema(notificationServiceMethods.ByName("MarkAllNotificationsRead")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceCreateNotificationTemplateHandler := connect.NewUnaryHandler(
		NotificationServiceCreateNotificationTemplateProcedure,
		svc.CreateNotificationTemplate,
		connect.WithSchema(notificationServiceMethods.ByName("CreateNotificationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetNotificationTemplateHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationTemplateProcedure,
		svc.GetNotificationTemplate,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotificationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListNotificationTemplatesHandler := connect.NewUnaryHandler(
		NotificationServiceListNotificationTemplatesProcedure,
		svc.ListNotificationTemplates,
		connect.WithSchema(notificationServiceMethods.ByName("ListNotificationTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUpdateNotificationTemplateHandler := connect.NewUnaryHandler(
		NotificationServiceUpdateNotificationTemplateProcedure,
		svc.UpdateNotificationTemplate,
		connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetNotificationPreferencesHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationPreferencesProcedure,
		svc.GetNotificationPreferences,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotificationPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceUpdateNotificationPreferencesHandler := connect.NewUnaryHandler(
		NotificationServiceUpdateNotificationPreferencesProcedure,
		svc.UpdateNotificationPreferences,
		connect.WithSchema(notificationServiceMethods.ByName("UpdateNotificationPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceSendBulkNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceSendBulkNotificationProcedure,
		svc.SendBulkNotification,
		connect.WithSchema(notificationServiceMethods.ByName("SendBulkNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceScheduleNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceScheduleNotificationProcedure,
		svc.ScheduleNotification,
		connect.WithSchema(notificationServiceMethods.ByName("ScheduleNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceListScheduledNotificationsHandler := connect.NewUnaryHandler(
		NotificationServiceListScheduledNotificationsProcedure,
		svc.ListScheduledNotifications,
		connect.WithSchema(notificationServiceMethods.ByName("ListScheduledNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceCancelScheduledNotificationHandler := connect.NewUnaryHandler(
		NotificationServiceCancelScheduledNotificationProcedure,
		svc.CancelScheduledNotification,
		connect.WithSchema(notificationServiceMethods.ByName("CancelScheduledNotification")),
		connect.WithHandlerOptions(opts...),
	)
	notificationServiceGetNotificationAnalyticsHandler := connect.NewUnaryHandler(
		NotificationServiceGetNotificationAnalyticsProcedure,
		svc.GetNotificationAnalytics,
		connect.WithSchema(notificationServiceMethods.ByName("GetNotificationAnalytics")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceSendNotificationProcedure:
			notificationServiceSendNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceGetNotificationProcedure:
			notificationServiceGetNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceListNotificationsProcedure:
			notificationServiceListNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceMarkNotificationReadProcedure:
			notificationServiceMarkNotificationReadHandler.ServeHTTP(w, r)
		case NotificationServiceMarkAllNotificationsReadProcedure:
			notificationServiceMarkAllNotificationsReadHandler.ServeHTTP(w, r)
		case NotificationServiceCreateNotificationTemplateProcedure:
			notificationServiceCreateNotificationTemplateHandler.ServeHTTP(w, r)
		case NotificationServiceGetNotificationTemplateProcedure:
			notificationServiceGetNotificationTemplateHandler.ServeHTTP(w, r)
		case NotificationServiceListNotificationTemplatesProcedure:
			notificationServiceListNotificationTemplatesHandler.ServeHTTP(w, r)
		case NotificationServiceUpdateNotificationTemplateProcedure:
			notificationServiceUpdateNotificationTemplateHandler.ServeHTTP(w, r)
		case NotificationServiceGetNotificationPreferencesProcedure:
			notificationServiceGetNotificationPreferencesHandler.ServeHTTP(w, r)
		case NotificationServiceUpdateNotificationPreferencesProcedure:
			notificationServiceUpdateNotificationPreferencesHandler.ServeHTTP(w, r)
		case NotificationServiceSendBulkNotificationProcedure:
			notificationServiceSendBulkNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceScheduleNotificationProcedure:
			notificationServiceScheduleNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceListScheduledNotificationsProcedure:
			notificationServiceListScheduledNotificationsHandler.ServeHTTP(w, r)
		case NotificationServiceCancelScheduledNotificationProcedure:
			notificationServiceCancelScheduledNotificationHandler.ServeHTTP(w, r)
		case NotificationServiceGetNotificationAnalyticsProcedure:
			notificationServiceGetNotificationAnalyticsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) SendNotification(context.Context, *connect.Request[v1.SendNotificationRequest]) (*connect.Response[v1.SendNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.SendNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.GetNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListNotifications(context.Context, *connect.Request[v1.ListNotificationsRequest]) (*connect.Response[v1.ListNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.ListNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) MarkNotificationRead(context.Context, *connect.Request[v1.MarkNotificationReadRequest]) (*connect.Response[v1.MarkNotificationReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.MarkNotificationRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) MarkAllNotificationsRead(context.Context, *connect.Request[v1.MarkAllNotificationsReadRequest]) (*connect.Response[v1.MarkAllNotificationsReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.MarkAllNotificationsRead is not implemented"))
}

func (UnimplementedNotificationServiceHandler) CreateNotificationTemplate(context.Context, *connect.Request[v1.CreateNotificationTemplateRequest]) (*connect.Response[v1.CreateNotificationTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.CreateNotificationTemplate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotificationTemplate(context.Context, *connect.Request[v1.GetNotificationTemplateRequest]) (*connect.Response[v1.GetNotificationTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.GetNotificationTemplate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListNotificationTemplates(context.Context, *connect.Request[v1.ListNotificationTemplatesRequest]) (*connect.Response[v1.ListNotificationTemplatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.ListNotificationTemplates is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UpdateNotificationTemplate(context.Context, *connect.Request[v1.UpdateNotificationTemplateRequest]) (*connect.Response[v1.UpdateNotificationTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.UpdateNotificationTemplate is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotificationPreferences(context.Context, *connect.Request[v1.GetNotificationPreferencesRequest]) (*connect.Response[v1.GetNotificationPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.GetNotificationPreferences is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UpdateNotificationPreferences(context.Context, *connect.Request[v1.UpdateNotificationPreferencesRequest]) (*connect.Response[v1.UpdateNotificationPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.UpdateNotificationPreferences is not implemented"))
}

func (UnimplementedNotificationServiceHandler) SendBulkNotification(context.Context, *connect.Request[v1.SendBulkNotificationRequest]) (*connect.Response[v1.SendBulkNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.SendBulkNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ScheduleNotification(context.Context, *connect.Request[v1.ScheduleNotificationRequest]) (*connect.Response[v1.ScheduleNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.ScheduleNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) ListScheduledNotifications(context.Context, *connect.Request[v1.ListScheduledNotificationsRequest]) (*connect.Response[v1.ListScheduledNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.ListScheduledNotifications is not implemented"))
}

func (UnimplementedNotificationServiceHandler) CancelScheduledNotification(context.Context, *connect.Request[v1.CancelScheduledNotificationRequest]) (*connect.Response[v1.CancelScheduledNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.CancelScheduledNotification is not implemented"))
}

func (UnimplementedNotificationServiceHandler) GetNotificationAnalytics(context.Context, *connect.Request[v1.GetNotificationAnalyticsRequest]) (*connect.Response[v1.GetNotificationAnalyticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.NotificationService.GetNotificationAnalytics is not implemented"))
}
