// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/dot_physical.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DOTPhysicalServiceName is the fully-qualified name of the DOTPhysicalService service.
	DOTPhysicalServiceName = "v1consortium.services.DOTPhysicalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DOTPhysicalServiceScheduleDOTPhysicalProcedure is the fully-qualified name of the
	// DOTPhysicalService's ScheduleDOTPhysical RPC.
	DOTPhysicalServiceScheduleDOTPhysicalProcedure = "/v1consortium.services.DOTPhysicalService/ScheduleDOTPhysical"
	// DOTPhysicalServiceGetDOTPhysicalProcedure is the fully-qualified name of the DOTPhysicalService's
	// GetDOTPhysical RPC.
	DOTPhysicalServiceGetDOTPhysicalProcedure = "/v1consortium.services.DOTPhysicalService/GetDOTPhysical"
	// DOTPhysicalServiceUpdateDOTPhysicalProcedure is the fully-qualified name of the
	// DOTPhysicalService's UpdateDOTPhysical RPC.
	DOTPhysicalServiceUpdateDOTPhysicalProcedure = "/v1consortium.services.DOTPhysicalService/UpdateDOTPhysical"
	// DOTPhysicalServiceListDOTPhysicalsProcedure is the fully-qualified name of the
	// DOTPhysicalService's ListDOTPhysicals RPC.
	DOTPhysicalServiceListDOTPhysicalsProcedure = "/v1consortium.services.DOTPhysicalService/ListDOTPhysicals"
	// DOTPhysicalServiceRegisterMedicalExaminerProcedure is the fully-qualified name of the
	// DOTPhysicalService's RegisterMedicalExaminer RPC.
	DOTPhysicalServiceRegisterMedicalExaminerProcedure = "/v1consortium.services.DOTPhysicalService/RegisterMedicalExaminer"
	// DOTPhysicalServiceGetMedicalExaminerProcedure is the fully-qualified name of the
	// DOTPhysicalService's GetMedicalExaminer RPC.
	DOTPhysicalServiceGetMedicalExaminerProcedure = "/v1consortium.services.DOTPhysicalService/GetMedicalExaminer"
	// DOTPhysicalServiceListMedicalExaminersProcedure is the fully-qualified name of the
	// DOTPhysicalService's ListMedicalExaminers RPC.
	DOTPhysicalServiceListMedicalExaminersProcedure = "/v1consortium.services.DOTPhysicalService/ListMedicalExaminers"
	// DOTPhysicalServiceGenerateCertificateProcedure is the fully-qualified name of the
	// DOTPhysicalService's GenerateCertificate RPC.
	DOTPhysicalServiceGenerateCertificateProcedure = "/v1consortium.services.DOTPhysicalService/GenerateCertificate"
	// DOTPhysicalServiceValidateCertificateProcedure is the fully-qualified name of the
	// DOTPhysicalService's ValidateCertificate RPC.
	DOTPhysicalServiceValidateCertificateProcedure = "/v1consortium.services.DOTPhysicalService/ValidateCertificate"
	// DOTPhysicalServiceGetExpiringCertificatesProcedure is the fully-qualified name of the
	// DOTPhysicalService's GetExpiringCertificates RPC.
	DOTPhysicalServiceGetExpiringCertificatesProcedure = "/v1consortium.services.DOTPhysicalService/GetExpiringCertificates"
	// DOTPhysicalServiceSetExpirationReminderProcedure is the fully-qualified name of the
	// DOTPhysicalService's SetExpirationReminder RPC.
	DOTPhysicalServiceSetExpirationReminderProcedure = "/v1consortium.services.DOTPhysicalService/SetExpirationReminder"
)

// DOTPhysicalServiceClient is a client for the v1consortium.services.DOTPhysicalService service.
type DOTPhysicalServiceClient interface {
	// DOT Physical Management
	ScheduleDOTPhysical(context.Context, *connect.Request[v1.ScheduleDOTPhysicalRequest]) (*connect.Response[v1.ScheduleDOTPhysicalResponse], error)
	GetDOTPhysical(context.Context, *connect.Request[v1.GetDOTPhysicalRequest]) (*connect.Response[v1.GetDOTPhysicalResponse], error)
	UpdateDOTPhysical(context.Context, *connect.Request[v1.UpdateDOTPhysicalRequest]) (*connect.Response[v1.UpdateDOTPhysicalResponse], error)
	ListDOTPhysicals(context.Context, *connect.Request[v1.ListDOTPhysicalsRequest]) (*connect.Response[v1.ListDOTPhysicalsResponse], error)
	// Medical Examiner Management
	RegisterMedicalExaminer(context.Context, *connect.Request[v1.RegisterMedicalExaminerRequest]) (*connect.Response[v1.RegisterMedicalExaminerResponse], error)
	GetMedicalExaminer(context.Context, *connect.Request[v1.GetMedicalExaminerRequest]) (*connect.Response[v1.GetMedicalExaminerResponse], error)
	ListMedicalExaminers(context.Context, *connect.Request[v1.ListMedicalExaminersRequest]) (*connect.Response[v1.ListMedicalExaminersResponse], error)
	// Certificate Management
	GenerateCertificate(context.Context, *connect.Request[v1.GenerateCertificateRequest]) (*connect.Response[v1.GenerateCertificateResponse], error)
	ValidateCertificate(context.Context, *connect.Request[v1.ValidateCertificateRequest]) (*connect.Response[v1.ValidateCertificateResponse], error)
	// Expiration Monitoring
	GetExpiringCertificates(context.Context, *connect.Request[v1.GetExpiringCertificatesRequest]) (*connect.Response[v1.GetExpiringCertificatesResponse], error)
	SetExpirationReminder(context.Context, *connect.Request[v1.SetExpirationReminderRequest]) (*connect.Response[v1.SetExpirationReminderResponse], error)
}

// NewDOTPhysicalServiceClient constructs a client for the v1consortium.services.DOTPhysicalService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDOTPhysicalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DOTPhysicalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dOTPhysicalServiceMethods := v1.File_services_v1_dot_physical_proto.Services().ByName("DOTPhysicalService").Methods()
	return &dOTPhysicalServiceClient{
		scheduleDOTPhysical: connect.NewClient[v1.ScheduleDOTPhysicalRequest, v1.ScheduleDOTPhysicalResponse](
			httpClient,
			baseURL+DOTPhysicalServiceScheduleDOTPhysicalProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("ScheduleDOTPhysical")),
			connect.WithClientOptions(opts...),
		),
		getDOTPhysical: connect.NewClient[v1.GetDOTPhysicalRequest, v1.GetDOTPhysicalResponse](
			httpClient,
			baseURL+DOTPhysicalServiceGetDOTPhysicalProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("GetDOTPhysical")),
			connect.WithClientOptions(opts...),
		),
		updateDOTPhysical: connect.NewClient[v1.UpdateDOTPhysicalRequest, v1.UpdateDOTPhysicalResponse](
			httpClient,
			baseURL+DOTPhysicalServiceUpdateDOTPhysicalProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("UpdateDOTPhysical")),
			connect.WithClientOptions(opts...),
		),
		listDOTPhysicals: connect.NewClient[v1.ListDOTPhysicalsRequest, v1.ListDOTPhysicalsResponse](
			httpClient,
			baseURL+DOTPhysicalServiceListDOTPhysicalsProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("ListDOTPhysicals")),
			connect.WithClientOptions(opts...),
		),
		registerMedicalExaminer: connect.NewClient[v1.RegisterMedicalExaminerRequest, v1.RegisterMedicalExaminerResponse](
			httpClient,
			baseURL+DOTPhysicalServiceRegisterMedicalExaminerProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("RegisterMedicalExaminer")),
			connect.WithClientOptions(opts...),
		),
		getMedicalExaminer: connect.NewClient[v1.GetMedicalExaminerRequest, v1.GetMedicalExaminerResponse](
			httpClient,
			baseURL+DOTPhysicalServiceGetMedicalExaminerProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("GetMedicalExaminer")),
			connect.WithClientOptions(opts...),
		),
		listMedicalExaminers: connect.NewClient[v1.ListMedicalExaminersRequest, v1.ListMedicalExaminersResponse](
			httpClient,
			baseURL+DOTPhysicalServiceListMedicalExaminersProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("ListMedicalExaminers")),
			connect.WithClientOptions(opts...),
		),
		generateCertificate: connect.NewClient[v1.GenerateCertificateRequest, v1.GenerateCertificateResponse](
			httpClient,
			baseURL+DOTPhysicalServiceGenerateCertificateProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("GenerateCertificate")),
			connect.WithClientOptions(opts...),
		),
		validateCertificate: connect.NewClient[v1.ValidateCertificateRequest, v1.ValidateCertificateResponse](
			httpClient,
			baseURL+DOTPhysicalServiceValidateCertificateProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("ValidateCertificate")),
			connect.WithClientOptions(opts...),
		),
		getExpiringCertificates: connect.NewClient[v1.GetExpiringCertificatesRequest, v1.GetExpiringCertificatesResponse](
			httpClient,
			baseURL+DOTPhysicalServiceGetExpiringCertificatesProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("GetExpiringCertificates")),
			connect.WithClientOptions(opts...),
		),
		setExpirationReminder: connect.NewClient[v1.SetExpirationReminderRequest, v1.SetExpirationReminderResponse](
			httpClient,
			baseURL+DOTPhysicalServiceSetExpirationReminderProcedure,
			connect.WithSchema(dOTPhysicalServiceMethods.ByName("SetExpirationReminder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dOTPhysicalServiceClient implements DOTPhysicalServiceClient.
type dOTPhysicalServiceClient struct {
	scheduleDOTPhysical     *connect.Client[v1.ScheduleDOTPhysicalRequest, v1.ScheduleDOTPhysicalResponse]
	getDOTPhysical          *connect.Client[v1.GetDOTPhysicalRequest, v1.GetDOTPhysicalResponse]
	updateDOTPhysical       *connect.Client[v1.UpdateDOTPhysicalRequest, v1.UpdateDOTPhysicalResponse]
	listDOTPhysicals        *connect.Client[v1.ListDOTPhysicalsRequest, v1.ListDOTPhysicalsResponse]
	registerMedicalExaminer *connect.Client[v1.RegisterMedicalExaminerRequest, v1.RegisterMedicalExaminerResponse]
	getMedicalExaminer      *connect.Client[v1.GetMedicalExaminerRequest, v1.GetMedicalExaminerResponse]
	listMedicalExaminers    *connect.Client[v1.ListMedicalExaminersRequest, v1.ListMedicalExaminersResponse]
	generateCertificate     *connect.Client[v1.GenerateCertificateRequest, v1.GenerateCertificateResponse]
	validateCertificate     *connect.Client[v1.ValidateCertificateRequest, v1.ValidateCertificateResponse]
	getExpiringCertificates *connect.Client[v1.GetExpiringCertificatesRequest, v1.GetExpiringCertificatesResponse]
	setExpirationReminder   *connect.Client[v1.SetExpirationReminderRequest, v1.SetExpirationReminderResponse]
}

// ScheduleDOTPhysical calls v1consortium.services.DOTPhysicalService.ScheduleDOTPhysical.
func (c *dOTPhysicalServiceClient) ScheduleDOTPhysical(ctx context.Context, req *connect.Request[v1.ScheduleDOTPhysicalRequest]) (*connect.Response[v1.ScheduleDOTPhysicalResponse], error) {
	return c.scheduleDOTPhysical.CallUnary(ctx, req)
}

// GetDOTPhysical calls v1consortium.services.DOTPhysicalService.GetDOTPhysical.
func (c *dOTPhysicalServiceClient) GetDOTPhysical(ctx context.Context, req *connect.Request[v1.GetDOTPhysicalRequest]) (*connect.Response[v1.GetDOTPhysicalResponse], error) {
	return c.getDOTPhysical.CallUnary(ctx, req)
}

// UpdateDOTPhysical calls v1consortium.services.DOTPhysicalService.UpdateDOTPhysical.
func (c *dOTPhysicalServiceClient) UpdateDOTPhysical(ctx context.Context, req *connect.Request[v1.UpdateDOTPhysicalRequest]) (*connect.Response[v1.UpdateDOTPhysicalResponse], error) {
	return c.updateDOTPhysical.CallUnary(ctx, req)
}

// ListDOTPhysicals calls v1consortium.services.DOTPhysicalService.ListDOTPhysicals.
func (c *dOTPhysicalServiceClient) ListDOTPhysicals(ctx context.Context, req *connect.Request[v1.ListDOTPhysicalsRequest]) (*connect.Response[v1.ListDOTPhysicalsResponse], error) {
	return c.listDOTPhysicals.CallUnary(ctx, req)
}

// RegisterMedicalExaminer calls v1consortium.services.DOTPhysicalService.RegisterMedicalExaminer.
func (c *dOTPhysicalServiceClient) RegisterMedicalExaminer(ctx context.Context, req *connect.Request[v1.RegisterMedicalExaminerRequest]) (*connect.Response[v1.RegisterMedicalExaminerResponse], error) {
	return c.registerMedicalExaminer.CallUnary(ctx, req)
}

// GetMedicalExaminer calls v1consortium.services.DOTPhysicalService.GetMedicalExaminer.
func (c *dOTPhysicalServiceClient) GetMedicalExaminer(ctx context.Context, req *connect.Request[v1.GetMedicalExaminerRequest]) (*connect.Response[v1.GetMedicalExaminerResponse], error) {
	return c.getMedicalExaminer.CallUnary(ctx, req)
}

// ListMedicalExaminers calls v1consortium.services.DOTPhysicalService.ListMedicalExaminers.
func (c *dOTPhysicalServiceClient) ListMedicalExaminers(ctx context.Context, req *connect.Request[v1.ListMedicalExaminersRequest]) (*connect.Response[v1.ListMedicalExaminersResponse], error) {
	return c.listMedicalExaminers.CallUnary(ctx, req)
}

// GenerateCertificate calls v1consortium.services.DOTPhysicalService.GenerateCertificate.
func (c *dOTPhysicalServiceClient) GenerateCertificate(ctx context.Context, req *connect.Request[v1.GenerateCertificateRequest]) (*connect.Response[v1.GenerateCertificateResponse], error) {
	return c.generateCertificate.CallUnary(ctx, req)
}

// ValidateCertificate calls v1consortium.services.DOTPhysicalService.ValidateCertificate.
func (c *dOTPhysicalServiceClient) ValidateCertificate(ctx context.Context, req *connect.Request[v1.ValidateCertificateRequest]) (*connect.Response[v1.ValidateCertificateResponse], error) {
	return c.validateCertificate.CallUnary(ctx, req)
}

// GetExpiringCertificates calls v1consortium.services.DOTPhysicalService.GetExpiringCertificates.
func (c *dOTPhysicalServiceClient) GetExpiringCertificates(ctx context.Context, req *connect.Request[v1.GetExpiringCertificatesRequest]) (*connect.Response[v1.GetExpiringCertificatesResponse], error) {
	return c.getExpiringCertificates.CallUnary(ctx, req)
}

// SetExpirationReminder calls v1consortium.services.DOTPhysicalService.SetExpirationReminder.
func (c *dOTPhysicalServiceClient) SetExpirationReminder(ctx context.Context, req *connect.Request[v1.SetExpirationReminderRequest]) (*connect.Response[v1.SetExpirationReminderResponse], error) {
	return c.setExpirationReminder.CallUnary(ctx, req)
}

// DOTPhysicalServiceHandler is an implementation of the v1consortium.services.DOTPhysicalService
// service.
type DOTPhysicalServiceHandler interface {
	// DOT Physical Management
	ScheduleDOTPhysical(context.Context, *connect.Request[v1.ScheduleDOTPhysicalRequest]) (*connect.Response[v1.ScheduleDOTPhysicalResponse], error)
	GetDOTPhysical(context.Context, *connect.Request[v1.GetDOTPhysicalRequest]) (*connect.Response[v1.GetDOTPhysicalResponse], error)
	UpdateDOTPhysical(context.Context, *connect.Request[v1.UpdateDOTPhysicalRequest]) (*connect.Response[v1.UpdateDOTPhysicalResponse], error)
	ListDOTPhysicals(context.Context, *connect.Request[v1.ListDOTPhysicalsRequest]) (*connect.Response[v1.ListDOTPhysicalsResponse], error)
	// Medical Examiner Management
	RegisterMedicalExaminer(context.Context, *connect.Request[v1.RegisterMedicalExaminerRequest]) (*connect.Response[v1.RegisterMedicalExaminerResponse], error)
	GetMedicalExaminer(context.Context, *connect.Request[v1.GetMedicalExaminerRequest]) (*connect.Response[v1.GetMedicalExaminerResponse], error)
	ListMedicalExaminers(context.Context, *connect.Request[v1.ListMedicalExaminersRequest]) (*connect.Response[v1.ListMedicalExaminersResponse], error)
	// Certificate Management
	GenerateCertificate(context.Context, *connect.Request[v1.GenerateCertificateRequest]) (*connect.Response[v1.GenerateCertificateResponse], error)
	ValidateCertificate(context.Context, *connect.Request[v1.ValidateCertificateRequest]) (*connect.Response[v1.ValidateCertificateResponse], error)
	// Expiration Monitoring
	GetExpiringCertificates(context.Context, *connect.Request[v1.GetExpiringCertificatesRequest]) (*connect.Response[v1.GetExpiringCertificatesResponse], error)
	SetExpirationReminder(context.Context, *connect.Request[v1.SetExpirationReminderRequest]) (*connect.Response[v1.SetExpirationReminderResponse], error)
}

// NewDOTPhysicalServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDOTPhysicalServiceHandler(svc DOTPhysicalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dOTPhysicalServiceMethods := v1.File_services_v1_dot_physical_proto.Services().ByName("DOTPhysicalService").Methods()
	dOTPhysicalServiceScheduleDOTPhysicalHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceScheduleDOTPhysicalProcedure,
		svc.ScheduleDOTPhysical,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("ScheduleDOTPhysical")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceGetDOTPhysicalHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceGetDOTPhysicalProcedure,
		svc.GetDOTPhysical,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("GetDOTPhysical")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceUpdateDOTPhysicalHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceUpdateDOTPhysicalProcedure,
		svc.UpdateDOTPhysical,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("UpdateDOTPhysical")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceListDOTPhysicalsHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceListDOTPhysicalsProcedure,
		svc.ListDOTPhysicals,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("ListDOTPhysicals")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceRegisterMedicalExaminerHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceRegisterMedicalExaminerProcedure,
		svc.RegisterMedicalExaminer,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("RegisterMedicalExaminer")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceGetMedicalExaminerHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceGetMedicalExaminerProcedure,
		svc.GetMedicalExaminer,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("GetMedicalExaminer")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceListMedicalExaminersHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceListMedicalExaminersProcedure,
		svc.ListMedicalExaminers,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("ListMedicalExaminers")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceGenerateCertificateHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceGenerateCertificateProcedure,
		svc.GenerateCertificate,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("GenerateCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceValidateCertificateHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceValidateCertificateProcedure,
		svc.ValidateCertificate,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("ValidateCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceGetExpiringCertificatesHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceGetExpiringCertificatesProcedure,
		svc.GetExpiringCertificates,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("GetExpiringCertificates")),
		connect.WithHandlerOptions(opts...),
	)
	dOTPhysicalServiceSetExpirationReminderHandler := connect.NewUnaryHandler(
		DOTPhysicalServiceSetExpirationReminderProcedure,
		svc.SetExpirationReminder,
		connect.WithSchema(dOTPhysicalServiceMethods.ByName("SetExpirationReminder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.DOTPhysicalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DOTPhysicalServiceScheduleDOTPhysicalProcedure:
			dOTPhysicalServiceScheduleDOTPhysicalHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceGetDOTPhysicalProcedure:
			dOTPhysicalServiceGetDOTPhysicalHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceUpdateDOTPhysicalProcedure:
			dOTPhysicalServiceUpdateDOTPhysicalHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceListDOTPhysicalsProcedure:
			dOTPhysicalServiceListDOTPhysicalsHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceRegisterMedicalExaminerProcedure:
			dOTPhysicalServiceRegisterMedicalExaminerHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceGetMedicalExaminerProcedure:
			dOTPhysicalServiceGetMedicalExaminerHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceListMedicalExaminersProcedure:
			dOTPhysicalServiceListMedicalExaminersHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceGenerateCertificateProcedure:
			dOTPhysicalServiceGenerateCertificateHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceValidateCertificateProcedure:
			dOTPhysicalServiceValidateCertificateHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceGetExpiringCertificatesProcedure:
			dOTPhysicalServiceGetExpiringCertificatesHandler.ServeHTTP(w, r)
		case DOTPhysicalServiceSetExpirationReminderProcedure:
			dOTPhysicalServiceSetExpirationReminderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDOTPhysicalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDOTPhysicalServiceHandler struct{}

func (UnimplementedDOTPhysicalServiceHandler) ScheduleDOTPhysical(context.Context, *connect.Request[v1.ScheduleDOTPhysicalRequest]) (*connect.Response[v1.ScheduleDOTPhysicalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.ScheduleDOTPhysical is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) GetDOTPhysical(context.Context, *connect.Request[v1.GetDOTPhysicalRequest]) (*connect.Response[v1.GetDOTPhysicalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.GetDOTPhysical is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) UpdateDOTPhysical(context.Context, *connect.Request[v1.UpdateDOTPhysicalRequest]) (*connect.Response[v1.UpdateDOTPhysicalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.UpdateDOTPhysical is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) ListDOTPhysicals(context.Context, *connect.Request[v1.ListDOTPhysicalsRequest]) (*connect.Response[v1.ListDOTPhysicalsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.ListDOTPhysicals is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) RegisterMedicalExaminer(context.Context, *connect.Request[v1.RegisterMedicalExaminerRequest]) (*connect.Response[v1.RegisterMedicalExaminerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.RegisterMedicalExaminer is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) GetMedicalExaminer(context.Context, *connect.Request[v1.GetMedicalExaminerRequest]) (*connect.Response[v1.GetMedicalExaminerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.GetMedicalExaminer is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) ListMedicalExaminers(context.Context, *connect.Request[v1.ListMedicalExaminersRequest]) (*connect.Response[v1.ListMedicalExaminersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.ListMedicalExaminers is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) GenerateCertificate(context.Context, *connect.Request[v1.GenerateCertificateRequest]) (*connect.Response[v1.GenerateCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.GenerateCertificate is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) ValidateCertificate(context.Context, *connect.Request[v1.ValidateCertificateRequest]) (*connect.Response[v1.ValidateCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.ValidateCertificate is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) GetExpiringCertificates(context.Context, *connect.Request[v1.GetExpiringCertificatesRequest]) (*connect.Response[v1.GetExpiringCertificatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.GetExpiringCertificates is not implemented"))
}

func (UnimplementedDOTPhysicalServiceHandler) SetExpirationReminder(context.Context, *connect.Request[v1.SetExpirationReminderRequest]) (*connect.Response[v1.SetExpirationReminderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DOTPhysicalService.SetExpirationReminder is not implemented"))
}
