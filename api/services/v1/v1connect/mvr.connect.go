// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/mvr.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MVRServiceName is the fully-qualified name of the MVRService service.
	MVRServiceName = "v1consortium.services.MVRService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MVRServiceOrderMVRProcedure is the fully-qualified name of the MVRService's OrderMVR RPC.
	MVRServiceOrderMVRProcedure = "/v1consortium.services.MVRService/OrderMVR"
	// MVRServiceGetMVRReportProcedure is the fully-qualified name of the MVRService's GetMVRReport RPC.
	MVRServiceGetMVRReportProcedure = "/v1consortium.services.MVRService/GetMVRReport"
	// MVRServiceUpdateMVRReportProcedure is the fully-qualified name of the MVRService's
	// UpdateMVRReport RPC.
	MVRServiceUpdateMVRReportProcedure = "/v1consortium.services.MVRService/UpdateMVRReport"
	// MVRServiceListMVRReportsProcedure is the fully-qualified name of the MVRService's ListMVRReports
	// RPC.
	MVRServiceListMVRReportsProcedure = "/v1consortium.services.MVRService/ListMVRReports"
	// MVRServiceAddMVRViolationProcedure is the fully-qualified name of the MVRService's
	// AddMVRViolation RPC.
	MVRServiceAddMVRViolationProcedure = "/v1consortium.services.MVRService/AddMVRViolation"
	// MVRServiceUpdateMVRViolationProcedure is the fully-qualified name of the MVRService's
	// UpdateMVRViolation RPC.
	MVRServiceUpdateMVRViolationProcedure = "/v1consortium.services.MVRService/UpdateMVRViolation"
	// MVRServiceListMVRViolationsProcedure is the fully-qualified name of the MVRService's
	// ListMVRViolations RPC.
	MVRServiceListMVRViolationsProcedure = "/v1consortium.services.MVRService/ListMVRViolations"
	// MVRServiceEnableContinuousMonitoringProcedure is the fully-qualified name of the MVRService's
	// EnableContinuousMonitoring RPC.
	MVRServiceEnableContinuousMonitoringProcedure = "/v1consortium.services.MVRService/EnableContinuousMonitoring"
	// MVRServiceGetMonitoringStatusProcedure is the fully-qualified name of the MVRService's
	// GetMonitoringStatus RPC.
	MVRServiceGetMonitoringStatusProcedure = "/v1consortium.services.MVRService/GetMonitoringStatus"
	// MVRServiceGetMVRAnalyticsProcedure is the fully-qualified name of the MVRService's
	// GetMVRAnalytics RPC.
	MVRServiceGetMVRAnalyticsProcedure = "/v1consortium.services.MVRService/GetMVRAnalytics"
	// MVRServiceSyncProviderDataProcedure is the fully-qualified name of the MVRService's
	// SyncProviderData RPC.
	MVRServiceSyncProviderDataProcedure = "/v1consortium.services.MVRService/SyncProviderData"
)

// MVRServiceClient is a client for the v1consortium.services.MVRService service.
type MVRServiceClient interface {
	// MVR Report Management
	OrderMVR(context.Context, *connect.Request[v1.OrderMVRRequest]) (*connect.Response[v1.OrderMVRResponse], error)
	GetMVRReport(context.Context, *connect.Request[v1.GetMVRReportRequest]) (*connect.Response[v1.GetMVRReportResponse], error)
	UpdateMVRReport(context.Context, *connect.Request[v1.UpdateMVRReportRequest]) (*connect.Response[v1.UpdateMVRReportResponse], error)
	ListMVRReports(context.Context, *connect.Request[v1.ListMVRReportsRequest]) (*connect.Response[v1.ListMVRReportsResponse], error)
	// MVR Violation Management
	AddMVRViolation(context.Context, *connect.Request[v1.AddMVRViolationRequest]) (*connect.Response[v1.AddMVRViolationResponse], error)
	UpdateMVRViolation(context.Context, *connect.Request[v1.UpdateMVRViolationRequest]) (*connect.Response[v1.UpdateMVRViolationResponse], error)
	ListMVRViolations(context.Context, *connect.Request[v1.ListMVRViolationsRequest]) (*connect.Response[v1.ListMVRViolationsResponse], error)
	// Continuous Monitoring
	EnableContinuousMonitoring(context.Context, *connect.Request[v1.EnableContinuousMonitoringRequest]) (*connect.Response[v1.EnableContinuousMonitoringResponse], error)
	GetMonitoringStatus(context.Context, *connect.Request[v1.GetMonitoringStatusRequest]) (*connect.Response[v1.GetMonitoringStatusResponse], error)
	// Analytics and Reporting
	GetMVRAnalytics(context.Context, *connect.Request[v1.GetMVRAnalyticsRequest]) (*connect.Response[v1.GetMVRAnalyticsResponse], error)
	// Provider Integration
	SyncProviderData(context.Context, *connect.Request[v1.SyncProviderDataRequest]) (*connect.Response[v1.SyncProviderDataResponse], error)
}

// NewMVRServiceClient constructs a client for the v1consortium.services.MVRService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMVRServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MVRServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mVRServiceMethods := v1.File_services_v1_mvr_proto.Services().ByName("MVRService").Methods()
	return &mVRServiceClient{
		orderMVR: connect.NewClient[v1.OrderMVRRequest, v1.OrderMVRResponse](
			httpClient,
			baseURL+MVRServiceOrderMVRProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("OrderMVR")),
			connect.WithClientOptions(opts...),
		),
		getMVRReport: connect.NewClient[v1.GetMVRReportRequest, v1.GetMVRReportResponse](
			httpClient,
			baseURL+MVRServiceGetMVRReportProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("GetMVRReport")),
			connect.WithClientOptions(opts...),
		),
		updateMVRReport: connect.NewClient[v1.UpdateMVRReportRequest, v1.UpdateMVRReportResponse](
			httpClient,
			baseURL+MVRServiceUpdateMVRReportProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("UpdateMVRReport")),
			connect.WithClientOptions(opts...),
		),
		listMVRReports: connect.NewClient[v1.ListMVRReportsRequest, v1.ListMVRReportsResponse](
			httpClient,
			baseURL+MVRServiceListMVRReportsProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("ListMVRReports")),
			connect.WithClientOptions(opts...),
		),
		addMVRViolation: connect.NewClient[v1.AddMVRViolationRequest, v1.AddMVRViolationResponse](
			httpClient,
			baseURL+MVRServiceAddMVRViolationProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("AddMVRViolation")),
			connect.WithClientOptions(opts...),
		),
		updateMVRViolation: connect.NewClient[v1.UpdateMVRViolationRequest, v1.UpdateMVRViolationResponse](
			httpClient,
			baseURL+MVRServiceUpdateMVRViolationProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("UpdateMVRViolation")),
			connect.WithClientOptions(opts...),
		),
		listMVRViolations: connect.NewClient[v1.ListMVRViolationsRequest, v1.ListMVRViolationsResponse](
			httpClient,
			baseURL+MVRServiceListMVRViolationsProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("ListMVRViolations")),
			connect.WithClientOptions(opts...),
		),
		enableContinuousMonitoring: connect.NewClient[v1.EnableContinuousMonitoringRequest, v1.EnableContinuousMonitoringResponse](
			httpClient,
			baseURL+MVRServiceEnableContinuousMonitoringProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("EnableContinuousMonitoring")),
			connect.WithClientOptions(opts...),
		),
		getMonitoringStatus: connect.NewClient[v1.GetMonitoringStatusRequest, v1.GetMonitoringStatusResponse](
			httpClient,
			baseURL+MVRServiceGetMonitoringStatusProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("GetMonitoringStatus")),
			connect.WithClientOptions(opts...),
		),
		getMVRAnalytics: connect.NewClient[v1.GetMVRAnalyticsRequest, v1.GetMVRAnalyticsResponse](
			httpClient,
			baseURL+MVRServiceGetMVRAnalyticsProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("GetMVRAnalytics")),
			connect.WithClientOptions(opts...),
		),
		syncProviderData: connect.NewClient[v1.SyncProviderDataRequest, v1.SyncProviderDataResponse](
			httpClient,
			baseURL+MVRServiceSyncProviderDataProcedure,
			connect.WithSchema(mVRServiceMethods.ByName("SyncProviderData")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mVRServiceClient implements MVRServiceClient.
type mVRServiceClient struct {
	orderMVR                   *connect.Client[v1.OrderMVRRequest, v1.OrderMVRResponse]
	getMVRReport               *connect.Client[v1.GetMVRReportRequest, v1.GetMVRReportResponse]
	updateMVRReport            *connect.Client[v1.UpdateMVRReportRequest, v1.UpdateMVRReportResponse]
	listMVRReports             *connect.Client[v1.ListMVRReportsRequest, v1.ListMVRReportsResponse]
	addMVRViolation            *connect.Client[v1.AddMVRViolationRequest, v1.AddMVRViolationResponse]
	updateMVRViolation         *connect.Client[v1.UpdateMVRViolationRequest, v1.UpdateMVRViolationResponse]
	listMVRViolations          *connect.Client[v1.ListMVRViolationsRequest, v1.ListMVRViolationsResponse]
	enableContinuousMonitoring *connect.Client[v1.EnableContinuousMonitoringRequest, v1.EnableContinuousMonitoringResponse]
	getMonitoringStatus        *connect.Client[v1.GetMonitoringStatusRequest, v1.GetMonitoringStatusResponse]
	getMVRAnalytics            *connect.Client[v1.GetMVRAnalyticsRequest, v1.GetMVRAnalyticsResponse]
	syncProviderData           *connect.Client[v1.SyncProviderDataRequest, v1.SyncProviderDataResponse]
}

// OrderMVR calls v1consortium.services.MVRService.OrderMVR.
func (c *mVRServiceClient) OrderMVR(ctx context.Context, req *connect.Request[v1.OrderMVRRequest]) (*connect.Response[v1.OrderMVRResponse], error) {
	return c.orderMVR.CallUnary(ctx, req)
}

// GetMVRReport calls v1consortium.services.MVRService.GetMVRReport.
func (c *mVRServiceClient) GetMVRReport(ctx context.Context, req *connect.Request[v1.GetMVRReportRequest]) (*connect.Response[v1.GetMVRReportResponse], error) {
	return c.getMVRReport.CallUnary(ctx, req)
}

// UpdateMVRReport calls v1consortium.services.MVRService.UpdateMVRReport.
func (c *mVRServiceClient) UpdateMVRReport(ctx context.Context, req *connect.Request[v1.UpdateMVRReportRequest]) (*connect.Response[v1.UpdateMVRReportResponse], error) {
	return c.updateMVRReport.CallUnary(ctx, req)
}

// ListMVRReports calls v1consortium.services.MVRService.ListMVRReports.
func (c *mVRServiceClient) ListMVRReports(ctx context.Context, req *connect.Request[v1.ListMVRReportsRequest]) (*connect.Response[v1.ListMVRReportsResponse], error) {
	return c.listMVRReports.CallUnary(ctx, req)
}

// AddMVRViolation calls v1consortium.services.MVRService.AddMVRViolation.
func (c *mVRServiceClient) AddMVRViolation(ctx context.Context, req *connect.Request[v1.AddMVRViolationRequest]) (*connect.Response[v1.AddMVRViolationResponse], error) {
	return c.addMVRViolation.CallUnary(ctx, req)
}

// UpdateMVRViolation calls v1consortium.services.MVRService.UpdateMVRViolation.
func (c *mVRServiceClient) UpdateMVRViolation(ctx context.Context, req *connect.Request[v1.UpdateMVRViolationRequest]) (*connect.Response[v1.UpdateMVRViolationResponse], error) {
	return c.updateMVRViolation.CallUnary(ctx, req)
}

// ListMVRViolations calls v1consortium.services.MVRService.ListMVRViolations.
func (c *mVRServiceClient) ListMVRViolations(ctx context.Context, req *connect.Request[v1.ListMVRViolationsRequest]) (*connect.Response[v1.ListMVRViolationsResponse], error) {
	return c.listMVRViolations.CallUnary(ctx, req)
}

// EnableContinuousMonitoring calls v1consortium.services.MVRService.EnableContinuousMonitoring.
func (c *mVRServiceClient) EnableContinuousMonitoring(ctx context.Context, req *connect.Request[v1.EnableContinuousMonitoringRequest]) (*connect.Response[v1.EnableContinuousMonitoringResponse], error) {
	return c.enableContinuousMonitoring.CallUnary(ctx, req)
}

// GetMonitoringStatus calls v1consortium.services.MVRService.GetMonitoringStatus.
func (c *mVRServiceClient) GetMonitoringStatus(ctx context.Context, req *connect.Request[v1.GetMonitoringStatusRequest]) (*connect.Response[v1.GetMonitoringStatusResponse], error) {
	return c.getMonitoringStatus.CallUnary(ctx, req)
}

// GetMVRAnalytics calls v1consortium.services.MVRService.GetMVRAnalytics.
func (c *mVRServiceClient) GetMVRAnalytics(ctx context.Context, req *connect.Request[v1.GetMVRAnalyticsRequest]) (*connect.Response[v1.GetMVRAnalyticsResponse], error) {
	return c.getMVRAnalytics.CallUnary(ctx, req)
}

// SyncProviderData calls v1consortium.services.MVRService.SyncProviderData.
func (c *mVRServiceClient) SyncProviderData(ctx context.Context, req *connect.Request[v1.SyncProviderDataRequest]) (*connect.Response[v1.SyncProviderDataResponse], error) {
	return c.syncProviderData.CallUnary(ctx, req)
}

// MVRServiceHandler is an implementation of the v1consortium.services.MVRService service.
type MVRServiceHandler interface {
	// MVR Report Management
	OrderMVR(context.Context, *connect.Request[v1.OrderMVRRequest]) (*connect.Response[v1.OrderMVRResponse], error)
	GetMVRReport(context.Context, *connect.Request[v1.GetMVRReportRequest]) (*connect.Response[v1.GetMVRReportResponse], error)
	UpdateMVRReport(context.Context, *connect.Request[v1.UpdateMVRReportRequest]) (*connect.Response[v1.UpdateMVRReportResponse], error)
	ListMVRReports(context.Context, *connect.Request[v1.ListMVRReportsRequest]) (*connect.Response[v1.ListMVRReportsResponse], error)
	// MVR Violation Management
	AddMVRViolation(context.Context, *connect.Request[v1.AddMVRViolationRequest]) (*connect.Response[v1.AddMVRViolationResponse], error)
	UpdateMVRViolation(context.Context, *connect.Request[v1.UpdateMVRViolationRequest]) (*connect.Response[v1.UpdateMVRViolationResponse], error)
	ListMVRViolations(context.Context, *connect.Request[v1.ListMVRViolationsRequest]) (*connect.Response[v1.ListMVRViolationsResponse], error)
	// Continuous Monitoring
	EnableContinuousMonitoring(context.Context, *connect.Request[v1.EnableContinuousMonitoringRequest]) (*connect.Response[v1.EnableContinuousMonitoringResponse], error)
	GetMonitoringStatus(context.Context, *connect.Request[v1.GetMonitoringStatusRequest]) (*connect.Response[v1.GetMonitoringStatusResponse], error)
	// Analytics and Reporting
	GetMVRAnalytics(context.Context, *connect.Request[v1.GetMVRAnalyticsRequest]) (*connect.Response[v1.GetMVRAnalyticsResponse], error)
	// Provider Integration
	SyncProviderData(context.Context, *connect.Request[v1.SyncProviderDataRequest]) (*connect.Response[v1.SyncProviderDataResponse], error)
}

// NewMVRServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMVRServiceHandler(svc MVRServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mVRServiceMethods := v1.File_services_v1_mvr_proto.Services().ByName("MVRService").Methods()
	mVRServiceOrderMVRHandler := connect.NewUnaryHandler(
		MVRServiceOrderMVRProcedure,
		svc.OrderMVR,
		connect.WithSchema(mVRServiceMethods.ByName("OrderMVR")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceGetMVRReportHandler := connect.NewUnaryHandler(
		MVRServiceGetMVRReportProcedure,
		svc.GetMVRReport,
		connect.WithSchema(mVRServiceMethods.ByName("GetMVRReport")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceUpdateMVRReportHandler := connect.NewUnaryHandler(
		MVRServiceUpdateMVRReportProcedure,
		svc.UpdateMVRReport,
		connect.WithSchema(mVRServiceMethods.ByName("UpdateMVRReport")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceListMVRReportsHandler := connect.NewUnaryHandler(
		MVRServiceListMVRReportsProcedure,
		svc.ListMVRReports,
		connect.WithSchema(mVRServiceMethods.ByName("ListMVRReports")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceAddMVRViolationHandler := connect.NewUnaryHandler(
		MVRServiceAddMVRViolationProcedure,
		svc.AddMVRViolation,
		connect.WithSchema(mVRServiceMethods.ByName("AddMVRViolation")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceUpdateMVRViolationHandler := connect.NewUnaryHandler(
		MVRServiceUpdateMVRViolationProcedure,
		svc.UpdateMVRViolation,
		connect.WithSchema(mVRServiceMethods.ByName("UpdateMVRViolation")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceListMVRViolationsHandler := connect.NewUnaryHandler(
		MVRServiceListMVRViolationsProcedure,
		svc.ListMVRViolations,
		connect.WithSchema(mVRServiceMethods.ByName("ListMVRViolations")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceEnableContinuousMonitoringHandler := connect.NewUnaryHandler(
		MVRServiceEnableContinuousMonitoringProcedure,
		svc.EnableContinuousMonitoring,
		connect.WithSchema(mVRServiceMethods.ByName("EnableContinuousMonitoring")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceGetMonitoringStatusHandler := connect.NewUnaryHandler(
		MVRServiceGetMonitoringStatusProcedure,
		svc.GetMonitoringStatus,
		connect.WithSchema(mVRServiceMethods.ByName("GetMonitoringStatus")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceGetMVRAnalyticsHandler := connect.NewUnaryHandler(
		MVRServiceGetMVRAnalyticsProcedure,
		svc.GetMVRAnalytics,
		connect.WithSchema(mVRServiceMethods.ByName("GetMVRAnalytics")),
		connect.WithHandlerOptions(opts...),
	)
	mVRServiceSyncProviderDataHandler := connect.NewUnaryHandler(
		MVRServiceSyncProviderDataProcedure,
		svc.SyncProviderData,
		connect.WithSchema(mVRServiceMethods.ByName("SyncProviderData")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.MVRService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MVRServiceOrderMVRProcedure:
			mVRServiceOrderMVRHandler.ServeHTTP(w, r)
		case MVRServiceGetMVRReportProcedure:
			mVRServiceGetMVRReportHandler.ServeHTTP(w, r)
		case MVRServiceUpdateMVRReportProcedure:
			mVRServiceUpdateMVRReportHandler.ServeHTTP(w, r)
		case MVRServiceListMVRReportsProcedure:
			mVRServiceListMVRReportsHandler.ServeHTTP(w, r)
		case MVRServiceAddMVRViolationProcedure:
			mVRServiceAddMVRViolationHandler.ServeHTTP(w, r)
		case MVRServiceUpdateMVRViolationProcedure:
			mVRServiceUpdateMVRViolationHandler.ServeHTTP(w, r)
		case MVRServiceListMVRViolationsProcedure:
			mVRServiceListMVRViolationsHandler.ServeHTTP(w, r)
		case MVRServiceEnableContinuousMonitoringProcedure:
			mVRServiceEnableContinuousMonitoringHandler.ServeHTTP(w, r)
		case MVRServiceGetMonitoringStatusProcedure:
			mVRServiceGetMonitoringStatusHandler.ServeHTTP(w, r)
		case MVRServiceGetMVRAnalyticsProcedure:
			mVRServiceGetMVRAnalyticsHandler.ServeHTTP(w, r)
		case MVRServiceSyncProviderDataProcedure:
			mVRServiceSyncProviderDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMVRServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMVRServiceHandler struct{}

func (UnimplementedMVRServiceHandler) OrderMVR(context.Context, *connect.Request[v1.OrderMVRRequest]) (*connect.Response[v1.OrderMVRResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.OrderMVR is not implemented"))
}

func (UnimplementedMVRServiceHandler) GetMVRReport(context.Context, *connect.Request[v1.GetMVRReportRequest]) (*connect.Response[v1.GetMVRReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.GetMVRReport is not implemented"))
}

func (UnimplementedMVRServiceHandler) UpdateMVRReport(context.Context, *connect.Request[v1.UpdateMVRReportRequest]) (*connect.Response[v1.UpdateMVRReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.UpdateMVRReport is not implemented"))
}

func (UnimplementedMVRServiceHandler) ListMVRReports(context.Context, *connect.Request[v1.ListMVRReportsRequest]) (*connect.Response[v1.ListMVRReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.ListMVRReports is not implemented"))
}

func (UnimplementedMVRServiceHandler) AddMVRViolation(context.Context, *connect.Request[v1.AddMVRViolationRequest]) (*connect.Response[v1.AddMVRViolationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.AddMVRViolation is not implemented"))
}

func (UnimplementedMVRServiceHandler) UpdateMVRViolation(context.Context, *connect.Request[v1.UpdateMVRViolationRequest]) (*connect.Response[v1.UpdateMVRViolationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.UpdateMVRViolation is not implemented"))
}

func (UnimplementedMVRServiceHandler) ListMVRViolations(context.Context, *connect.Request[v1.ListMVRViolationsRequest]) (*connect.Response[v1.ListMVRViolationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.ListMVRViolations is not implemented"))
}

func (UnimplementedMVRServiceHandler) EnableContinuousMonitoring(context.Context, *connect.Request[v1.EnableContinuousMonitoringRequest]) (*connect.Response[v1.EnableContinuousMonitoringResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.EnableContinuousMonitoring is not implemented"))
}

func (UnimplementedMVRServiceHandler) GetMonitoringStatus(context.Context, *connect.Request[v1.GetMonitoringStatusRequest]) (*connect.Response[v1.GetMonitoringStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.GetMonitoringStatus is not implemented"))
}

func (UnimplementedMVRServiceHandler) GetMVRAnalytics(context.Context, *connect.Request[v1.GetMVRAnalyticsRequest]) (*connect.Response[v1.GetMVRAnalyticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.GetMVRAnalytics is not implemented"))
}

func (UnimplementedMVRServiceHandler) SyncProviderData(context.Context, *connect.Request[v1.SyncProviderDataRequest]) (*connect.Response[v1.SyncProviderDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.MVRService.SyncProviderData is not implemented"))
}
