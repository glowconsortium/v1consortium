// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/compliance.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ComplianceServiceName is the fully-qualified name of the ComplianceService service.
	ComplianceServiceName = "v1consortium.services.ComplianceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ComplianceServiceGetComplianceStatusProcedure is the fully-qualified name of the
	// ComplianceService's GetComplianceStatus RPC.
	ComplianceServiceGetComplianceStatusProcedure = "/v1consortium.services.ComplianceService/GetComplianceStatus"
	// ComplianceServiceUpdateComplianceStatusProcedure is the fully-qualified name of the
	// ComplianceService's UpdateComplianceStatus RPC.
	ComplianceServiceUpdateComplianceStatusProcedure = "/v1consortium.services.ComplianceService/UpdateComplianceStatus"
	// ComplianceServiceListComplianceStatusProcedure is the fully-qualified name of the
	// ComplianceService's ListComplianceStatus RPC.
	ComplianceServiceListComplianceStatusProcedure = "/v1consortium.services.ComplianceService/ListComplianceStatus"
	// ComplianceServiceGenerateComplianceCertificateProcedure is the fully-qualified name of the
	// ComplianceService's GenerateComplianceCertificate RPC.
	ComplianceServiceGenerateComplianceCertificateProcedure = "/v1consortium.services.ComplianceService/GenerateComplianceCertificate"
	// ComplianceServiceGetCertificateProcedure is the fully-qualified name of the ComplianceService's
	// GetCertificate RPC.
	ComplianceServiceGetCertificateProcedure = "/v1consortium.services.ComplianceService/GetCertificate"
	// ComplianceServiceListCertificatesProcedure is the fully-qualified name of the ComplianceService's
	// ListCertificates RPC.
	ComplianceServiceListCertificatesProcedure = "/v1consortium.services.ComplianceService/ListCertificates"
	// ComplianceServiceRevokeCertificateProcedure is the fully-qualified name of the
	// ComplianceService's RevokeCertificate RPC.
	ComplianceServiceRevokeCertificateProcedure = "/v1consortium.services.ComplianceService/RevokeCertificate"
	// ComplianceServiceGenerateComplianceReportProcedure is the fully-qualified name of the
	// ComplianceService's GenerateComplianceReport RPC.
	ComplianceServiceGenerateComplianceReportProcedure = "/v1consortium.services.ComplianceService/GenerateComplianceReport"
	// ComplianceServiceGetSavedReportProcedure is the fully-qualified name of the ComplianceService's
	// GetSavedReport RPC.
	ComplianceServiceGetSavedReportProcedure = "/v1consortium.services.ComplianceService/GetSavedReport"
	// ComplianceServiceListSavedReportsProcedure is the fully-qualified name of the ComplianceService's
	// ListSavedReports RPC.
	ComplianceServiceListSavedReportsProcedure = "/v1consortium.services.ComplianceService/ListSavedReports"
	// ComplianceServiceDeleteSavedReportProcedure is the fully-qualified name of the
	// ComplianceService's DeleteSavedReport RPC.
	ComplianceServiceDeleteSavedReportProcedure = "/v1consortium.services.ComplianceService/DeleteSavedReport"
	// ComplianceServiceGetComplianceAlertsProcedure is the fully-qualified name of the
	// ComplianceService's GetComplianceAlerts RPC.
	ComplianceServiceGetComplianceAlertsProcedure = "/v1consortium.services.ComplianceService/GetComplianceAlerts"
	// ComplianceServiceGetComplianceAnalyticsProcedure is the fully-qualified name of the
	// ComplianceService's GetComplianceAnalytics RPC.
	ComplianceServiceGetComplianceAnalyticsProcedure = "/v1consortium.services.ComplianceService/GetComplianceAnalytics"
	// ComplianceServiceGetComplianceAuditTrailProcedure is the fully-qualified name of the
	// ComplianceService's GetComplianceAuditTrail RPC.
	ComplianceServiceGetComplianceAuditTrailProcedure = "/v1consortium.services.ComplianceService/GetComplianceAuditTrail"
)

// ComplianceServiceClient is a client for the v1consortium.services.ComplianceService service.
type ComplianceServiceClient interface {
	// Compliance Status Management
	GetComplianceStatus(context.Context, *connect.Request[v1.GetComplianceStatusRequest]) (*connect.Response[v1.GetComplianceStatusResponse], error)
	UpdateComplianceStatus(context.Context, *connect.Request[v1.UpdateComplianceStatusRequest]) (*connect.Response[v1.UpdateComplianceStatusResponse], error)
	ListComplianceStatus(context.Context, *connect.Request[v1.ListComplianceStatusRequest]) (*connect.Response[v1.ListComplianceStatusResponse], error)
	// Certificate Management
	GenerateComplianceCertificate(context.Context, *connect.Request[v1.GenerateComplianceCertificateRequest]) (*connect.Response[v1.GenerateComplianceCertificateResponse], error)
	GetCertificate(context.Context, *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error)
	ListCertificates(context.Context, *connect.Request[v1.ListCertificatesRequest]) (*connect.Response[v1.ListCertificatesResponse], error)
	RevokeCertificate(context.Context, *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error)
	// Reporting
	GenerateComplianceReport(context.Context, *connect.Request[v1.GenerateComplianceReportRequest]) (*connect.Response[v1.GenerateComplianceReportResponse], error)
	GetSavedReport(context.Context, *connect.Request[v1.GetSavedReportRequest]) (*connect.Response[v1.GetSavedReportResponse], error)
	ListSavedReports(context.Context, *connect.Request[v1.ListSavedReportsRequest]) (*connect.Response[v1.ListSavedReportsResponse], error)
	DeleteSavedReport(context.Context, *connect.Request[v1.DeleteSavedReportRequest]) (*connect.Response[v1.DeleteSavedReportResponse], error)
	// Compliance Monitoring
	GetComplianceAlerts(context.Context, *connect.Request[v1.GetComplianceAlertsRequest]) (*connect.Response[v1.GetComplianceAlertsResponse], error)
	GetComplianceAnalytics(context.Context, *connect.Request[v1.GetComplianceAnalyticsRequest]) (*connect.Response[v1.GetComplianceAnalyticsResponse], error)
	// Audit and Tracking
	GetComplianceAuditTrail(context.Context, *connect.Request[v1.GetComplianceAuditTrailRequest]) (*connect.Response[v1.GetComplianceAuditTrailResponse], error)
}

// NewComplianceServiceClient constructs a client for the v1consortium.services.ComplianceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewComplianceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ComplianceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	complianceServiceMethods := v1.File_services_v1_compliance_proto.Services().ByName("ComplianceService").Methods()
	return &complianceServiceClient{
		getComplianceStatus: connect.NewClient[v1.GetComplianceStatusRequest, v1.GetComplianceStatusResponse](
			httpClient,
			baseURL+ComplianceServiceGetComplianceStatusProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GetComplianceStatus")),
			connect.WithClientOptions(opts...),
		),
		updateComplianceStatus: connect.NewClient[v1.UpdateComplianceStatusRequest, v1.UpdateComplianceStatusResponse](
			httpClient,
			baseURL+ComplianceServiceUpdateComplianceStatusProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("UpdateComplianceStatus")),
			connect.WithClientOptions(opts...),
		),
		listComplianceStatus: connect.NewClient[v1.ListComplianceStatusRequest, v1.ListComplianceStatusResponse](
			httpClient,
			baseURL+ComplianceServiceListComplianceStatusProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("ListComplianceStatus")),
			connect.WithClientOptions(opts...),
		),
		generateComplianceCertificate: connect.NewClient[v1.GenerateComplianceCertificateRequest, v1.GenerateComplianceCertificateResponse](
			httpClient,
			baseURL+ComplianceServiceGenerateComplianceCertificateProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GenerateComplianceCertificate")),
			connect.WithClientOptions(opts...),
		),
		getCertificate: connect.NewClient[v1.GetCertificateRequest, v1.GetCertificateResponse](
			httpClient,
			baseURL+ComplianceServiceGetCertificateProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GetCertificate")),
			connect.WithClientOptions(opts...),
		),
		listCertificates: connect.NewClient[v1.ListCertificatesRequest, v1.ListCertificatesResponse](
			httpClient,
			baseURL+ComplianceServiceListCertificatesProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("ListCertificates")),
			connect.WithClientOptions(opts...),
		),
		revokeCertificate: connect.NewClient[v1.RevokeCertificateRequest, v1.RevokeCertificateResponse](
			httpClient,
			baseURL+ComplianceServiceRevokeCertificateProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("RevokeCertificate")),
			connect.WithClientOptions(opts...),
		),
		generateComplianceReport: connect.NewClient[v1.GenerateComplianceReportRequest, v1.GenerateComplianceReportResponse](
			httpClient,
			baseURL+ComplianceServiceGenerateComplianceReportProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GenerateComplianceReport")),
			connect.WithClientOptions(opts...),
		),
		getSavedReport: connect.NewClient[v1.GetSavedReportRequest, v1.GetSavedReportResponse](
			httpClient,
			baseURL+ComplianceServiceGetSavedReportProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GetSavedReport")),
			connect.WithClientOptions(opts...),
		),
		listSavedReports: connect.NewClient[v1.ListSavedReportsRequest, v1.ListSavedReportsResponse](
			httpClient,
			baseURL+ComplianceServiceListSavedReportsProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("ListSavedReports")),
			connect.WithClientOptions(opts...),
		),
		deleteSavedReport: connect.NewClient[v1.DeleteSavedReportRequest, v1.DeleteSavedReportResponse](
			httpClient,
			baseURL+ComplianceServiceDeleteSavedReportProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("DeleteSavedReport")),
			connect.WithClientOptions(opts...),
		),
		getComplianceAlerts: connect.NewClient[v1.GetComplianceAlertsRequest, v1.GetComplianceAlertsResponse](
			httpClient,
			baseURL+ComplianceServiceGetComplianceAlertsProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GetComplianceAlerts")),
			connect.WithClientOptions(opts...),
		),
		getComplianceAnalytics: connect.NewClient[v1.GetComplianceAnalyticsRequest, v1.GetComplianceAnalyticsResponse](
			httpClient,
			baseURL+ComplianceServiceGetComplianceAnalyticsProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GetComplianceAnalytics")),
			connect.WithClientOptions(opts...),
		),
		getComplianceAuditTrail: connect.NewClient[v1.GetComplianceAuditTrailRequest, v1.GetComplianceAuditTrailResponse](
			httpClient,
			baseURL+ComplianceServiceGetComplianceAuditTrailProcedure,
			connect.WithSchema(complianceServiceMethods.ByName("GetComplianceAuditTrail")),
			connect.WithClientOptions(opts...),
		),
	}
}

// complianceServiceClient implements ComplianceServiceClient.
type complianceServiceClient struct {
	getComplianceStatus           *connect.Client[v1.GetComplianceStatusRequest, v1.GetComplianceStatusResponse]
	updateComplianceStatus        *connect.Client[v1.UpdateComplianceStatusRequest, v1.UpdateComplianceStatusResponse]
	listComplianceStatus          *connect.Client[v1.ListComplianceStatusRequest, v1.ListComplianceStatusResponse]
	generateComplianceCertificate *connect.Client[v1.GenerateComplianceCertificateRequest, v1.GenerateComplianceCertificateResponse]
	getCertificate                *connect.Client[v1.GetCertificateRequest, v1.GetCertificateResponse]
	listCertificates              *connect.Client[v1.ListCertificatesRequest, v1.ListCertificatesResponse]
	revokeCertificate             *connect.Client[v1.RevokeCertificateRequest, v1.RevokeCertificateResponse]
	generateComplianceReport      *connect.Client[v1.GenerateComplianceReportRequest, v1.GenerateComplianceReportResponse]
	getSavedReport                *connect.Client[v1.GetSavedReportRequest, v1.GetSavedReportResponse]
	listSavedReports              *connect.Client[v1.ListSavedReportsRequest, v1.ListSavedReportsResponse]
	deleteSavedReport             *connect.Client[v1.DeleteSavedReportRequest, v1.DeleteSavedReportResponse]
	getComplianceAlerts           *connect.Client[v1.GetComplianceAlertsRequest, v1.GetComplianceAlertsResponse]
	getComplianceAnalytics        *connect.Client[v1.GetComplianceAnalyticsRequest, v1.GetComplianceAnalyticsResponse]
	getComplianceAuditTrail       *connect.Client[v1.GetComplianceAuditTrailRequest, v1.GetComplianceAuditTrailResponse]
}

// GetComplianceStatus calls v1consortium.services.ComplianceService.GetComplianceStatus.
func (c *complianceServiceClient) GetComplianceStatus(ctx context.Context, req *connect.Request[v1.GetComplianceStatusRequest]) (*connect.Response[v1.GetComplianceStatusResponse], error) {
	return c.getComplianceStatus.CallUnary(ctx, req)
}

// UpdateComplianceStatus calls v1consortium.services.ComplianceService.UpdateComplianceStatus.
func (c *complianceServiceClient) UpdateComplianceStatus(ctx context.Context, req *connect.Request[v1.UpdateComplianceStatusRequest]) (*connect.Response[v1.UpdateComplianceStatusResponse], error) {
	return c.updateComplianceStatus.CallUnary(ctx, req)
}

// ListComplianceStatus calls v1consortium.services.ComplianceService.ListComplianceStatus.
func (c *complianceServiceClient) ListComplianceStatus(ctx context.Context, req *connect.Request[v1.ListComplianceStatusRequest]) (*connect.Response[v1.ListComplianceStatusResponse], error) {
	return c.listComplianceStatus.CallUnary(ctx, req)
}

// GenerateComplianceCertificate calls
// v1consortium.services.ComplianceService.GenerateComplianceCertificate.
func (c *complianceServiceClient) GenerateComplianceCertificate(ctx context.Context, req *connect.Request[v1.GenerateComplianceCertificateRequest]) (*connect.Response[v1.GenerateComplianceCertificateResponse], error) {
	return c.generateComplianceCertificate.CallUnary(ctx, req)
}

// GetCertificate calls v1consortium.services.ComplianceService.GetCertificate.
func (c *complianceServiceClient) GetCertificate(ctx context.Context, req *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error) {
	return c.getCertificate.CallUnary(ctx, req)
}

// ListCertificates calls v1consortium.services.ComplianceService.ListCertificates.
func (c *complianceServiceClient) ListCertificates(ctx context.Context, req *connect.Request[v1.ListCertificatesRequest]) (*connect.Response[v1.ListCertificatesResponse], error) {
	return c.listCertificates.CallUnary(ctx, req)
}

// RevokeCertificate calls v1consortium.services.ComplianceService.RevokeCertificate.
func (c *complianceServiceClient) RevokeCertificate(ctx context.Context, req *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error) {
	return c.revokeCertificate.CallUnary(ctx, req)
}

// GenerateComplianceReport calls v1consortium.services.ComplianceService.GenerateComplianceReport.
func (c *complianceServiceClient) GenerateComplianceReport(ctx context.Context, req *connect.Request[v1.GenerateComplianceReportRequest]) (*connect.Response[v1.GenerateComplianceReportResponse], error) {
	return c.generateComplianceReport.CallUnary(ctx, req)
}

// GetSavedReport calls v1consortium.services.ComplianceService.GetSavedReport.
func (c *complianceServiceClient) GetSavedReport(ctx context.Context, req *connect.Request[v1.GetSavedReportRequest]) (*connect.Response[v1.GetSavedReportResponse], error) {
	return c.getSavedReport.CallUnary(ctx, req)
}

// ListSavedReports calls v1consortium.services.ComplianceService.ListSavedReports.
func (c *complianceServiceClient) ListSavedReports(ctx context.Context, req *connect.Request[v1.ListSavedReportsRequest]) (*connect.Response[v1.ListSavedReportsResponse], error) {
	return c.listSavedReports.CallUnary(ctx, req)
}

// DeleteSavedReport calls v1consortium.services.ComplianceService.DeleteSavedReport.
func (c *complianceServiceClient) DeleteSavedReport(ctx context.Context, req *connect.Request[v1.DeleteSavedReportRequest]) (*connect.Response[v1.DeleteSavedReportResponse], error) {
	return c.deleteSavedReport.CallUnary(ctx, req)
}

// GetComplianceAlerts calls v1consortium.services.ComplianceService.GetComplianceAlerts.
func (c *complianceServiceClient) GetComplianceAlerts(ctx context.Context, req *connect.Request[v1.GetComplianceAlertsRequest]) (*connect.Response[v1.GetComplianceAlertsResponse], error) {
	return c.getComplianceAlerts.CallUnary(ctx, req)
}

// GetComplianceAnalytics calls v1consortium.services.ComplianceService.GetComplianceAnalytics.
func (c *complianceServiceClient) GetComplianceAnalytics(ctx context.Context, req *connect.Request[v1.GetComplianceAnalyticsRequest]) (*connect.Response[v1.GetComplianceAnalyticsResponse], error) {
	return c.getComplianceAnalytics.CallUnary(ctx, req)
}

// GetComplianceAuditTrail calls v1consortium.services.ComplianceService.GetComplianceAuditTrail.
func (c *complianceServiceClient) GetComplianceAuditTrail(ctx context.Context, req *connect.Request[v1.GetComplianceAuditTrailRequest]) (*connect.Response[v1.GetComplianceAuditTrailResponse], error) {
	return c.getComplianceAuditTrail.CallUnary(ctx, req)
}

// ComplianceServiceHandler is an implementation of the v1consortium.services.ComplianceService
// service.
type ComplianceServiceHandler interface {
	// Compliance Status Management
	GetComplianceStatus(context.Context, *connect.Request[v1.GetComplianceStatusRequest]) (*connect.Response[v1.GetComplianceStatusResponse], error)
	UpdateComplianceStatus(context.Context, *connect.Request[v1.UpdateComplianceStatusRequest]) (*connect.Response[v1.UpdateComplianceStatusResponse], error)
	ListComplianceStatus(context.Context, *connect.Request[v1.ListComplianceStatusRequest]) (*connect.Response[v1.ListComplianceStatusResponse], error)
	// Certificate Management
	GenerateComplianceCertificate(context.Context, *connect.Request[v1.GenerateComplianceCertificateRequest]) (*connect.Response[v1.GenerateComplianceCertificateResponse], error)
	GetCertificate(context.Context, *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error)
	ListCertificates(context.Context, *connect.Request[v1.ListCertificatesRequest]) (*connect.Response[v1.ListCertificatesResponse], error)
	RevokeCertificate(context.Context, *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error)
	// Reporting
	GenerateComplianceReport(context.Context, *connect.Request[v1.GenerateComplianceReportRequest]) (*connect.Response[v1.GenerateComplianceReportResponse], error)
	GetSavedReport(context.Context, *connect.Request[v1.GetSavedReportRequest]) (*connect.Response[v1.GetSavedReportResponse], error)
	ListSavedReports(context.Context, *connect.Request[v1.ListSavedReportsRequest]) (*connect.Response[v1.ListSavedReportsResponse], error)
	DeleteSavedReport(context.Context, *connect.Request[v1.DeleteSavedReportRequest]) (*connect.Response[v1.DeleteSavedReportResponse], error)
	// Compliance Monitoring
	GetComplianceAlerts(context.Context, *connect.Request[v1.GetComplianceAlertsRequest]) (*connect.Response[v1.GetComplianceAlertsResponse], error)
	GetComplianceAnalytics(context.Context, *connect.Request[v1.GetComplianceAnalyticsRequest]) (*connect.Response[v1.GetComplianceAnalyticsResponse], error)
	// Audit and Tracking
	GetComplianceAuditTrail(context.Context, *connect.Request[v1.GetComplianceAuditTrailRequest]) (*connect.Response[v1.GetComplianceAuditTrailResponse], error)
}

// NewComplianceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewComplianceServiceHandler(svc ComplianceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	complianceServiceMethods := v1.File_services_v1_compliance_proto.Services().ByName("ComplianceService").Methods()
	complianceServiceGetComplianceStatusHandler := connect.NewUnaryHandler(
		ComplianceServiceGetComplianceStatusProcedure,
		svc.GetComplianceStatus,
		connect.WithSchema(complianceServiceMethods.ByName("GetComplianceStatus")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceUpdateComplianceStatusHandler := connect.NewUnaryHandler(
		ComplianceServiceUpdateComplianceStatusProcedure,
		svc.UpdateComplianceStatus,
		connect.WithSchema(complianceServiceMethods.ByName("UpdateComplianceStatus")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceListComplianceStatusHandler := connect.NewUnaryHandler(
		ComplianceServiceListComplianceStatusProcedure,
		svc.ListComplianceStatus,
		connect.WithSchema(complianceServiceMethods.ByName("ListComplianceStatus")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceGenerateComplianceCertificateHandler := connect.NewUnaryHandler(
		ComplianceServiceGenerateComplianceCertificateProcedure,
		svc.GenerateComplianceCertificate,
		connect.WithSchema(complianceServiceMethods.ByName("GenerateComplianceCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceGetCertificateHandler := connect.NewUnaryHandler(
		ComplianceServiceGetCertificateProcedure,
		svc.GetCertificate,
		connect.WithSchema(complianceServiceMethods.ByName("GetCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceListCertificatesHandler := connect.NewUnaryHandler(
		ComplianceServiceListCertificatesProcedure,
		svc.ListCertificates,
		connect.WithSchema(complianceServiceMethods.ByName("ListCertificates")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceRevokeCertificateHandler := connect.NewUnaryHandler(
		ComplianceServiceRevokeCertificateProcedure,
		svc.RevokeCertificate,
		connect.WithSchema(complianceServiceMethods.ByName("RevokeCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceGenerateComplianceReportHandler := connect.NewUnaryHandler(
		ComplianceServiceGenerateComplianceReportProcedure,
		svc.GenerateComplianceReport,
		connect.WithSchema(complianceServiceMethods.ByName("GenerateComplianceReport")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceGetSavedReportHandler := connect.NewUnaryHandler(
		ComplianceServiceGetSavedReportProcedure,
		svc.GetSavedReport,
		connect.WithSchema(complianceServiceMethods.ByName("GetSavedReport")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceListSavedReportsHandler := connect.NewUnaryHandler(
		ComplianceServiceListSavedReportsProcedure,
		svc.ListSavedReports,
		connect.WithSchema(complianceServiceMethods.ByName("ListSavedReports")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceDeleteSavedReportHandler := connect.NewUnaryHandler(
		ComplianceServiceDeleteSavedReportProcedure,
		svc.DeleteSavedReport,
		connect.WithSchema(complianceServiceMethods.ByName("DeleteSavedReport")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceGetComplianceAlertsHandler := connect.NewUnaryHandler(
		ComplianceServiceGetComplianceAlertsProcedure,
		svc.GetComplianceAlerts,
		connect.WithSchema(complianceServiceMethods.ByName("GetComplianceAlerts")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceGetComplianceAnalyticsHandler := connect.NewUnaryHandler(
		ComplianceServiceGetComplianceAnalyticsProcedure,
		svc.GetComplianceAnalytics,
		connect.WithSchema(complianceServiceMethods.ByName("GetComplianceAnalytics")),
		connect.WithHandlerOptions(opts...),
	)
	complianceServiceGetComplianceAuditTrailHandler := connect.NewUnaryHandler(
		ComplianceServiceGetComplianceAuditTrailProcedure,
		svc.GetComplianceAuditTrail,
		connect.WithSchema(complianceServiceMethods.ByName("GetComplianceAuditTrail")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.ComplianceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ComplianceServiceGetComplianceStatusProcedure:
			complianceServiceGetComplianceStatusHandler.ServeHTTP(w, r)
		case ComplianceServiceUpdateComplianceStatusProcedure:
			complianceServiceUpdateComplianceStatusHandler.ServeHTTP(w, r)
		case ComplianceServiceListComplianceStatusProcedure:
			complianceServiceListComplianceStatusHandler.ServeHTTP(w, r)
		case ComplianceServiceGenerateComplianceCertificateProcedure:
			complianceServiceGenerateComplianceCertificateHandler.ServeHTTP(w, r)
		case ComplianceServiceGetCertificateProcedure:
			complianceServiceGetCertificateHandler.ServeHTTP(w, r)
		case ComplianceServiceListCertificatesProcedure:
			complianceServiceListCertificatesHandler.ServeHTTP(w, r)
		case ComplianceServiceRevokeCertificateProcedure:
			complianceServiceRevokeCertificateHandler.ServeHTTP(w, r)
		case ComplianceServiceGenerateComplianceReportProcedure:
			complianceServiceGenerateComplianceReportHandler.ServeHTTP(w, r)
		case ComplianceServiceGetSavedReportProcedure:
			complianceServiceGetSavedReportHandler.ServeHTTP(w, r)
		case ComplianceServiceListSavedReportsProcedure:
			complianceServiceListSavedReportsHandler.ServeHTTP(w, r)
		case ComplianceServiceDeleteSavedReportProcedure:
			complianceServiceDeleteSavedReportHandler.ServeHTTP(w, r)
		case ComplianceServiceGetComplianceAlertsProcedure:
			complianceServiceGetComplianceAlertsHandler.ServeHTTP(w, r)
		case ComplianceServiceGetComplianceAnalyticsProcedure:
			complianceServiceGetComplianceAnalyticsHandler.ServeHTTP(w, r)
		case ComplianceServiceGetComplianceAuditTrailProcedure:
			complianceServiceGetComplianceAuditTrailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedComplianceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedComplianceServiceHandler struct{}

func (UnimplementedComplianceServiceHandler) GetComplianceStatus(context.Context, *connect.Request[v1.GetComplianceStatusRequest]) (*connect.Response[v1.GetComplianceStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GetComplianceStatus is not implemented"))
}

func (UnimplementedComplianceServiceHandler) UpdateComplianceStatus(context.Context, *connect.Request[v1.UpdateComplianceStatusRequest]) (*connect.Response[v1.UpdateComplianceStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.UpdateComplianceStatus is not implemented"))
}

func (UnimplementedComplianceServiceHandler) ListComplianceStatus(context.Context, *connect.Request[v1.ListComplianceStatusRequest]) (*connect.Response[v1.ListComplianceStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.ListComplianceStatus is not implemented"))
}

func (UnimplementedComplianceServiceHandler) GenerateComplianceCertificate(context.Context, *connect.Request[v1.GenerateComplianceCertificateRequest]) (*connect.Response[v1.GenerateComplianceCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GenerateComplianceCertificate is not implemented"))
}

func (UnimplementedComplianceServiceHandler) GetCertificate(context.Context, *connect.Request[v1.GetCertificateRequest]) (*connect.Response[v1.GetCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GetCertificate is not implemented"))
}

func (UnimplementedComplianceServiceHandler) ListCertificates(context.Context, *connect.Request[v1.ListCertificatesRequest]) (*connect.Response[v1.ListCertificatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.ListCertificates is not implemented"))
}

func (UnimplementedComplianceServiceHandler) RevokeCertificate(context.Context, *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.RevokeCertificate is not implemented"))
}

func (UnimplementedComplianceServiceHandler) GenerateComplianceReport(context.Context, *connect.Request[v1.GenerateComplianceReportRequest]) (*connect.Response[v1.GenerateComplianceReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GenerateComplianceReport is not implemented"))
}

func (UnimplementedComplianceServiceHandler) GetSavedReport(context.Context, *connect.Request[v1.GetSavedReportRequest]) (*connect.Response[v1.GetSavedReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GetSavedReport is not implemented"))
}

func (UnimplementedComplianceServiceHandler) ListSavedReports(context.Context, *connect.Request[v1.ListSavedReportsRequest]) (*connect.Response[v1.ListSavedReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.ListSavedReports is not implemented"))
}

func (UnimplementedComplianceServiceHandler) DeleteSavedReport(context.Context, *connect.Request[v1.DeleteSavedReportRequest]) (*connect.Response[v1.DeleteSavedReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.DeleteSavedReport is not implemented"))
}

func (UnimplementedComplianceServiceHandler) GetComplianceAlerts(context.Context, *connect.Request[v1.GetComplianceAlertsRequest]) (*connect.Response[v1.GetComplianceAlertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GetComplianceAlerts is not implemented"))
}

func (UnimplementedComplianceServiceHandler) GetComplianceAnalytics(context.Context, *connect.Request[v1.GetComplianceAnalyticsRequest]) (*connect.Response[v1.GetComplianceAnalyticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GetComplianceAnalytics is not implemented"))
}

func (UnimplementedComplianceServiceHandler) GetComplianceAuditTrail(context.Context, *connect.Request[v1.GetComplianceAuditTrailRequest]) (*connect.Response[v1.GetComplianceAuditTrailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.ComplianceService.GetComplianceAuditTrail is not implemented"))
}
