// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/workflow.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkflowServiceName is the fully-qualified name of the WorkflowService service.
	WorkflowServiceName = "v1consortium.services.WorkflowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkflowServiceStartWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// StartWorkflow RPC.
	WorkflowServiceStartWorkflowProcedure = "/v1consortium.services.WorkflowService/StartWorkflow"
	// WorkflowServiceGetWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// GetWorkflow RPC.
	WorkflowServiceGetWorkflowProcedure = "/v1consortium.services.WorkflowService/GetWorkflow"
	// WorkflowServiceListWorkflowsProcedure is the fully-qualified name of the WorkflowService's
	// ListWorkflows RPC.
	WorkflowServiceListWorkflowsProcedure = "/v1consortium.services.WorkflowService/ListWorkflows"
	// WorkflowServiceUpdateWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// UpdateWorkflow RPC.
	WorkflowServiceUpdateWorkflowProcedure = "/v1consortium.services.WorkflowService/UpdateWorkflow"
	// WorkflowServiceCancelWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// CancelWorkflow RPC.
	WorkflowServiceCancelWorkflowProcedure = "/v1consortium.services.WorkflowService/CancelWorkflow"
	// WorkflowServiceRetryWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// RetryWorkflow RPC.
	WorkflowServiceRetryWorkflowProcedure = "/v1consortium.services.WorkflowService/RetryWorkflow"
	// WorkflowServiceStartDrugTestOrderWorkflowProcedure is the fully-qualified name of the
	// WorkflowService's StartDrugTestOrderWorkflow RPC.
	WorkflowServiceStartDrugTestOrderWorkflowProcedure = "/v1consortium.services.WorkflowService/StartDrugTestOrderWorkflow"
	// WorkflowServiceStartMVRMonitoringWorkflowProcedure is the fully-qualified name of the
	// WorkflowService's StartMVRMonitoringWorkflow RPC.
	WorkflowServiceStartMVRMonitoringWorkflowProcedure = "/v1consortium.services.WorkflowService/StartMVRMonitoringWorkflow"
	// WorkflowServiceStartRandomSelectionWorkflowProcedure is the fully-qualified name of the
	// WorkflowService's StartRandomSelectionWorkflow RPC.
	WorkflowServiceStartRandomSelectionWorkflowProcedure = "/v1consortium.services.WorkflowService/StartRandomSelectionWorkflow"
	// WorkflowServiceStartBackgroundCheckWorkflowProcedure is the fully-qualified name of the
	// WorkflowService's StartBackgroundCheckWorkflow RPC.
	WorkflowServiceStartBackgroundCheckWorkflowProcedure = "/v1consortium.services.WorkflowService/StartBackgroundCheckWorkflow"
	// WorkflowServiceStartNotificationWorkflowProcedure is the fully-qualified name of the
	// WorkflowService's StartNotificationWorkflow RPC.
	WorkflowServiceStartNotificationWorkflowProcedure = "/v1consortium.services.WorkflowService/StartNotificationWorkflow"
	// WorkflowServiceGetWorkflowAnalyticsProcedure is the fully-qualified name of the WorkflowService's
	// GetWorkflowAnalytics RPC.
	WorkflowServiceGetWorkflowAnalyticsProcedure = "/v1consortium.services.WorkflowService/GetWorkflowAnalytics"
	// WorkflowServiceGetFailedWorkflowsProcedure is the fully-qualified name of the WorkflowService's
	// GetFailedWorkflows RPC.
	WorkflowServiceGetFailedWorkflowsProcedure = "/v1consortium.services.WorkflowService/GetFailedWorkflows"
	// WorkflowServiceGetRunningWorkflowsProcedure is the fully-qualified name of the WorkflowService's
	// GetRunningWorkflows RPC.
	WorkflowServiceGetRunningWorkflowsProcedure = "/v1consortium.services.WorkflowService/GetRunningWorkflows"
)

// WorkflowServiceClient is a client for the v1consortium.services.WorkflowService service.
type WorkflowServiceClient interface {
	// Generic Workflow Management
	StartWorkflow(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error)
	UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error)
	CancelWorkflow(context.Context, *connect.Request[v1.CancelWorkflowRequest]) (*connect.Response[v1.CancelWorkflowResponse], error)
	RetryWorkflow(context.Context, *connect.Request[v1.RetryWorkflowRequest]) (*connect.Response[v1.RetryWorkflowResponse], error)
	// Specific Workflow Types
	StartDrugTestOrderWorkflow(context.Context, *connect.Request[v1.StartDrugTestOrderWorkflowRequest]) (*connect.Response[v1.StartDrugTestOrderWorkflowResponse], error)
	StartMVRMonitoringWorkflow(context.Context, *connect.Request[v1.StartMVRMonitoringWorkflowRequest]) (*connect.Response[v1.StartMVRMonitoringWorkflowResponse], error)
	StartRandomSelectionWorkflow(context.Context, *connect.Request[v1.StartRandomSelectionWorkflowRequest]) (*connect.Response[v1.StartRandomSelectionWorkflowResponse], error)
	StartBackgroundCheckWorkflow(context.Context, *connect.Request[v1.StartBackgroundCheckWorkflowRequest]) (*connect.Response[v1.StartBackgroundCheckWorkflowResponse], error)
	StartNotificationWorkflow(context.Context, *connect.Request[v1.StartNotificationWorkflowRequest]) (*connect.Response[v1.StartNotificationWorkflowResponse], error)
	// Workflow Analytics and Monitoring
	GetWorkflowAnalytics(context.Context, *connect.Request[v1.GetWorkflowAnalyticsRequest]) (*connect.Response[v1.GetWorkflowAnalyticsResponse], error)
	GetFailedWorkflows(context.Context, *connect.Request[v1.GetFailedWorkflowsRequest]) (*connect.Response[v1.GetFailedWorkflowsResponse], error)
	GetRunningWorkflows(context.Context, *connect.Request[v1.GetRunningWorkflowsRequest]) (*connect.Response[v1.GetRunningWorkflowsResponse], error)
}

// NewWorkflowServiceClient constructs a client for the v1consortium.services.WorkflowService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkflowServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkflowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workflowServiceMethods := v1.File_services_v1_workflow_proto.Services().ByName("WorkflowService").Methods()
	return &workflowServiceClient{
		startWorkflow: connect.NewClient[v1.StartWorkflowRequest, v1.StartWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceStartWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartWorkflow")),
			connect.WithClientOptions(opts...),
		),
		getWorkflow: connect.NewClient[v1.GetWorkflowRequest, v1.GetWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceGetWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("GetWorkflow")),
			connect.WithClientOptions(opts...),
		),
		listWorkflows: connect.NewClient[v1.ListWorkflowsRequest, v1.ListWorkflowsResponse](
			httpClient,
			baseURL+WorkflowServiceListWorkflowsProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("ListWorkflows")),
			connect.WithClientOptions(opts...),
		),
		updateWorkflow: connect.NewClient[v1.UpdateWorkflowRequest, v1.UpdateWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceUpdateWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("UpdateWorkflow")),
			connect.WithClientOptions(opts...),
		),
		cancelWorkflow: connect.NewClient[v1.CancelWorkflowRequest, v1.CancelWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceCancelWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("CancelWorkflow")),
			connect.WithClientOptions(opts...),
		),
		retryWorkflow: connect.NewClient[v1.RetryWorkflowRequest, v1.RetryWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceRetryWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("RetryWorkflow")),
			connect.WithClientOptions(opts...),
		),
		startDrugTestOrderWorkflow: connect.NewClient[v1.StartDrugTestOrderWorkflowRequest, v1.StartDrugTestOrderWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceStartDrugTestOrderWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartDrugTestOrderWorkflow")),
			connect.WithClientOptions(opts...),
		),
		startMVRMonitoringWorkflow: connect.NewClient[v1.StartMVRMonitoringWorkflowRequest, v1.StartMVRMonitoringWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceStartMVRMonitoringWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartMVRMonitoringWorkflow")),
			connect.WithClientOptions(opts...),
		),
		startRandomSelectionWorkflow: connect.NewClient[v1.StartRandomSelectionWorkflowRequest, v1.StartRandomSelectionWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceStartRandomSelectionWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartRandomSelectionWorkflow")),
			connect.WithClientOptions(opts...),
		),
		startBackgroundCheckWorkflow: connect.NewClient[v1.StartBackgroundCheckWorkflowRequest, v1.StartBackgroundCheckWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceStartBackgroundCheckWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartBackgroundCheckWorkflow")),
			connect.WithClientOptions(opts...),
		),
		startNotificationWorkflow: connect.NewClient[v1.StartNotificationWorkflowRequest, v1.StartNotificationWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceStartNotificationWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartNotificationWorkflow")),
			connect.WithClientOptions(opts...),
		),
		getWorkflowAnalytics: connect.NewClient[v1.GetWorkflowAnalyticsRequest, v1.GetWorkflowAnalyticsResponse](
			httpClient,
			baseURL+WorkflowServiceGetWorkflowAnalyticsProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("GetWorkflowAnalytics")),
			connect.WithClientOptions(opts...),
		),
		getFailedWorkflows: connect.NewClient[v1.GetFailedWorkflowsRequest, v1.GetFailedWorkflowsResponse](
			httpClient,
			baseURL+WorkflowServiceGetFailedWorkflowsProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("GetFailedWorkflows")),
			connect.WithClientOptions(opts...),
		),
		getRunningWorkflows: connect.NewClient[v1.GetRunningWorkflowsRequest, v1.GetRunningWorkflowsResponse](
			httpClient,
			baseURL+WorkflowServiceGetRunningWorkflowsProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("GetRunningWorkflows")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workflowServiceClient implements WorkflowServiceClient.
type workflowServiceClient struct {
	startWorkflow                *connect.Client[v1.StartWorkflowRequest, v1.StartWorkflowResponse]
	getWorkflow                  *connect.Client[v1.GetWorkflowRequest, v1.GetWorkflowResponse]
	listWorkflows                *connect.Client[v1.ListWorkflowsRequest, v1.ListWorkflowsResponse]
	updateWorkflow               *connect.Client[v1.UpdateWorkflowRequest, v1.UpdateWorkflowResponse]
	cancelWorkflow               *connect.Client[v1.CancelWorkflowRequest, v1.CancelWorkflowResponse]
	retryWorkflow                *connect.Client[v1.RetryWorkflowRequest, v1.RetryWorkflowResponse]
	startDrugTestOrderWorkflow   *connect.Client[v1.StartDrugTestOrderWorkflowRequest, v1.StartDrugTestOrderWorkflowResponse]
	startMVRMonitoringWorkflow   *connect.Client[v1.StartMVRMonitoringWorkflowRequest, v1.StartMVRMonitoringWorkflowResponse]
	startRandomSelectionWorkflow *connect.Client[v1.StartRandomSelectionWorkflowRequest, v1.StartRandomSelectionWorkflowResponse]
	startBackgroundCheckWorkflow *connect.Client[v1.StartBackgroundCheckWorkflowRequest, v1.StartBackgroundCheckWorkflowResponse]
	startNotificationWorkflow    *connect.Client[v1.StartNotificationWorkflowRequest, v1.StartNotificationWorkflowResponse]
	getWorkflowAnalytics         *connect.Client[v1.GetWorkflowAnalyticsRequest, v1.GetWorkflowAnalyticsResponse]
	getFailedWorkflows           *connect.Client[v1.GetFailedWorkflowsRequest, v1.GetFailedWorkflowsResponse]
	getRunningWorkflows          *connect.Client[v1.GetRunningWorkflowsRequest, v1.GetRunningWorkflowsResponse]
}

// StartWorkflow calls v1consortium.services.WorkflowService.StartWorkflow.
func (c *workflowServiceClient) StartWorkflow(ctx context.Context, req *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error) {
	return c.startWorkflow.CallUnary(ctx, req)
}

// GetWorkflow calls v1consortium.services.WorkflowService.GetWorkflow.
func (c *workflowServiceClient) GetWorkflow(ctx context.Context, req *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// ListWorkflows calls v1consortium.services.WorkflowService.ListWorkflows.
func (c *workflowServiceClient) ListWorkflows(ctx context.Context, req *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error) {
	return c.listWorkflows.CallUnary(ctx, req)
}

// UpdateWorkflow calls v1consortium.services.WorkflowService.UpdateWorkflow.
func (c *workflowServiceClient) UpdateWorkflow(ctx context.Context, req *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error) {
	return c.updateWorkflow.CallUnary(ctx, req)
}

// CancelWorkflow calls v1consortium.services.WorkflowService.CancelWorkflow.
func (c *workflowServiceClient) CancelWorkflow(ctx context.Context, req *connect.Request[v1.CancelWorkflowRequest]) (*connect.Response[v1.CancelWorkflowResponse], error) {
	return c.cancelWorkflow.CallUnary(ctx, req)
}

// RetryWorkflow calls v1consortium.services.WorkflowService.RetryWorkflow.
func (c *workflowServiceClient) RetryWorkflow(ctx context.Context, req *connect.Request[v1.RetryWorkflowRequest]) (*connect.Response[v1.RetryWorkflowResponse], error) {
	return c.retryWorkflow.CallUnary(ctx, req)
}

// StartDrugTestOrderWorkflow calls
// v1consortium.services.WorkflowService.StartDrugTestOrderWorkflow.
func (c *workflowServiceClient) StartDrugTestOrderWorkflow(ctx context.Context, req *connect.Request[v1.StartDrugTestOrderWorkflowRequest]) (*connect.Response[v1.StartDrugTestOrderWorkflowResponse], error) {
	return c.startDrugTestOrderWorkflow.CallUnary(ctx, req)
}

// StartMVRMonitoringWorkflow calls
// v1consortium.services.WorkflowService.StartMVRMonitoringWorkflow.
func (c *workflowServiceClient) StartMVRMonitoringWorkflow(ctx context.Context, req *connect.Request[v1.StartMVRMonitoringWorkflowRequest]) (*connect.Response[v1.StartMVRMonitoringWorkflowResponse], error) {
	return c.startMVRMonitoringWorkflow.CallUnary(ctx, req)
}

// StartRandomSelectionWorkflow calls
// v1consortium.services.WorkflowService.StartRandomSelectionWorkflow.
func (c *workflowServiceClient) StartRandomSelectionWorkflow(ctx context.Context, req *connect.Request[v1.StartRandomSelectionWorkflowRequest]) (*connect.Response[v1.StartRandomSelectionWorkflowResponse], error) {
	return c.startRandomSelectionWorkflow.CallUnary(ctx, req)
}

// StartBackgroundCheckWorkflow calls
// v1consortium.services.WorkflowService.StartBackgroundCheckWorkflow.
func (c *workflowServiceClient) StartBackgroundCheckWorkflow(ctx context.Context, req *connect.Request[v1.StartBackgroundCheckWorkflowRequest]) (*connect.Response[v1.StartBackgroundCheckWorkflowResponse], error) {
	return c.startBackgroundCheckWorkflow.CallUnary(ctx, req)
}

// StartNotificationWorkflow calls v1consortium.services.WorkflowService.StartNotificationWorkflow.
func (c *workflowServiceClient) StartNotificationWorkflow(ctx context.Context, req *connect.Request[v1.StartNotificationWorkflowRequest]) (*connect.Response[v1.StartNotificationWorkflowResponse], error) {
	return c.startNotificationWorkflow.CallUnary(ctx, req)
}

// GetWorkflowAnalytics calls v1consortium.services.WorkflowService.GetWorkflowAnalytics.
func (c *workflowServiceClient) GetWorkflowAnalytics(ctx context.Context, req *connect.Request[v1.GetWorkflowAnalyticsRequest]) (*connect.Response[v1.GetWorkflowAnalyticsResponse], error) {
	return c.getWorkflowAnalytics.CallUnary(ctx, req)
}

// GetFailedWorkflows calls v1consortium.services.WorkflowService.GetFailedWorkflows.
func (c *workflowServiceClient) GetFailedWorkflows(ctx context.Context, req *connect.Request[v1.GetFailedWorkflowsRequest]) (*connect.Response[v1.GetFailedWorkflowsResponse], error) {
	return c.getFailedWorkflows.CallUnary(ctx, req)
}

// GetRunningWorkflows calls v1consortium.services.WorkflowService.GetRunningWorkflows.
func (c *workflowServiceClient) GetRunningWorkflows(ctx context.Context, req *connect.Request[v1.GetRunningWorkflowsRequest]) (*connect.Response[v1.GetRunningWorkflowsResponse], error) {
	return c.getRunningWorkflows.CallUnary(ctx, req)
}

// WorkflowServiceHandler is an implementation of the v1consortium.services.WorkflowService service.
type WorkflowServiceHandler interface {
	// Generic Workflow Management
	StartWorkflow(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error)
	GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error)
	UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error)
	CancelWorkflow(context.Context, *connect.Request[v1.CancelWorkflowRequest]) (*connect.Response[v1.CancelWorkflowResponse], error)
	RetryWorkflow(context.Context, *connect.Request[v1.RetryWorkflowRequest]) (*connect.Response[v1.RetryWorkflowResponse], error)
	// Specific Workflow Types
	StartDrugTestOrderWorkflow(context.Context, *connect.Request[v1.StartDrugTestOrderWorkflowRequest]) (*connect.Response[v1.StartDrugTestOrderWorkflowResponse], error)
	StartMVRMonitoringWorkflow(context.Context, *connect.Request[v1.StartMVRMonitoringWorkflowRequest]) (*connect.Response[v1.StartMVRMonitoringWorkflowResponse], error)
	StartRandomSelectionWorkflow(context.Context, *connect.Request[v1.StartRandomSelectionWorkflowRequest]) (*connect.Response[v1.StartRandomSelectionWorkflowResponse], error)
	StartBackgroundCheckWorkflow(context.Context, *connect.Request[v1.StartBackgroundCheckWorkflowRequest]) (*connect.Response[v1.StartBackgroundCheckWorkflowResponse], error)
	StartNotificationWorkflow(context.Context, *connect.Request[v1.StartNotificationWorkflowRequest]) (*connect.Response[v1.StartNotificationWorkflowResponse], error)
	// Workflow Analytics and Monitoring
	GetWorkflowAnalytics(context.Context, *connect.Request[v1.GetWorkflowAnalyticsRequest]) (*connect.Response[v1.GetWorkflowAnalyticsResponse], error)
	GetFailedWorkflows(context.Context, *connect.Request[v1.GetFailedWorkflowsRequest]) (*connect.Response[v1.GetFailedWorkflowsResponse], error)
	GetRunningWorkflows(context.Context, *connect.Request[v1.GetRunningWorkflowsRequest]) (*connect.Response[v1.GetRunningWorkflowsResponse], error)
}

// NewWorkflowServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkflowServiceHandler(svc WorkflowServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workflowServiceMethods := v1.File_services_v1_workflow_proto.Services().ByName("WorkflowService").Methods()
	workflowServiceStartWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceStartWorkflowProcedure,
		svc.StartWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("StartWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceGetWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceGetWorkflowProcedure,
		svc.GetWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("GetWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceListWorkflowsHandler := connect.NewUnaryHandler(
		WorkflowServiceListWorkflowsProcedure,
		svc.ListWorkflows,
		connect.WithSchema(workflowServiceMethods.ByName("ListWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceUpdateWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceUpdateWorkflowProcedure,
		svc.UpdateWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("UpdateWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceCancelWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceCancelWorkflowProcedure,
		svc.CancelWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("CancelWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceRetryWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceRetryWorkflowProcedure,
		svc.RetryWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("RetryWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStartDrugTestOrderWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceStartDrugTestOrderWorkflowProcedure,
		svc.StartDrugTestOrderWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("StartDrugTestOrderWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStartMVRMonitoringWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceStartMVRMonitoringWorkflowProcedure,
		svc.StartMVRMonitoringWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("StartMVRMonitoringWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStartRandomSelectionWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceStartRandomSelectionWorkflowProcedure,
		svc.StartRandomSelectionWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("StartRandomSelectionWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStartBackgroundCheckWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceStartBackgroundCheckWorkflowProcedure,
		svc.StartBackgroundCheckWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("StartBackgroundCheckWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStartNotificationWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceStartNotificationWorkflowProcedure,
		svc.StartNotificationWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("StartNotificationWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceGetWorkflowAnalyticsHandler := connect.NewUnaryHandler(
		WorkflowServiceGetWorkflowAnalyticsProcedure,
		svc.GetWorkflowAnalytics,
		connect.WithSchema(workflowServiceMethods.ByName("GetWorkflowAnalytics")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceGetFailedWorkflowsHandler := connect.NewUnaryHandler(
		WorkflowServiceGetFailedWorkflowsProcedure,
		svc.GetFailedWorkflows,
		connect.WithSchema(workflowServiceMethods.ByName("GetFailedWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceGetRunningWorkflowsHandler := connect.NewUnaryHandler(
		WorkflowServiceGetRunningWorkflowsProcedure,
		svc.GetRunningWorkflows,
		connect.WithSchema(workflowServiceMethods.ByName("GetRunningWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.WorkflowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkflowServiceStartWorkflowProcedure:
			workflowServiceStartWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceGetWorkflowProcedure:
			workflowServiceGetWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceListWorkflowsProcedure:
			workflowServiceListWorkflowsHandler.ServeHTTP(w, r)
		case WorkflowServiceUpdateWorkflowProcedure:
			workflowServiceUpdateWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceCancelWorkflowProcedure:
			workflowServiceCancelWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceRetryWorkflowProcedure:
			workflowServiceRetryWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceStartDrugTestOrderWorkflowProcedure:
			workflowServiceStartDrugTestOrderWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceStartMVRMonitoringWorkflowProcedure:
			workflowServiceStartMVRMonitoringWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceStartRandomSelectionWorkflowProcedure:
			workflowServiceStartRandomSelectionWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceStartBackgroundCheckWorkflowProcedure:
			workflowServiceStartBackgroundCheckWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceStartNotificationWorkflowProcedure:
			workflowServiceStartNotificationWorkflowHandler.ServeHTTP(w, r)
		case WorkflowServiceGetWorkflowAnalyticsProcedure:
			workflowServiceGetWorkflowAnalyticsHandler.ServeHTTP(w, r)
		case WorkflowServiceGetFailedWorkflowsProcedure:
			workflowServiceGetFailedWorkflowsHandler.ServeHTTP(w, r)
		case WorkflowServiceGetRunningWorkflowsProcedure:
			workflowServiceGetRunningWorkflowsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkflowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkflowServiceHandler struct{}

func (UnimplementedWorkflowServiceHandler) StartWorkflow(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.StartWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.GetWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.ListWorkflows is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.UpdateWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.UpdateWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) CancelWorkflow(context.Context, *connect.Request[v1.CancelWorkflowRequest]) (*connect.Response[v1.CancelWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.CancelWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) RetryWorkflow(context.Context, *connect.Request[v1.RetryWorkflowRequest]) (*connect.Response[v1.RetryWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.RetryWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StartDrugTestOrderWorkflow(context.Context, *connect.Request[v1.StartDrugTestOrderWorkflowRequest]) (*connect.Response[v1.StartDrugTestOrderWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.StartDrugTestOrderWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StartMVRMonitoringWorkflow(context.Context, *connect.Request[v1.StartMVRMonitoringWorkflowRequest]) (*connect.Response[v1.StartMVRMonitoringWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.StartMVRMonitoringWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StartRandomSelectionWorkflow(context.Context, *connect.Request[v1.StartRandomSelectionWorkflowRequest]) (*connect.Response[v1.StartRandomSelectionWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.StartRandomSelectionWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StartBackgroundCheckWorkflow(context.Context, *connect.Request[v1.StartBackgroundCheckWorkflowRequest]) (*connect.Response[v1.StartBackgroundCheckWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.StartBackgroundCheckWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StartNotificationWorkflow(context.Context, *connect.Request[v1.StartNotificationWorkflowRequest]) (*connect.Response[v1.StartNotificationWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.StartNotificationWorkflow is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) GetWorkflowAnalytics(context.Context, *connect.Request[v1.GetWorkflowAnalyticsRequest]) (*connect.Response[v1.GetWorkflowAnalyticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.GetWorkflowAnalytics is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) GetFailedWorkflows(context.Context, *connect.Request[v1.GetFailedWorkflowsRequest]) (*connect.Response[v1.GetFailedWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.GetFailedWorkflows is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) GetRunningWorkflows(context.Context, *connect.Request[v1.GetRunningWorkflowsRequest]) (*connect.Response[v1.GetRunningWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.WorkflowService.GetRunningWorkflows is not implemented"))
}
