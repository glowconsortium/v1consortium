// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/v1/drug_testing.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/services/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DrugTestingServiceName is the fully-qualified name of the DrugTestingService service.
	DrugTestingServiceName = "v1consortium.services.DrugTestingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DrugTestingServiceCreateTestingProgramProcedure is the fully-qualified name of the
	// DrugTestingService's CreateTestingProgram RPC.
	DrugTestingServiceCreateTestingProgramProcedure = "/v1consortium.services.DrugTestingService/CreateTestingProgram"
	// DrugTestingServiceGetTestingProgramProcedure is the fully-qualified name of the
	// DrugTestingService's GetTestingProgram RPC.
	DrugTestingServiceGetTestingProgramProcedure = "/v1consortium.services.DrugTestingService/GetTestingProgram"
	// DrugTestingServiceListTestingProgramsProcedure is the fully-qualified name of the
	// DrugTestingService's ListTestingPrograms RPC.
	DrugTestingServiceListTestingProgramsProcedure = "/v1consortium.services.DrugTestingService/ListTestingPrograms"
	// DrugTestingServiceOrderDrugTestProcedure is the fully-qualified name of the DrugTestingService's
	// OrderDrugTest RPC.
	DrugTestingServiceOrderDrugTestProcedure = "/v1consortium.services.DrugTestingService/OrderDrugTest"
	// DrugTestingServiceGetDrugTestProcedure is the fully-qualified name of the DrugTestingService's
	// GetDrugTest RPC.
	DrugTestingServiceGetDrugTestProcedure = "/v1consortium.services.DrugTestingService/GetDrugTest"
	// DrugTestingServiceUpdateDrugTestProcedure is the fully-qualified name of the DrugTestingService's
	// UpdateDrugTest RPC.
	DrugTestingServiceUpdateDrugTestProcedure = "/v1consortium.services.DrugTestingService/UpdateDrugTest"
	// DrugTestingServiceListDrugTestsProcedure is the fully-qualified name of the DrugTestingService's
	// ListDrugTests RPC.
	DrugTestingServiceListDrugTestsProcedure = "/v1consortium.services.DrugTestingService/ListDrugTests"
	// DrugTestingServiceCreateRandomPoolProcedure is the fully-qualified name of the
	// DrugTestingService's CreateRandomPool RPC.
	DrugTestingServiceCreateRandomPoolProcedure = "/v1consortium.services.DrugTestingService/CreateRandomPool"
	// DrugTestingServiceAddUsersToPoolProcedure is the fully-qualified name of the DrugTestingService's
	// AddUsersToPool RPC.
	DrugTestingServiceAddUsersToPoolProcedure = "/v1consortium.services.DrugTestingService/AddUsersToPool"
	// DrugTestingServiceRemoveUsersFromPoolProcedure is the fully-qualified name of the
	// DrugTestingService's RemoveUsersFromPool RPC.
	DrugTestingServiceRemoveUsersFromPoolProcedure = "/v1consortium.services.DrugTestingService/RemoveUsersFromPool"
	// DrugTestingServiceGetRandomPoolProcedure is the fully-qualified name of the DrugTestingService's
	// GetRandomPool RPC.
	DrugTestingServiceGetRandomPoolProcedure = "/v1consortium.services.DrugTestingService/GetRandomPool"
	// DrugTestingServiceListRandomPoolsProcedure is the fully-qualified name of the
	// DrugTestingService's ListRandomPools RPC.
	DrugTestingServiceListRandomPoolsProcedure = "/v1consortium.services.DrugTestingService/ListRandomPools"
	// DrugTestingServiceConductRandomSelectionProcedure is the fully-qualified name of the
	// DrugTestingService's ConductRandomSelection RPC.
	DrugTestingServiceConductRandomSelectionProcedure = "/v1consortium.services.DrugTestingService/ConductRandomSelection"
	// DrugTestingServiceGetRandomSelectionProcedure is the fully-qualified name of the
	// DrugTestingService's GetRandomSelection RPC.
	DrugTestingServiceGetRandomSelectionProcedure = "/v1consortium.services.DrugTestingService/GetRandomSelection"
	// DrugTestingServiceListRandomSelectionsProcedure is the fully-qualified name of the
	// DrugTestingService's ListRandomSelections RPC.
	DrugTestingServiceListRandomSelectionsProcedure = "/v1consortium.services.DrugTestingService/ListRandomSelections"
	// DrugTestingServiceValidateRandomSelectionProcedure is the fully-qualified name of the
	// DrugTestingService's ValidateRandomSelection RPC.
	DrugTestingServiceValidateRandomSelectionProcedure = "/v1consortium.services.DrugTestingService/ValidateRandomSelection"
)

// DrugTestingServiceClient is a client for the v1consortium.services.DrugTestingService service.
type DrugTestingServiceClient interface {
	// Testing Program Management
	CreateTestingProgram(context.Context, *connect.Request[v1.CreateTestingProgramRequest]) (*connect.Response[v1.CreateTestingProgramResponse], error)
	GetTestingProgram(context.Context, *connect.Request[v1.GetTestingProgramRequest]) (*connect.Response[v1.GetTestingProgramResponse], error)
	ListTestingPrograms(context.Context, *connect.Request[v1.ListTestingProgramsRequest]) (*connect.Response[v1.ListTestingProgramsResponse], error)
	// Drug Test Management
	OrderDrugTest(context.Context, *connect.Request[v1.OrderDrugTestRequest]) (*connect.Response[v1.OrderDrugTestResponse], error)
	GetDrugTest(context.Context, *connect.Request[v1.GetDrugTestRequest]) (*connect.Response[v1.GetDrugTestResponse], error)
	UpdateDrugTest(context.Context, *connect.Request[v1.UpdateDrugTestRequest]) (*connect.Response[v1.UpdateDrugTestResponse], error)
	ListDrugTests(context.Context, *connect.Request[v1.ListDrugTestsRequest]) (*connect.Response[v1.ListDrugTestsResponse], error)
	// Random Testing Pool Management
	CreateRandomPool(context.Context, *connect.Request[v1.CreateRandomPoolRequest]) (*connect.Response[v1.CreateRandomPoolResponse], error)
	AddUsersToPool(context.Context, *connect.Request[v1.AddUsersToPoolRequest]) (*connect.Response[v1.AddUsersToPoolResponse], error)
	RemoveUsersFromPool(context.Context, *connect.Request[v1.RemoveUsersFromPoolRequest]) (*connect.Response[v1.RemoveUsersFromPoolResponse], error)
	GetRandomPool(context.Context, *connect.Request[v1.GetRandomPoolRequest]) (*connect.Response[v1.GetRandomPoolResponse], error)
	ListRandomPools(context.Context, *connect.Request[v1.ListRandomPoolsRequest]) (*connect.Response[v1.ListRandomPoolsResponse], error)
	// Random Selection Management
	ConductRandomSelection(context.Context, *connect.Request[v1.ConductRandomSelectionRequest]) (*connect.Response[v1.ConductRandomSelectionResponse], error)
	GetRandomSelection(context.Context, *connect.Request[v1.GetRandomSelectionRequest]) (*connect.Response[v1.GetRandomSelectionResponse], error)
	ListRandomSelections(context.Context, *connect.Request[v1.ListRandomSelectionsRequest]) (*connect.Response[v1.ListRandomSelectionsResponse], error)
	ValidateRandomSelection(context.Context, *connect.Request[v1.ValidateRandomSelectionRequest]) (*connect.Response[v1.ValidateRandomSelectionResponse], error)
}

// NewDrugTestingServiceClient constructs a client for the v1consortium.services.DrugTestingService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDrugTestingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DrugTestingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	drugTestingServiceMethods := v1.File_services_v1_drug_testing_proto.Services().ByName("DrugTestingService").Methods()
	return &drugTestingServiceClient{
		createTestingProgram: connect.NewClient[v1.CreateTestingProgramRequest, v1.CreateTestingProgramResponse](
			httpClient,
			baseURL+DrugTestingServiceCreateTestingProgramProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("CreateTestingProgram")),
			connect.WithClientOptions(opts...),
		),
		getTestingProgram: connect.NewClient[v1.GetTestingProgramRequest, v1.GetTestingProgramResponse](
			httpClient,
			baseURL+DrugTestingServiceGetTestingProgramProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("GetTestingProgram")),
			connect.WithClientOptions(opts...),
		),
		listTestingPrograms: connect.NewClient[v1.ListTestingProgramsRequest, v1.ListTestingProgramsResponse](
			httpClient,
			baseURL+DrugTestingServiceListTestingProgramsProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("ListTestingPrograms")),
			connect.WithClientOptions(opts...),
		),
		orderDrugTest: connect.NewClient[v1.OrderDrugTestRequest, v1.OrderDrugTestResponse](
			httpClient,
			baseURL+DrugTestingServiceOrderDrugTestProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("OrderDrugTest")),
			connect.WithClientOptions(opts...),
		),
		getDrugTest: connect.NewClient[v1.GetDrugTestRequest, v1.GetDrugTestResponse](
			httpClient,
			baseURL+DrugTestingServiceGetDrugTestProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("GetDrugTest")),
			connect.WithClientOptions(opts...),
		),
		updateDrugTest: connect.NewClient[v1.UpdateDrugTestRequest, v1.UpdateDrugTestResponse](
			httpClient,
			baseURL+DrugTestingServiceUpdateDrugTestProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("UpdateDrugTest")),
			connect.WithClientOptions(opts...),
		),
		listDrugTests: connect.NewClient[v1.ListDrugTestsRequest, v1.ListDrugTestsResponse](
			httpClient,
			baseURL+DrugTestingServiceListDrugTestsProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("ListDrugTests")),
			connect.WithClientOptions(opts...),
		),
		createRandomPool: connect.NewClient[v1.CreateRandomPoolRequest, v1.CreateRandomPoolResponse](
			httpClient,
			baseURL+DrugTestingServiceCreateRandomPoolProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("CreateRandomPool")),
			connect.WithClientOptions(opts...),
		),
		addUsersToPool: connect.NewClient[v1.AddUsersToPoolRequest, v1.AddUsersToPoolResponse](
			httpClient,
			baseURL+DrugTestingServiceAddUsersToPoolProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("AddUsersToPool")),
			connect.WithClientOptions(opts...),
		),
		removeUsersFromPool: connect.NewClient[v1.RemoveUsersFromPoolRequest, v1.RemoveUsersFromPoolResponse](
			httpClient,
			baseURL+DrugTestingServiceRemoveUsersFromPoolProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("RemoveUsersFromPool")),
			connect.WithClientOptions(opts...),
		),
		getRandomPool: connect.NewClient[v1.GetRandomPoolRequest, v1.GetRandomPoolResponse](
			httpClient,
			baseURL+DrugTestingServiceGetRandomPoolProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("GetRandomPool")),
			connect.WithClientOptions(opts...),
		),
		listRandomPools: connect.NewClient[v1.ListRandomPoolsRequest, v1.ListRandomPoolsResponse](
			httpClient,
			baseURL+DrugTestingServiceListRandomPoolsProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("ListRandomPools")),
			connect.WithClientOptions(opts...),
		),
		conductRandomSelection: connect.NewClient[v1.ConductRandomSelectionRequest, v1.ConductRandomSelectionResponse](
			httpClient,
			baseURL+DrugTestingServiceConductRandomSelectionProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("ConductRandomSelection")),
			connect.WithClientOptions(opts...),
		),
		getRandomSelection: connect.NewClient[v1.GetRandomSelectionRequest, v1.GetRandomSelectionResponse](
			httpClient,
			baseURL+DrugTestingServiceGetRandomSelectionProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("GetRandomSelection")),
			connect.WithClientOptions(opts...),
		),
		listRandomSelections: connect.NewClient[v1.ListRandomSelectionsRequest, v1.ListRandomSelectionsResponse](
			httpClient,
			baseURL+DrugTestingServiceListRandomSelectionsProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("ListRandomSelections")),
			connect.WithClientOptions(opts...),
		),
		validateRandomSelection: connect.NewClient[v1.ValidateRandomSelectionRequest, v1.ValidateRandomSelectionResponse](
			httpClient,
			baseURL+DrugTestingServiceValidateRandomSelectionProcedure,
			connect.WithSchema(drugTestingServiceMethods.ByName("ValidateRandomSelection")),
			connect.WithClientOptions(opts...),
		),
	}
}

// drugTestingServiceClient implements DrugTestingServiceClient.
type drugTestingServiceClient struct {
	createTestingProgram    *connect.Client[v1.CreateTestingProgramRequest, v1.CreateTestingProgramResponse]
	getTestingProgram       *connect.Client[v1.GetTestingProgramRequest, v1.GetTestingProgramResponse]
	listTestingPrograms     *connect.Client[v1.ListTestingProgramsRequest, v1.ListTestingProgramsResponse]
	orderDrugTest           *connect.Client[v1.OrderDrugTestRequest, v1.OrderDrugTestResponse]
	getDrugTest             *connect.Client[v1.GetDrugTestRequest, v1.GetDrugTestResponse]
	updateDrugTest          *connect.Client[v1.UpdateDrugTestRequest, v1.UpdateDrugTestResponse]
	listDrugTests           *connect.Client[v1.ListDrugTestsRequest, v1.ListDrugTestsResponse]
	createRandomPool        *connect.Client[v1.CreateRandomPoolRequest, v1.CreateRandomPoolResponse]
	addUsersToPool          *connect.Client[v1.AddUsersToPoolRequest, v1.AddUsersToPoolResponse]
	removeUsersFromPool     *connect.Client[v1.RemoveUsersFromPoolRequest, v1.RemoveUsersFromPoolResponse]
	getRandomPool           *connect.Client[v1.GetRandomPoolRequest, v1.GetRandomPoolResponse]
	listRandomPools         *connect.Client[v1.ListRandomPoolsRequest, v1.ListRandomPoolsResponse]
	conductRandomSelection  *connect.Client[v1.ConductRandomSelectionRequest, v1.ConductRandomSelectionResponse]
	getRandomSelection      *connect.Client[v1.GetRandomSelectionRequest, v1.GetRandomSelectionResponse]
	listRandomSelections    *connect.Client[v1.ListRandomSelectionsRequest, v1.ListRandomSelectionsResponse]
	validateRandomSelection *connect.Client[v1.ValidateRandomSelectionRequest, v1.ValidateRandomSelectionResponse]
}

// CreateTestingProgram calls v1consortium.services.DrugTestingService.CreateTestingProgram.
func (c *drugTestingServiceClient) CreateTestingProgram(ctx context.Context, req *connect.Request[v1.CreateTestingProgramRequest]) (*connect.Response[v1.CreateTestingProgramResponse], error) {
	return c.createTestingProgram.CallUnary(ctx, req)
}

// GetTestingProgram calls v1consortium.services.DrugTestingService.GetTestingProgram.
func (c *drugTestingServiceClient) GetTestingProgram(ctx context.Context, req *connect.Request[v1.GetTestingProgramRequest]) (*connect.Response[v1.GetTestingProgramResponse], error) {
	return c.getTestingProgram.CallUnary(ctx, req)
}

// ListTestingPrograms calls v1consortium.services.DrugTestingService.ListTestingPrograms.
func (c *drugTestingServiceClient) ListTestingPrograms(ctx context.Context, req *connect.Request[v1.ListTestingProgramsRequest]) (*connect.Response[v1.ListTestingProgramsResponse], error) {
	return c.listTestingPrograms.CallUnary(ctx, req)
}

// OrderDrugTest calls v1consortium.services.DrugTestingService.OrderDrugTest.
func (c *drugTestingServiceClient) OrderDrugTest(ctx context.Context, req *connect.Request[v1.OrderDrugTestRequest]) (*connect.Response[v1.OrderDrugTestResponse], error) {
	return c.orderDrugTest.CallUnary(ctx, req)
}

// GetDrugTest calls v1consortium.services.DrugTestingService.GetDrugTest.
func (c *drugTestingServiceClient) GetDrugTest(ctx context.Context, req *connect.Request[v1.GetDrugTestRequest]) (*connect.Response[v1.GetDrugTestResponse], error) {
	return c.getDrugTest.CallUnary(ctx, req)
}

// UpdateDrugTest calls v1consortium.services.DrugTestingService.UpdateDrugTest.
func (c *drugTestingServiceClient) UpdateDrugTest(ctx context.Context, req *connect.Request[v1.UpdateDrugTestRequest]) (*connect.Response[v1.UpdateDrugTestResponse], error) {
	return c.updateDrugTest.CallUnary(ctx, req)
}

// ListDrugTests calls v1consortium.services.DrugTestingService.ListDrugTests.
func (c *drugTestingServiceClient) ListDrugTests(ctx context.Context, req *connect.Request[v1.ListDrugTestsRequest]) (*connect.Response[v1.ListDrugTestsResponse], error) {
	return c.listDrugTests.CallUnary(ctx, req)
}

// CreateRandomPool calls v1consortium.services.DrugTestingService.CreateRandomPool.
func (c *drugTestingServiceClient) CreateRandomPool(ctx context.Context, req *connect.Request[v1.CreateRandomPoolRequest]) (*connect.Response[v1.CreateRandomPoolResponse], error) {
	return c.createRandomPool.CallUnary(ctx, req)
}

// AddUsersToPool calls v1consortium.services.DrugTestingService.AddUsersToPool.
func (c *drugTestingServiceClient) AddUsersToPool(ctx context.Context, req *connect.Request[v1.AddUsersToPoolRequest]) (*connect.Response[v1.AddUsersToPoolResponse], error) {
	return c.addUsersToPool.CallUnary(ctx, req)
}

// RemoveUsersFromPool calls v1consortium.services.DrugTestingService.RemoveUsersFromPool.
func (c *drugTestingServiceClient) RemoveUsersFromPool(ctx context.Context, req *connect.Request[v1.RemoveUsersFromPoolRequest]) (*connect.Response[v1.RemoveUsersFromPoolResponse], error) {
	return c.removeUsersFromPool.CallUnary(ctx, req)
}

// GetRandomPool calls v1consortium.services.DrugTestingService.GetRandomPool.
func (c *drugTestingServiceClient) GetRandomPool(ctx context.Context, req *connect.Request[v1.GetRandomPoolRequest]) (*connect.Response[v1.GetRandomPoolResponse], error) {
	return c.getRandomPool.CallUnary(ctx, req)
}

// ListRandomPools calls v1consortium.services.DrugTestingService.ListRandomPools.
func (c *drugTestingServiceClient) ListRandomPools(ctx context.Context, req *connect.Request[v1.ListRandomPoolsRequest]) (*connect.Response[v1.ListRandomPoolsResponse], error) {
	return c.listRandomPools.CallUnary(ctx, req)
}

// ConductRandomSelection calls v1consortium.services.DrugTestingService.ConductRandomSelection.
func (c *drugTestingServiceClient) ConductRandomSelection(ctx context.Context, req *connect.Request[v1.ConductRandomSelectionRequest]) (*connect.Response[v1.ConductRandomSelectionResponse], error) {
	return c.conductRandomSelection.CallUnary(ctx, req)
}

// GetRandomSelection calls v1consortium.services.DrugTestingService.GetRandomSelection.
func (c *drugTestingServiceClient) GetRandomSelection(ctx context.Context, req *connect.Request[v1.GetRandomSelectionRequest]) (*connect.Response[v1.GetRandomSelectionResponse], error) {
	return c.getRandomSelection.CallUnary(ctx, req)
}

// ListRandomSelections calls v1consortium.services.DrugTestingService.ListRandomSelections.
func (c *drugTestingServiceClient) ListRandomSelections(ctx context.Context, req *connect.Request[v1.ListRandomSelectionsRequest]) (*connect.Response[v1.ListRandomSelectionsResponse], error) {
	return c.listRandomSelections.CallUnary(ctx, req)
}

// ValidateRandomSelection calls v1consortium.services.DrugTestingService.ValidateRandomSelection.
func (c *drugTestingServiceClient) ValidateRandomSelection(ctx context.Context, req *connect.Request[v1.ValidateRandomSelectionRequest]) (*connect.Response[v1.ValidateRandomSelectionResponse], error) {
	return c.validateRandomSelection.CallUnary(ctx, req)
}

// DrugTestingServiceHandler is an implementation of the v1consortium.services.DrugTestingService
// service.
type DrugTestingServiceHandler interface {
	// Testing Program Management
	CreateTestingProgram(context.Context, *connect.Request[v1.CreateTestingProgramRequest]) (*connect.Response[v1.CreateTestingProgramResponse], error)
	GetTestingProgram(context.Context, *connect.Request[v1.GetTestingProgramRequest]) (*connect.Response[v1.GetTestingProgramResponse], error)
	ListTestingPrograms(context.Context, *connect.Request[v1.ListTestingProgramsRequest]) (*connect.Response[v1.ListTestingProgramsResponse], error)
	// Drug Test Management
	OrderDrugTest(context.Context, *connect.Request[v1.OrderDrugTestRequest]) (*connect.Response[v1.OrderDrugTestResponse], error)
	GetDrugTest(context.Context, *connect.Request[v1.GetDrugTestRequest]) (*connect.Response[v1.GetDrugTestResponse], error)
	UpdateDrugTest(context.Context, *connect.Request[v1.UpdateDrugTestRequest]) (*connect.Response[v1.UpdateDrugTestResponse], error)
	ListDrugTests(context.Context, *connect.Request[v1.ListDrugTestsRequest]) (*connect.Response[v1.ListDrugTestsResponse], error)
	// Random Testing Pool Management
	CreateRandomPool(context.Context, *connect.Request[v1.CreateRandomPoolRequest]) (*connect.Response[v1.CreateRandomPoolResponse], error)
	AddUsersToPool(context.Context, *connect.Request[v1.AddUsersToPoolRequest]) (*connect.Response[v1.AddUsersToPoolResponse], error)
	RemoveUsersFromPool(context.Context, *connect.Request[v1.RemoveUsersFromPoolRequest]) (*connect.Response[v1.RemoveUsersFromPoolResponse], error)
	GetRandomPool(context.Context, *connect.Request[v1.GetRandomPoolRequest]) (*connect.Response[v1.GetRandomPoolResponse], error)
	ListRandomPools(context.Context, *connect.Request[v1.ListRandomPoolsRequest]) (*connect.Response[v1.ListRandomPoolsResponse], error)
	// Random Selection Management
	ConductRandomSelection(context.Context, *connect.Request[v1.ConductRandomSelectionRequest]) (*connect.Response[v1.ConductRandomSelectionResponse], error)
	GetRandomSelection(context.Context, *connect.Request[v1.GetRandomSelectionRequest]) (*connect.Response[v1.GetRandomSelectionResponse], error)
	ListRandomSelections(context.Context, *connect.Request[v1.ListRandomSelectionsRequest]) (*connect.Response[v1.ListRandomSelectionsResponse], error)
	ValidateRandomSelection(context.Context, *connect.Request[v1.ValidateRandomSelectionRequest]) (*connect.Response[v1.ValidateRandomSelectionResponse], error)
}

// NewDrugTestingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDrugTestingServiceHandler(svc DrugTestingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	drugTestingServiceMethods := v1.File_services_v1_drug_testing_proto.Services().ByName("DrugTestingService").Methods()
	drugTestingServiceCreateTestingProgramHandler := connect.NewUnaryHandler(
		DrugTestingServiceCreateTestingProgramProcedure,
		svc.CreateTestingProgram,
		connect.WithSchema(drugTestingServiceMethods.ByName("CreateTestingProgram")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceGetTestingProgramHandler := connect.NewUnaryHandler(
		DrugTestingServiceGetTestingProgramProcedure,
		svc.GetTestingProgram,
		connect.WithSchema(drugTestingServiceMethods.ByName("GetTestingProgram")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceListTestingProgramsHandler := connect.NewUnaryHandler(
		DrugTestingServiceListTestingProgramsProcedure,
		svc.ListTestingPrograms,
		connect.WithSchema(drugTestingServiceMethods.ByName("ListTestingPrograms")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceOrderDrugTestHandler := connect.NewUnaryHandler(
		DrugTestingServiceOrderDrugTestProcedure,
		svc.OrderDrugTest,
		connect.WithSchema(drugTestingServiceMethods.ByName("OrderDrugTest")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceGetDrugTestHandler := connect.NewUnaryHandler(
		DrugTestingServiceGetDrugTestProcedure,
		svc.GetDrugTest,
		connect.WithSchema(drugTestingServiceMethods.ByName("GetDrugTest")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceUpdateDrugTestHandler := connect.NewUnaryHandler(
		DrugTestingServiceUpdateDrugTestProcedure,
		svc.UpdateDrugTest,
		connect.WithSchema(drugTestingServiceMethods.ByName("UpdateDrugTest")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceListDrugTestsHandler := connect.NewUnaryHandler(
		DrugTestingServiceListDrugTestsProcedure,
		svc.ListDrugTests,
		connect.WithSchema(drugTestingServiceMethods.ByName("ListDrugTests")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceCreateRandomPoolHandler := connect.NewUnaryHandler(
		DrugTestingServiceCreateRandomPoolProcedure,
		svc.CreateRandomPool,
		connect.WithSchema(drugTestingServiceMethods.ByName("CreateRandomPool")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceAddUsersToPoolHandler := connect.NewUnaryHandler(
		DrugTestingServiceAddUsersToPoolProcedure,
		svc.AddUsersToPool,
		connect.WithSchema(drugTestingServiceMethods.ByName("AddUsersToPool")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceRemoveUsersFromPoolHandler := connect.NewUnaryHandler(
		DrugTestingServiceRemoveUsersFromPoolProcedure,
		svc.RemoveUsersFromPool,
		connect.WithSchema(drugTestingServiceMethods.ByName("RemoveUsersFromPool")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceGetRandomPoolHandler := connect.NewUnaryHandler(
		DrugTestingServiceGetRandomPoolProcedure,
		svc.GetRandomPool,
		connect.WithSchema(drugTestingServiceMethods.ByName("GetRandomPool")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceListRandomPoolsHandler := connect.NewUnaryHandler(
		DrugTestingServiceListRandomPoolsProcedure,
		svc.ListRandomPools,
		connect.WithSchema(drugTestingServiceMethods.ByName("ListRandomPools")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceConductRandomSelectionHandler := connect.NewUnaryHandler(
		DrugTestingServiceConductRandomSelectionProcedure,
		svc.ConductRandomSelection,
		connect.WithSchema(drugTestingServiceMethods.ByName("ConductRandomSelection")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceGetRandomSelectionHandler := connect.NewUnaryHandler(
		DrugTestingServiceGetRandomSelectionProcedure,
		svc.GetRandomSelection,
		connect.WithSchema(drugTestingServiceMethods.ByName("GetRandomSelection")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceListRandomSelectionsHandler := connect.NewUnaryHandler(
		DrugTestingServiceListRandomSelectionsProcedure,
		svc.ListRandomSelections,
		connect.WithSchema(drugTestingServiceMethods.ByName("ListRandomSelections")),
		connect.WithHandlerOptions(opts...),
	)
	drugTestingServiceValidateRandomSelectionHandler := connect.NewUnaryHandler(
		DrugTestingServiceValidateRandomSelectionProcedure,
		svc.ValidateRandomSelection,
		connect.WithSchema(drugTestingServiceMethods.ByName("ValidateRandomSelection")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.services.DrugTestingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DrugTestingServiceCreateTestingProgramProcedure:
			drugTestingServiceCreateTestingProgramHandler.ServeHTTP(w, r)
		case DrugTestingServiceGetTestingProgramProcedure:
			drugTestingServiceGetTestingProgramHandler.ServeHTTP(w, r)
		case DrugTestingServiceListTestingProgramsProcedure:
			drugTestingServiceListTestingProgramsHandler.ServeHTTP(w, r)
		case DrugTestingServiceOrderDrugTestProcedure:
			drugTestingServiceOrderDrugTestHandler.ServeHTTP(w, r)
		case DrugTestingServiceGetDrugTestProcedure:
			drugTestingServiceGetDrugTestHandler.ServeHTTP(w, r)
		case DrugTestingServiceUpdateDrugTestProcedure:
			drugTestingServiceUpdateDrugTestHandler.ServeHTTP(w, r)
		case DrugTestingServiceListDrugTestsProcedure:
			drugTestingServiceListDrugTestsHandler.ServeHTTP(w, r)
		case DrugTestingServiceCreateRandomPoolProcedure:
			drugTestingServiceCreateRandomPoolHandler.ServeHTTP(w, r)
		case DrugTestingServiceAddUsersToPoolProcedure:
			drugTestingServiceAddUsersToPoolHandler.ServeHTTP(w, r)
		case DrugTestingServiceRemoveUsersFromPoolProcedure:
			drugTestingServiceRemoveUsersFromPoolHandler.ServeHTTP(w, r)
		case DrugTestingServiceGetRandomPoolProcedure:
			drugTestingServiceGetRandomPoolHandler.ServeHTTP(w, r)
		case DrugTestingServiceListRandomPoolsProcedure:
			drugTestingServiceListRandomPoolsHandler.ServeHTTP(w, r)
		case DrugTestingServiceConductRandomSelectionProcedure:
			drugTestingServiceConductRandomSelectionHandler.ServeHTTP(w, r)
		case DrugTestingServiceGetRandomSelectionProcedure:
			drugTestingServiceGetRandomSelectionHandler.ServeHTTP(w, r)
		case DrugTestingServiceListRandomSelectionsProcedure:
			drugTestingServiceListRandomSelectionsHandler.ServeHTTP(w, r)
		case DrugTestingServiceValidateRandomSelectionProcedure:
			drugTestingServiceValidateRandomSelectionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDrugTestingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDrugTestingServiceHandler struct{}

func (UnimplementedDrugTestingServiceHandler) CreateTestingProgram(context.Context, *connect.Request[v1.CreateTestingProgramRequest]) (*connect.Response[v1.CreateTestingProgramResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.CreateTestingProgram is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) GetTestingProgram(context.Context, *connect.Request[v1.GetTestingProgramRequest]) (*connect.Response[v1.GetTestingProgramResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.GetTestingProgram is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) ListTestingPrograms(context.Context, *connect.Request[v1.ListTestingProgramsRequest]) (*connect.Response[v1.ListTestingProgramsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.ListTestingPrograms is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) OrderDrugTest(context.Context, *connect.Request[v1.OrderDrugTestRequest]) (*connect.Response[v1.OrderDrugTestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.OrderDrugTest is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) GetDrugTest(context.Context, *connect.Request[v1.GetDrugTestRequest]) (*connect.Response[v1.GetDrugTestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.GetDrugTest is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) UpdateDrugTest(context.Context, *connect.Request[v1.UpdateDrugTestRequest]) (*connect.Response[v1.UpdateDrugTestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.UpdateDrugTest is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) ListDrugTests(context.Context, *connect.Request[v1.ListDrugTestsRequest]) (*connect.Response[v1.ListDrugTestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.ListDrugTests is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) CreateRandomPool(context.Context, *connect.Request[v1.CreateRandomPoolRequest]) (*connect.Response[v1.CreateRandomPoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.CreateRandomPool is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) AddUsersToPool(context.Context, *connect.Request[v1.AddUsersToPoolRequest]) (*connect.Response[v1.AddUsersToPoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.AddUsersToPool is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) RemoveUsersFromPool(context.Context, *connect.Request[v1.RemoveUsersFromPoolRequest]) (*connect.Response[v1.RemoveUsersFromPoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.RemoveUsersFromPool is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) GetRandomPool(context.Context, *connect.Request[v1.GetRandomPoolRequest]) (*connect.Response[v1.GetRandomPoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.GetRandomPool is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) ListRandomPools(context.Context, *connect.Request[v1.ListRandomPoolsRequest]) (*connect.Response[v1.ListRandomPoolsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.ListRandomPools is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) ConductRandomSelection(context.Context, *connect.Request[v1.ConductRandomSelectionRequest]) (*connect.Response[v1.ConductRandomSelectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.ConductRandomSelection is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) GetRandomSelection(context.Context, *connect.Request[v1.GetRandomSelectionRequest]) (*connect.Response[v1.GetRandomSelectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.GetRandomSelection is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) ListRandomSelections(context.Context, *connect.Request[v1.ListRandomSelectionsRequest]) (*connect.Response[v1.ListRandomSelectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.ListRandomSelections is not implemented"))
}

func (UnimplementedDrugTestingServiceHandler) ValidateRandomSelection(context.Context, *connect.Request[v1.ValidateRandomSelectionRequest]) (*connect.Response[v1.ValidateRandomSelectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.services.DrugTestingService.ValidateRandomSelection is not implemented"))
}
