// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/mvr.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MVRService_OrderMVR_FullMethodName                   = "/v1consortium.services.MVRService/OrderMVR"
	MVRService_GetMVRReport_FullMethodName               = "/v1consortium.services.MVRService/GetMVRReport"
	MVRService_UpdateMVRReport_FullMethodName            = "/v1consortium.services.MVRService/UpdateMVRReport"
	MVRService_ListMVRReports_FullMethodName             = "/v1consortium.services.MVRService/ListMVRReports"
	MVRService_AddMVRViolation_FullMethodName            = "/v1consortium.services.MVRService/AddMVRViolation"
	MVRService_UpdateMVRViolation_FullMethodName         = "/v1consortium.services.MVRService/UpdateMVRViolation"
	MVRService_ListMVRViolations_FullMethodName          = "/v1consortium.services.MVRService/ListMVRViolations"
	MVRService_EnableContinuousMonitoring_FullMethodName = "/v1consortium.services.MVRService/EnableContinuousMonitoring"
	MVRService_GetMonitoringStatus_FullMethodName        = "/v1consortium.services.MVRService/GetMonitoringStatus"
	MVRService_GetMVRAnalytics_FullMethodName            = "/v1consortium.services.MVRService/GetMVRAnalytics"
	MVRService_SyncProviderData_FullMethodName           = "/v1consortium.services.MVRService/SyncProviderData"
)

// MVRServiceClient is the client API for MVRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MVR Service Definition
type MVRServiceClient interface {
	// MVR Report Management
	OrderMVR(ctx context.Context, in *OrderMVRRequest, opts ...grpc.CallOption) (*OrderMVRResponse, error)
	GetMVRReport(ctx context.Context, in *GetMVRReportRequest, opts ...grpc.CallOption) (*GetMVRReportResponse, error)
	UpdateMVRReport(ctx context.Context, in *UpdateMVRReportRequest, opts ...grpc.CallOption) (*UpdateMVRReportResponse, error)
	ListMVRReports(ctx context.Context, in *ListMVRReportsRequest, opts ...grpc.CallOption) (*ListMVRReportsResponse, error)
	// MVR Violation Management
	AddMVRViolation(ctx context.Context, in *AddMVRViolationRequest, opts ...grpc.CallOption) (*AddMVRViolationResponse, error)
	UpdateMVRViolation(ctx context.Context, in *UpdateMVRViolationRequest, opts ...grpc.CallOption) (*UpdateMVRViolationResponse, error)
	ListMVRViolations(ctx context.Context, in *ListMVRViolationsRequest, opts ...grpc.CallOption) (*ListMVRViolationsResponse, error)
	// Continuous Monitoring
	EnableContinuousMonitoring(ctx context.Context, in *EnableContinuousMonitoringRequest, opts ...grpc.CallOption) (*EnableContinuousMonitoringResponse, error)
	GetMonitoringStatus(ctx context.Context, in *GetMonitoringStatusRequest, opts ...grpc.CallOption) (*GetMonitoringStatusResponse, error)
	// Analytics and Reporting
	GetMVRAnalytics(ctx context.Context, in *GetMVRAnalyticsRequest, opts ...grpc.CallOption) (*GetMVRAnalyticsResponse, error)
	// Provider Integration
	SyncProviderData(ctx context.Context, in *SyncProviderDataRequest, opts ...grpc.CallOption) (*SyncProviderDataResponse, error)
}

type mVRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMVRServiceClient(cc grpc.ClientConnInterface) MVRServiceClient {
	return &mVRServiceClient{cc}
}

func (c *mVRServiceClient) OrderMVR(ctx context.Context, in *OrderMVRRequest, opts ...grpc.CallOption) (*OrderMVRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderMVRResponse)
	err := c.cc.Invoke(ctx, MVRService_OrderMVR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) GetMVRReport(ctx context.Context, in *GetMVRReportRequest, opts ...grpc.CallOption) (*GetMVRReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMVRReportResponse)
	err := c.cc.Invoke(ctx, MVRService_GetMVRReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) UpdateMVRReport(ctx context.Context, in *UpdateMVRReportRequest, opts ...grpc.CallOption) (*UpdateMVRReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMVRReportResponse)
	err := c.cc.Invoke(ctx, MVRService_UpdateMVRReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) ListMVRReports(ctx context.Context, in *ListMVRReportsRequest, opts ...grpc.CallOption) (*ListMVRReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMVRReportsResponse)
	err := c.cc.Invoke(ctx, MVRService_ListMVRReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) AddMVRViolation(ctx context.Context, in *AddMVRViolationRequest, opts ...grpc.CallOption) (*AddMVRViolationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMVRViolationResponse)
	err := c.cc.Invoke(ctx, MVRService_AddMVRViolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) UpdateMVRViolation(ctx context.Context, in *UpdateMVRViolationRequest, opts ...grpc.CallOption) (*UpdateMVRViolationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMVRViolationResponse)
	err := c.cc.Invoke(ctx, MVRService_UpdateMVRViolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) ListMVRViolations(ctx context.Context, in *ListMVRViolationsRequest, opts ...grpc.CallOption) (*ListMVRViolationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMVRViolationsResponse)
	err := c.cc.Invoke(ctx, MVRService_ListMVRViolations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) EnableContinuousMonitoring(ctx context.Context, in *EnableContinuousMonitoringRequest, opts ...grpc.CallOption) (*EnableContinuousMonitoringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableContinuousMonitoringResponse)
	err := c.cc.Invoke(ctx, MVRService_EnableContinuousMonitoring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) GetMonitoringStatus(ctx context.Context, in *GetMonitoringStatusRequest, opts ...grpc.CallOption) (*GetMonitoringStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonitoringStatusResponse)
	err := c.cc.Invoke(ctx, MVRService_GetMonitoringStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) GetMVRAnalytics(ctx context.Context, in *GetMVRAnalyticsRequest, opts ...grpc.CallOption) (*GetMVRAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMVRAnalyticsResponse)
	err := c.cc.Invoke(ctx, MVRService_GetMVRAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mVRServiceClient) SyncProviderData(ctx context.Context, in *SyncProviderDataRequest, opts ...grpc.CallOption) (*SyncProviderDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncProviderDataResponse)
	err := c.cc.Invoke(ctx, MVRService_SyncProviderData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MVRServiceServer is the server API for MVRService service.
// All implementations must embed UnimplementedMVRServiceServer
// for forward compatibility.
//
// MVR Service Definition
type MVRServiceServer interface {
	// MVR Report Management
	OrderMVR(context.Context, *OrderMVRRequest) (*OrderMVRResponse, error)
	GetMVRReport(context.Context, *GetMVRReportRequest) (*GetMVRReportResponse, error)
	UpdateMVRReport(context.Context, *UpdateMVRReportRequest) (*UpdateMVRReportResponse, error)
	ListMVRReports(context.Context, *ListMVRReportsRequest) (*ListMVRReportsResponse, error)
	// MVR Violation Management
	AddMVRViolation(context.Context, *AddMVRViolationRequest) (*AddMVRViolationResponse, error)
	UpdateMVRViolation(context.Context, *UpdateMVRViolationRequest) (*UpdateMVRViolationResponse, error)
	ListMVRViolations(context.Context, *ListMVRViolationsRequest) (*ListMVRViolationsResponse, error)
	// Continuous Monitoring
	EnableContinuousMonitoring(context.Context, *EnableContinuousMonitoringRequest) (*EnableContinuousMonitoringResponse, error)
	GetMonitoringStatus(context.Context, *GetMonitoringStatusRequest) (*GetMonitoringStatusResponse, error)
	// Analytics and Reporting
	GetMVRAnalytics(context.Context, *GetMVRAnalyticsRequest) (*GetMVRAnalyticsResponse, error)
	// Provider Integration
	SyncProviderData(context.Context, *SyncProviderDataRequest) (*SyncProviderDataResponse, error)
	mustEmbedUnimplementedMVRServiceServer()
}

// UnimplementedMVRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMVRServiceServer struct{}

func (UnimplementedMVRServiceServer) OrderMVR(context.Context, *OrderMVRRequest) (*OrderMVRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderMVR not implemented")
}
func (UnimplementedMVRServiceServer) GetMVRReport(context.Context, *GetMVRReportRequest) (*GetMVRReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMVRReport not implemented")
}
func (UnimplementedMVRServiceServer) UpdateMVRReport(context.Context, *UpdateMVRReportRequest) (*UpdateMVRReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMVRReport not implemented")
}
func (UnimplementedMVRServiceServer) ListMVRReports(context.Context, *ListMVRReportsRequest) (*ListMVRReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMVRReports not implemented")
}
func (UnimplementedMVRServiceServer) AddMVRViolation(context.Context, *AddMVRViolationRequest) (*AddMVRViolationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMVRViolation not implemented")
}
func (UnimplementedMVRServiceServer) UpdateMVRViolation(context.Context, *UpdateMVRViolationRequest) (*UpdateMVRViolationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMVRViolation not implemented")
}
func (UnimplementedMVRServiceServer) ListMVRViolations(context.Context, *ListMVRViolationsRequest) (*ListMVRViolationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMVRViolations not implemented")
}
func (UnimplementedMVRServiceServer) EnableContinuousMonitoring(context.Context, *EnableContinuousMonitoringRequest) (*EnableContinuousMonitoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableContinuousMonitoring not implemented")
}
func (UnimplementedMVRServiceServer) GetMonitoringStatus(context.Context, *GetMonitoringStatusRequest) (*GetMonitoringStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringStatus not implemented")
}
func (UnimplementedMVRServiceServer) GetMVRAnalytics(context.Context, *GetMVRAnalyticsRequest) (*GetMVRAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMVRAnalytics not implemented")
}
func (UnimplementedMVRServiceServer) SyncProviderData(context.Context, *SyncProviderDataRequest) (*SyncProviderDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProviderData not implemented")
}
func (UnimplementedMVRServiceServer) mustEmbedUnimplementedMVRServiceServer() {}
func (UnimplementedMVRServiceServer) testEmbeddedByValue()                    {}

// UnsafeMVRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MVRServiceServer will
// result in compilation errors.
type UnsafeMVRServiceServer interface {
	mustEmbedUnimplementedMVRServiceServer()
}

func RegisterMVRServiceServer(s grpc.ServiceRegistrar, srv MVRServiceServer) {
	// If the following call pancis, it indicates UnimplementedMVRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MVRService_ServiceDesc, srv)
}

func _MVRService_OrderMVR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderMVRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).OrderMVR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_OrderMVR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).OrderMVR(ctx, req.(*OrderMVRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_GetMVRReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMVRReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).GetMVRReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_GetMVRReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).GetMVRReport(ctx, req.(*GetMVRReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_UpdateMVRReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMVRReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).UpdateMVRReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_UpdateMVRReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).UpdateMVRReport(ctx, req.(*UpdateMVRReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_ListMVRReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMVRReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).ListMVRReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_ListMVRReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).ListMVRReports(ctx, req.(*ListMVRReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_AddMVRViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMVRViolationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).AddMVRViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_AddMVRViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).AddMVRViolation(ctx, req.(*AddMVRViolationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_UpdateMVRViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMVRViolationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).UpdateMVRViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_UpdateMVRViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).UpdateMVRViolation(ctx, req.(*UpdateMVRViolationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_ListMVRViolations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMVRViolationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).ListMVRViolations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_ListMVRViolations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).ListMVRViolations(ctx, req.(*ListMVRViolationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_EnableContinuousMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableContinuousMonitoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).EnableContinuousMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_EnableContinuousMonitoring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).EnableContinuousMonitoring(ctx, req.(*EnableContinuousMonitoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_GetMonitoringStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitoringStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).GetMonitoringStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_GetMonitoringStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).GetMonitoringStatus(ctx, req.(*GetMonitoringStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_GetMVRAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMVRAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).GetMVRAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_GetMVRAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).GetMVRAnalytics(ctx, req.(*GetMVRAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MVRService_SyncProviderData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProviderDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MVRServiceServer).SyncProviderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MVRService_SyncProviderData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MVRServiceServer).SyncProviderData(ctx, req.(*SyncProviderDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MVRService_ServiceDesc is the grpc.ServiceDesc for MVRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MVRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.MVRService",
	HandlerType: (*MVRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderMVR",
			Handler:    _MVRService_OrderMVR_Handler,
		},
		{
			MethodName: "GetMVRReport",
			Handler:    _MVRService_GetMVRReport_Handler,
		},
		{
			MethodName: "UpdateMVRReport",
			Handler:    _MVRService_UpdateMVRReport_Handler,
		},
		{
			MethodName: "ListMVRReports",
			Handler:    _MVRService_ListMVRReports_Handler,
		},
		{
			MethodName: "AddMVRViolation",
			Handler:    _MVRService_AddMVRViolation_Handler,
		},
		{
			MethodName: "UpdateMVRViolation",
			Handler:    _MVRService_UpdateMVRViolation_Handler,
		},
		{
			MethodName: "ListMVRViolations",
			Handler:    _MVRService_ListMVRViolations_Handler,
		},
		{
			MethodName: "EnableContinuousMonitoring",
			Handler:    _MVRService_EnableContinuousMonitoring_Handler,
		},
		{
			MethodName: "GetMonitoringStatus",
			Handler:    _MVRService_GetMonitoringStatus_Handler,
		},
		{
			MethodName: "GetMVRAnalytics",
			Handler:    _MVRService_GetMVRAnalytics_Handler,
		},
		{
			MethodName: "SyncProviderData",
			Handler:    _MVRService_SyncProviderData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/mvr.proto",
}
