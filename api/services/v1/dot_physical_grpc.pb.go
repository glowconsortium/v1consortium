// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/v1/dot_physical.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DOTPhysicalService_ScheduleDOTPhysical_FullMethodName     = "/v1consortium.services.DOTPhysicalService/ScheduleDOTPhysical"
	DOTPhysicalService_GetDOTPhysical_FullMethodName          = "/v1consortium.services.DOTPhysicalService/GetDOTPhysical"
	DOTPhysicalService_UpdateDOTPhysical_FullMethodName       = "/v1consortium.services.DOTPhysicalService/UpdateDOTPhysical"
	DOTPhysicalService_ListDOTPhysicals_FullMethodName        = "/v1consortium.services.DOTPhysicalService/ListDOTPhysicals"
	DOTPhysicalService_RegisterMedicalExaminer_FullMethodName = "/v1consortium.services.DOTPhysicalService/RegisterMedicalExaminer"
	DOTPhysicalService_GetMedicalExaminer_FullMethodName      = "/v1consortium.services.DOTPhysicalService/GetMedicalExaminer"
	DOTPhysicalService_ListMedicalExaminers_FullMethodName    = "/v1consortium.services.DOTPhysicalService/ListMedicalExaminers"
	DOTPhysicalService_GenerateCertificate_FullMethodName     = "/v1consortium.services.DOTPhysicalService/GenerateCertificate"
	DOTPhysicalService_ValidateCertificate_FullMethodName     = "/v1consortium.services.DOTPhysicalService/ValidateCertificate"
	DOTPhysicalService_GetExpiringCertificates_FullMethodName = "/v1consortium.services.DOTPhysicalService/GetExpiringCertificates"
	DOTPhysicalService_SetExpirationReminder_FullMethodName   = "/v1consortium.services.DOTPhysicalService/SetExpirationReminder"
)

// DOTPhysicalServiceClient is the client API for DOTPhysicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DOT Physical Service Definition
type DOTPhysicalServiceClient interface {
	// DOT Physical Management
	ScheduleDOTPhysical(ctx context.Context, in *ScheduleDOTPhysicalRequest, opts ...grpc.CallOption) (*ScheduleDOTPhysicalResponse, error)
	GetDOTPhysical(ctx context.Context, in *GetDOTPhysicalRequest, opts ...grpc.CallOption) (*GetDOTPhysicalResponse, error)
	UpdateDOTPhysical(ctx context.Context, in *UpdateDOTPhysicalRequest, opts ...grpc.CallOption) (*UpdateDOTPhysicalResponse, error)
	ListDOTPhysicals(ctx context.Context, in *ListDOTPhysicalsRequest, opts ...grpc.CallOption) (*ListDOTPhysicalsResponse, error)
	// Medical Examiner Management
	RegisterMedicalExaminer(ctx context.Context, in *RegisterMedicalExaminerRequest, opts ...grpc.CallOption) (*RegisterMedicalExaminerResponse, error)
	GetMedicalExaminer(ctx context.Context, in *GetMedicalExaminerRequest, opts ...grpc.CallOption) (*GetMedicalExaminerResponse, error)
	ListMedicalExaminers(ctx context.Context, in *ListMedicalExaminersRequest, opts ...grpc.CallOption) (*ListMedicalExaminersResponse, error)
	// Certificate Management
	GenerateCertificate(ctx context.Context, in *GenerateCertificateRequest, opts ...grpc.CallOption) (*GenerateCertificateResponse, error)
	ValidateCertificate(ctx context.Context, in *ValidateCertificateRequest, opts ...grpc.CallOption) (*ValidateCertificateResponse, error)
	// Expiration Monitoring
	GetExpiringCertificates(ctx context.Context, in *GetExpiringCertificatesRequest, opts ...grpc.CallOption) (*GetExpiringCertificatesResponse, error)
	SetExpirationReminder(ctx context.Context, in *SetExpirationReminderRequest, opts ...grpc.CallOption) (*SetExpirationReminderResponse, error)
}

type dOTPhysicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDOTPhysicalServiceClient(cc grpc.ClientConnInterface) DOTPhysicalServiceClient {
	return &dOTPhysicalServiceClient{cc}
}

func (c *dOTPhysicalServiceClient) ScheduleDOTPhysical(ctx context.Context, in *ScheduleDOTPhysicalRequest, opts ...grpc.CallOption) (*ScheduleDOTPhysicalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleDOTPhysicalResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_ScheduleDOTPhysical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) GetDOTPhysical(ctx context.Context, in *GetDOTPhysicalRequest, opts ...grpc.CallOption) (*GetDOTPhysicalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDOTPhysicalResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_GetDOTPhysical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) UpdateDOTPhysical(ctx context.Context, in *UpdateDOTPhysicalRequest, opts ...grpc.CallOption) (*UpdateDOTPhysicalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDOTPhysicalResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_UpdateDOTPhysical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) ListDOTPhysicals(ctx context.Context, in *ListDOTPhysicalsRequest, opts ...grpc.CallOption) (*ListDOTPhysicalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDOTPhysicalsResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_ListDOTPhysicals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) RegisterMedicalExaminer(ctx context.Context, in *RegisterMedicalExaminerRequest, opts ...grpc.CallOption) (*RegisterMedicalExaminerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterMedicalExaminerResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_RegisterMedicalExaminer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) GetMedicalExaminer(ctx context.Context, in *GetMedicalExaminerRequest, opts ...grpc.CallOption) (*GetMedicalExaminerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicalExaminerResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_GetMedicalExaminer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) ListMedicalExaminers(ctx context.Context, in *ListMedicalExaminersRequest, opts ...grpc.CallOption) (*ListMedicalExaminersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicalExaminersResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_ListMedicalExaminers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) GenerateCertificate(ctx context.Context, in *GenerateCertificateRequest, opts ...grpc.CallOption) (*GenerateCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateCertificateResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_GenerateCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) ValidateCertificate(ctx context.Context, in *ValidateCertificateRequest, opts ...grpc.CallOption) (*ValidateCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateCertificateResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_ValidateCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) GetExpiringCertificates(ctx context.Context, in *GetExpiringCertificatesRequest, opts ...grpc.CallOption) (*GetExpiringCertificatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExpiringCertificatesResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_GetExpiringCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dOTPhysicalServiceClient) SetExpirationReminder(ctx context.Context, in *SetExpirationReminderRequest, opts ...grpc.CallOption) (*SetExpirationReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetExpirationReminderResponse)
	err := c.cc.Invoke(ctx, DOTPhysicalService_SetExpirationReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DOTPhysicalServiceServer is the server API for DOTPhysicalService service.
// All implementations must embed UnimplementedDOTPhysicalServiceServer
// for forward compatibility.
//
// DOT Physical Service Definition
type DOTPhysicalServiceServer interface {
	// DOT Physical Management
	ScheduleDOTPhysical(context.Context, *ScheduleDOTPhysicalRequest) (*ScheduleDOTPhysicalResponse, error)
	GetDOTPhysical(context.Context, *GetDOTPhysicalRequest) (*GetDOTPhysicalResponse, error)
	UpdateDOTPhysical(context.Context, *UpdateDOTPhysicalRequest) (*UpdateDOTPhysicalResponse, error)
	ListDOTPhysicals(context.Context, *ListDOTPhysicalsRequest) (*ListDOTPhysicalsResponse, error)
	// Medical Examiner Management
	RegisterMedicalExaminer(context.Context, *RegisterMedicalExaminerRequest) (*RegisterMedicalExaminerResponse, error)
	GetMedicalExaminer(context.Context, *GetMedicalExaminerRequest) (*GetMedicalExaminerResponse, error)
	ListMedicalExaminers(context.Context, *ListMedicalExaminersRequest) (*ListMedicalExaminersResponse, error)
	// Certificate Management
	GenerateCertificate(context.Context, *GenerateCertificateRequest) (*GenerateCertificateResponse, error)
	ValidateCertificate(context.Context, *ValidateCertificateRequest) (*ValidateCertificateResponse, error)
	// Expiration Monitoring
	GetExpiringCertificates(context.Context, *GetExpiringCertificatesRequest) (*GetExpiringCertificatesResponse, error)
	SetExpirationReminder(context.Context, *SetExpirationReminderRequest) (*SetExpirationReminderResponse, error)
	mustEmbedUnimplementedDOTPhysicalServiceServer()
}

// UnimplementedDOTPhysicalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDOTPhysicalServiceServer struct{}

func (UnimplementedDOTPhysicalServiceServer) ScheduleDOTPhysical(context.Context, *ScheduleDOTPhysicalRequest) (*ScheduleDOTPhysicalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDOTPhysical not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) GetDOTPhysical(context.Context, *GetDOTPhysicalRequest) (*GetDOTPhysicalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDOTPhysical not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) UpdateDOTPhysical(context.Context, *UpdateDOTPhysicalRequest) (*UpdateDOTPhysicalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDOTPhysical not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) ListDOTPhysicals(context.Context, *ListDOTPhysicalsRequest) (*ListDOTPhysicalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDOTPhysicals not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) RegisterMedicalExaminer(context.Context, *RegisterMedicalExaminerRequest) (*RegisterMedicalExaminerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMedicalExaminer not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) GetMedicalExaminer(context.Context, *GetMedicalExaminerRequest) (*GetMedicalExaminerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalExaminer not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) ListMedicalExaminers(context.Context, *ListMedicalExaminersRequest) (*ListMedicalExaminersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicalExaminers not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) GenerateCertificate(context.Context, *GenerateCertificateRequest) (*GenerateCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCertificate not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) ValidateCertificate(context.Context, *ValidateCertificateRequest) (*ValidateCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCertificate not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) GetExpiringCertificates(context.Context, *GetExpiringCertificatesRequest) (*GetExpiringCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiringCertificates not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) SetExpirationReminder(context.Context, *SetExpirationReminderRequest) (*SetExpirationReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExpirationReminder not implemented")
}
func (UnimplementedDOTPhysicalServiceServer) mustEmbedUnimplementedDOTPhysicalServiceServer() {}
func (UnimplementedDOTPhysicalServiceServer) testEmbeddedByValue()                            {}

// UnsafeDOTPhysicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DOTPhysicalServiceServer will
// result in compilation errors.
type UnsafeDOTPhysicalServiceServer interface {
	mustEmbedUnimplementedDOTPhysicalServiceServer()
}

func RegisterDOTPhysicalServiceServer(s grpc.ServiceRegistrar, srv DOTPhysicalServiceServer) {
	// If the following call pancis, it indicates UnimplementedDOTPhysicalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DOTPhysicalService_ServiceDesc, srv)
}

func _DOTPhysicalService_ScheduleDOTPhysical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleDOTPhysicalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).ScheduleDOTPhysical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_ScheduleDOTPhysical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).ScheduleDOTPhysical(ctx, req.(*ScheduleDOTPhysicalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_GetDOTPhysical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDOTPhysicalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).GetDOTPhysical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_GetDOTPhysical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).GetDOTPhysical(ctx, req.(*GetDOTPhysicalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_UpdateDOTPhysical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDOTPhysicalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).UpdateDOTPhysical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_UpdateDOTPhysical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).UpdateDOTPhysical(ctx, req.(*UpdateDOTPhysicalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_ListDOTPhysicals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDOTPhysicalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).ListDOTPhysicals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_ListDOTPhysicals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).ListDOTPhysicals(ctx, req.(*ListDOTPhysicalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_RegisterMedicalExaminer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMedicalExaminerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).RegisterMedicalExaminer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_RegisterMedicalExaminer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).RegisterMedicalExaminer(ctx, req.(*RegisterMedicalExaminerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_GetMedicalExaminer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicalExaminerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).GetMedicalExaminer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_GetMedicalExaminer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).GetMedicalExaminer(ctx, req.(*GetMedicalExaminerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_ListMedicalExaminers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicalExaminersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).ListMedicalExaminers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_ListMedicalExaminers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).ListMedicalExaminers(ctx, req.(*ListMedicalExaminersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_GenerateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).GenerateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_GenerateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).GenerateCertificate(ctx, req.(*GenerateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_ValidateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).ValidateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_ValidateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).ValidateCertificate(ctx, req.(*ValidateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_GetExpiringCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpiringCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).GetExpiringCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_GetExpiringCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).GetExpiringCertificates(ctx, req.(*GetExpiringCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DOTPhysicalService_SetExpirationReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExpirationReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DOTPhysicalServiceServer).SetExpirationReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DOTPhysicalService_SetExpirationReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DOTPhysicalServiceServer).SetExpirationReminder(ctx, req.(*SetExpirationReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DOTPhysicalService_ServiceDesc is the grpc.ServiceDesc for DOTPhysicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DOTPhysicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.services.DOTPhysicalService",
	HandlerType: (*DOTPhysicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleDOTPhysical",
			Handler:    _DOTPhysicalService_ScheduleDOTPhysical_Handler,
		},
		{
			MethodName: "GetDOTPhysical",
			Handler:    _DOTPhysicalService_GetDOTPhysical_Handler,
		},
		{
			MethodName: "UpdateDOTPhysical",
			Handler:    _DOTPhysicalService_UpdateDOTPhysical_Handler,
		},
		{
			MethodName: "ListDOTPhysicals",
			Handler:    _DOTPhysicalService_ListDOTPhysicals_Handler,
		},
		{
			MethodName: "RegisterMedicalExaminer",
			Handler:    _DOTPhysicalService_RegisterMedicalExaminer_Handler,
		},
		{
			MethodName: "GetMedicalExaminer",
			Handler:    _DOTPhysicalService_GetMedicalExaminer_Handler,
		},
		{
			MethodName: "ListMedicalExaminers",
			Handler:    _DOTPhysicalService_ListMedicalExaminers_Handler,
		},
		{
			MethodName: "GenerateCertificate",
			Handler:    _DOTPhysicalService_GenerateCertificate_Handler,
		},
		{
			MethodName: "ValidateCertificate",
			Handler:    _DOTPhysicalService_ValidateCertificate_Handler,
		},
		{
			MethodName: "GetExpiringCertificates",
			Handler:    _DOTPhysicalService_GetExpiringCertificates_Handler,
		},
		{
			MethodName: "SetExpirationReminder",
			Handler:    _DOTPhysicalService_SetExpirationReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/dot_physical.proto",
}
