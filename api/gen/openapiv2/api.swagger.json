{
  "swagger": "2.0",
  "info": {
    "title": "auth/v1/auth.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AuthService"
    },
    {
      "name": "AuthorizationService"
    },
    {
      "name": "SessionService"
    },
    {
      "name": "ConfigurationService"
    },
    {
      "name": "GatewayService"
    },
    {
      "name": "MonitoringService"
    },
    {
      "name": "BackgroundCheckService"
    },
    {
      "name": "ComplianceService"
    },
    {
      "name": "DocumentService"
    },
    {
      "name": "DOTPhysicalService"
    },
    {
      "name": "DrugTestingService"
    },
    {
      "name": "MVRService"
    },
    {
      "name": "NotificationService"
    },
    {
      "name": "OrganizationService"
    },
    {
      "name": "WorkflowService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/adverse-actions/{adverseActionId}/dispute": {
      "post": {
        "operationId": "BackgroundCheckService_HandleDispute",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesHandleDisputeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "adverseActionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackgroundCheckServiceHandleDisputeBody"
            }
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/adverse-actions/{adverseActionId}/status": {
      "get": {
        "operationId": "BackgroundCheckService_GetAdverseActionStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetAdverseActionStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "adverseActionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/auth/change-password": {
      "put": {
        "operationId": "AuthService_ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authChangePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authChangePasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/check-permission": {
      "post": {
        "summary": "Authorization",
        "operationId": "AuthService_CheckPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authCheckPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authCheckPermissionRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "summary": "Password Management",
        "operationId": "AuthService_ForgotPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authForgotPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authForgotPasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "Authentication Operations",
        "operationId": "AuthService_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authLoginRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "operationId": "AuthService_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authLogoutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authLogoutRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/mfa": {
      "delete": {
        "operationId": "AuthService_DisableMFA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authDisableMFAResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authDisableMFARequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/mfa/enable": {
      "post": {
        "summary": "Multi-Factor Authentication",
        "operationId": "AuthService_EnableMFA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authEnableMFAResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authEnableMFARequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/mfa/verify": {
      "post": {
        "operationId": "AuthService_VerifyMFA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authVerifyMFAResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authVerifyMFARequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/permissions/check": {
      "post": {
        "summary": "Permission Checks",
        "operationId": "AuthorizationService_HasPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authHasPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authHasPermissionRequest"
            }
          }
        ],
        "tags": [
          "AuthorizationService"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "operationId": "AuthService_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authRefreshTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRefreshTokenRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "operationId": "AuthService_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authResetPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/roles/assign": {
      "post": {
        "summary": "Role Management",
        "operationId": "AuthorizationService_AssignRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authAssignRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authAssignRoleRequest"
            }
          }
        ],
        "tags": [
          "AuthorizationService"
        ]
      }
    },
    "/api/v1/auth/roles/{role}/permissions": {
      "get": {
        "operationId": "AuthorizationService_GetRolePermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetRolePermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "USER_ROLE_UNSPECIFIED",
              "INTERNAL_SU",
              "INTERNAL_ADMIN",
              "INTERNAL_SUPPORT",
              "CLIENT_ADMIN",
              "DER",
              "SAFETY_MANAGER",
              "HR_MANAGER",
              "EMPLOYEE",
              "MRO",
              "SAP",
              "MEDICAL_EXAMINER"
            ]
          }
        ],
        "tags": [
          "AuthorizationService"
        ]
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "summary": "New Two-Step Signup Process",
        "operationId": "AuthService_Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authSignupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authSignupRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/signup/complete": {
      "post": {
        "operationId": "AuthService_CompleteRegistration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authCompleteRegistrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authCompleteRegistrationRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/signup/resend-verification": {
      "post": {
        "operationId": "AuthService_ResendVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authResendVerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authResendVerificationRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/signup/social": {
      "post": {
        "operationId": "AuthService_SocialSignup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authSocialSignupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authSocialSignupRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/signup/status/{workflowId}": {
      "get": {
        "summary": "Workflow Management",
        "operationId": "AuthService_GetSignupStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetSignupStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/users/{userId}": {
      "get": {
        "summary": "User Management",
        "operationId": "AuthService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1consortiumauthGetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      },
      "put": {
        "operationId": "AuthService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1consortiumauthUpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authAuthServiceUpdateUserBody"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/users/{userId}/permissions": {
      "get": {
        "operationId": "AuthService_GetUserPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetUserPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/auth/users/{userId}/roles": {
      "get": {
        "operationId": "AuthorizationService_GetUserRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetUserRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "description": "Optional: filter by organization",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthorizationService"
        ]
      },
      "delete": {
        "operationId": "AuthorizationService_RemoveRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authRemoveRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationServiceRemoveRoleBody"
            }
          }
        ],
        "tags": [
          "AuthorizationService"
        ]
      }
    },
    "/api/v1/auth/verify-email": {
      "post": {
        "summary": "Email Verification",
        "operationId": "AuthService_VerifyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authVerifyEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authVerifyEmailRequest"
            }
          }
        ],
        "tags": [
          "AuthService"
        ]
      }
    },
    "/api/v1/background-check-findings/{findingId}": {
      "put": {
        "operationId": "BackgroundCheckService_UpdateFinding",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateFindingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "findingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackgroundCheckServiceUpdateFindingBody"
            }
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/background-check-packages": {
      "get": {
        "summary": "Package and Provider Management",
        "operationId": "BackgroundCheckService_GetAvailablePackages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetAvailablePackagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "description": "Optional: filter by provider",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/background-check-provider-status": {
      "get": {
        "operationId": "BackgroundCheckService_GetProviderStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetProviderStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/background-checks/{backgroundCheckId}": {
      "get": {
        "operationId": "BackgroundCheckService_GetBackgroundCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetBackgroundCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "backgroundCheckId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      },
      "put": {
        "operationId": "BackgroundCheckService_UpdateBackgroundCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateBackgroundCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "backgroundCheckId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackgroundCheckServiceUpdateBackgroundCheckBody"
            }
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/background-checks/{backgroundCheckId}/adverse-action": {
      "post": {
        "summary": "FCRA Compliance",
        "operationId": "BackgroundCheckService_InitiateAdverseAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesInitiateAdverseActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "backgroundCheckId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackgroundCheckServiceInitiateAdverseActionBody"
            }
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/background-checks/{backgroundCheckId}/findings": {
      "get": {
        "operationId": "BackgroundCheckService_ListFindings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListFindingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "backgroundCheckId",
            "description": "Optional: filter by specific check",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "findingType",
            "description": "Optional: filter by finding type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "severity",
            "description": "Optional: filter by severity",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "reviewStatus",
            "description": "Optional: filter by review status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requiresReview",
            "description": "Optional: filter findings needing review",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      },
      "post": {
        "summary": "Findings Management",
        "operationId": "BackgroundCheckService_AddFinding",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesAddFindingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "backgroundCheckId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackgroundCheckServiceAddFindingBody"
            }
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/certificates/{certificateId}": {
      "get": {
        "operationId": "ComplianceService_GetCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      },
      "delete": {
        "operationId": "ComplianceService_RevokeCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesRevokeCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "certificateId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComplianceServiceRevokeCertificateBody"
            }
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/document-shares/{shareId}": {
      "delete": {
        "operationId": "DocumentService_RevokeDocumentShare",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesRevokeDocumentShareResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "shareId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "revokedBy",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/documents/{documentId}": {
      "get": {
        "operationId": "DocumentService_GetDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeContent",
            "description": "Whether to include file content in response",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      },
      "delete": {
        "operationId": "DocumentService_DeleteDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesDeleteDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deletedBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deletionReason",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      },
      "put": {
        "operationId": "DocumentService_UpdateDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentServiceUpdateDocumentBody"
            }
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/documents/{documentId}/share": {
      "post": {
        "summary": "Document Sharing",
        "operationId": "DocumentService_ShareDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesShareDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentServiceShareDocumentBody"
            }
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/documents/{documentId}/versions": {
      "get": {
        "operationId": "DocumentService_GetDocumentVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetDocumentVersionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/dot-certificates/validate": {
      "post": {
        "operationId": "DOTPhysicalService_ValidateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesValidateCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesValidateCertificateRequest"
            }
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/dot-physicals/{physicalId}": {
      "get": {
        "operationId": "DOTPhysicalService_GetDOTPhysical",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetDOTPhysicalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "physicalId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      },
      "put": {
        "operationId": "DOTPhysicalService_UpdateDOTPhysical",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateDOTPhysicalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "physicalId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DOTPhysicalServiceUpdateDOTPhysicalBody"
            }
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/dot-physicals/{physicalId}/certificate": {
      "post": {
        "summary": "Certificate Management",
        "operationId": "DOTPhysicalService_GenerateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGenerateCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "physicalId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DOTPhysicalServiceGenerateCertificateBody"
            }
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/drug-tests/{testId}": {
      "get": {
        "operationId": "DrugTestingService_GetDrugTest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetDrugTestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      },
      "put": {
        "operationId": "DrugTestingService_UpdateDrugTest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateDrugTestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceUpdateDrugTestBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/medical-examiners": {
      "get": {
        "operationId": "DOTPhysicalService_ListMedicalExaminers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListMedicalExaminersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "description": "Optional: filter by state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "description": "Optional: filter by city",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "zipCode",
            "description": "Optional: filter by zip code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "acceptsNewPatients",
            "description": "Optional: filter by availability",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "radiusMiles",
            "description": "Optional: search radius",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "location",
            "description": "Optional: center point for radius search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      },
      "post": {
        "summary": "Medical Examiner Management",
        "operationId": "DOTPhysicalService_RegisterMedicalExaminer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesRegisterMedicalExaminerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesRegisterMedicalExaminerRequest"
            }
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/medical-examiners/{examinerId}": {
      "get": {
        "operationId": "DOTPhysicalService_GetMedicalExaminer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetMedicalExaminerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "examinerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/mvr-provider-sync": {
      "post": {
        "summary": "Provider Integration",
        "operationId": "MVRService_SyncProviderData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesSyncProviderDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesSyncProviderDataRequest"
            }
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/mvr-reports/{mvrReportId}/violations": {
      "post": {
        "summary": "MVR Violation Management",
        "operationId": "MVRService_AddMVRViolation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesAddMVRViolationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mvrReportId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MVRServiceAddMVRViolationBody"
            }
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/mvr-reports/{reportId}": {
      "get": {
        "operationId": "MVRService_GetMVRReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetMVRReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MVRService"
        ]
      },
      "put": {
        "operationId": "MVRService_UpdateMVRReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateMVRReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MVRServiceUpdateMVRReportBody"
            }
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/mvr-violations/{violationId}": {
      "put": {
        "operationId": "MVRService_UpdateMVRViolation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateMVRViolationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "violationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MVRServiceUpdateMVRViolationBody"
            }
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/notification-templates/{templateId}": {
      "get": {
        "operationId": "NotificationService_GetNotificationTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetNotificationTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      },
      "put": {
        "operationId": "NotificationService_UpdateNotificationTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateNotificationTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationServiceUpdateNotificationTemplateBody"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/notifications": {
      "post": {
        "summary": "Basic Notification Management",
        "operationId": "NotificationService_SendNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesSendNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesSendNotificationRequest"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/notifications/schedule": {
      "post": {
        "summary": "Scheduled Notifications",
        "operationId": "NotificationService_ScheduleNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesScheduleNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesScheduleNotificationRequest"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/notifications/scheduled/{scheduledNotificationId}": {
      "delete": {
        "operationId": "NotificationService_CancelScheduledNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCancelScheduledNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "scheduledNotificationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cancelledBy",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/notifications/{notificationId}": {
      "get": {
        "operationId": "NotificationService_GetNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/notifications/{notificationId}/read": {
      "put": {
        "operationId": "NotificationService_MarkNotificationRead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesMarkNotificationReadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationServiceMarkNotificationReadBody"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/organizations": {
      "get": {
        "operationId": "OrganizationService_ListOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListOrganizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "description": "Filter by organization type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "search",
            "description": "Search by name, email, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      },
      "post": {
        "summary": "Organization Management",
        "operationId": "OrganizationService_CreateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCreateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesCreateOrganizationRequest"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}": {
      "get": {
        "operationId": "OrganizationService_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      },
      "delete": {
        "operationId": "OrganizationService_DeactivateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesDeactivateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationServiceDeactivateOrganizationBody"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      },
      "put": {
        "operationId": "OrganizationService_UpdateOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationServiceUpdateOrganizationBody"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/apply-retention-policy": {
      "post": {
        "operationId": "DocumentService_ApplyRetentionPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesApplyRetentionPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentServiceApplyRetentionPolicyBody"
            }
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/background-check-analytics": {
      "get": {
        "summary": "Analytics",
        "operationId": "BackgroundCheckService_GetBackgroundCheckAnalytics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetBackgroundCheckAnalyticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/background-checks": {
      "get": {
        "operationId": "BackgroundCheckService_ListBackgroundChecks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListBackgroundChecksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "checkType",
            "description": "Optional: filter by check type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Optional: filter by status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "overallResult",
            "description": "Optional: filter by result",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      },
      "post": {
        "summary": "Background Check Management",
        "operationId": "BackgroundCheckService_OrderBackgroundCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesOrderBackgroundCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackgroundCheckServiceOrderBackgroundCheckBody"
            }
          }
        ],
        "tags": [
          "BackgroundCheckService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/certificates": {
      "get": {
        "operationId": "ComplianceService_ListCertificates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListCertificatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "certificateType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "validOnly",
            "description": "Optional: show only non-expired certificates",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      },
      "post": {
        "summary": "Certificate Management",
        "operationId": "ComplianceService_GenerateComplianceCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGenerateComplianceCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComplianceServiceGenerateComplianceCertificateBody"
            }
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/compliance-alerts": {
      "get": {
        "summary": "Compliance Monitoring",
        "operationId": "ComplianceService_GetComplianceAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetComplianceAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "alertType",
            "description": "Optional: \"expiring\", \"overdue\", \"violations\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "daysAhead",
            "description": "For expiring alerts",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/compliance-analytics": {
      "get": {
        "operationId": "ComplianceService_GetComplianceAnalytics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetComplianceAnalyticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "analyticsType",
            "description": "\"overview\", \"trends\", \"violations\", \"costs\"",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/compliance-audit-trail": {
      "get": {
        "summary": "Audit and Tracking",
        "operationId": "ComplianceService_GetComplianceAuditTrail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetComplianceAuditTrailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by specific user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "complianceType",
            "description": "Optional: filter by compliance area",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/compliance-reports": {
      "post": {
        "summary": "Reporting",
        "operationId": "ComplianceService_GenerateComplianceReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGenerateComplianceReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComplianceServiceGenerateComplianceReportBody"
            }
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/compliance-status": {
      "get": {
        "operationId": "ComplianceService_ListComplianceStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListComplianceStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "complianceType",
            "description": "Optional: filter by specific compliance area",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "nonCompliantOnly",
            "description": "Optional: show only non-compliant employees",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/document-analytics": {
      "get": {
        "summary": "Document Analytics",
        "operationId": "DocumentService_GetDocumentAnalytics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetDocumentAnalyticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "documentType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/document-retention-status": {
      "get": {
        "summary": "Document Compliance",
        "operationId": "DocumentService_GetDocumentRetentionStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetDocumentRetentionStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/documents": {
      "get": {
        "operationId": "DocumentService_ListDocuments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListDocumentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "documentType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "relatedEntityType",
            "description": "Optional: filter by related entity type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "relatedEntityId",
            "description": "Optional: filter by specific related entity",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "confidentialityLevel",
            "description": "Optional: filter by confidentiality",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "hipaaProtectedOnly",
            "description": "Optional: show only HIPAA protected docs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "uploadedAfter",
            "description": "Optional: date filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "uploadedBefore",
            "description": "Optional: date filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "description": "Optional: search in title/description",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      },
      "post": {
        "summary": "Document Management",
        "operationId": "DocumentService_UploadDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUploadDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentServiceUploadDocumentBody"
            }
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/documents/search": {
      "get": {
        "summary": "Document Search",
        "operationId": "DocumentService_SearchDocuments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesSearchDocumentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Search query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "documentTypes",
            "description": "Optional: limit to specific types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "confidentialityLevels",
            "description": "Optional: limit by confidentiality",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userId",
            "description": "Optional: limit to user's documents",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "description": "Optional: date range",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "description": "Optional: date range",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/dot-certificates/expiring": {
      "get": {
        "summary": "Expiration Monitoring",
        "operationId": "DOTPhysicalService_GetExpiringCertificates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetExpiringCertificatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "daysAhead",
            "description": "How many days in advance to check",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/dot-physical-expiration-reminders": {
      "post": {
        "operationId": "DOTPhysicalService_SetExpirationReminder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesSetExpirationReminderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DOTPhysicalServiceSetExpirationReminderBody"
            }
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/dot-physicals": {
      "get": {
        "operationId": "DOTPhysicalService_ListDOTPhysicals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListDOTPhysicalsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "medicalExaminerId",
            "description": "Optional: filter by examiner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Optional: filter by status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "qualificationStatus",
            "description": "Optional: filter by qualification",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      },
      "post": {
        "summary": "DOT Physical Management",
        "operationId": "DOTPhysicalService_ScheduleDOTPhysical",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesScheduleDOTPhysicalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DOTPhysicalServiceScheduleDOTPhysicalBody"
            }
          }
        ],
        "tags": [
          "DOTPhysicalService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/drug-tests": {
      "get": {
        "operationId": "DrugTestingService_ListDrugTests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListDrugTestsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "programId",
            "description": "Optional: filter by program",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "testType",
            "description": "Optional: filter by test type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Optional: filter by status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      },
      "post": {
        "summary": "Drug Test Management",
        "operationId": "DrugTestingService_OrderDrugTest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesOrderDrugTestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceOrderDrugTestBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/mvr-analytics": {
      "get": {
        "summary": "Analytics and Reporting",
        "operationId": "MVRService_GetMVRAnalytics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetMVRAnalyticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/mvr-monitoring": {
      "post": {
        "summary": "Continuous Monitoring",
        "operationId": "MVRService_EnableContinuousMonitoring",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesEnableContinuousMonitoringResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MVRServiceEnableContinuousMonitoringBody"
            }
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/mvr-reports": {
      "get": {
        "operationId": "MVRService_ListMVRReports",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListMVRReportsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Optional: filter by status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MVRService"
        ]
      },
      "post": {
        "summary": "MVR Report Management",
        "operationId": "MVRService_OrderMVR",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesOrderMVRResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MVRServiceOrderMVRBody"
            }
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/mvr-violations": {
      "get": {
        "operationId": "MVRService_ListMVRViolations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListMVRViolationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mvrReportId",
            "description": "Optional: filter by specific report",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "severity",
            "description": "Optional: filter by severity",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "affectsCdl",
            "description": "Optional: filter CDL-affecting violations",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/notification-analytics": {
      "get": {
        "summary": "Analytics",
        "operationId": "NotificationService_GetNotificationAnalytics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetNotificationAnalyticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "notificationType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "description": "Optional: filter by channel",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/notification-templates": {
      "get": {
        "operationId": "NotificationService_ListNotificationTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListNotificationTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "notificationType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "description": "Optional: filter by channel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeSystemTemplates",
            "description": "Include system-wide templates",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      },
      "post": {
        "summary": "Template Management",
        "operationId": "NotificationService_CreateNotificationTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCreateNotificationTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationServiceCreateNotificationTemplateBody"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/notifications/bulk": {
      "post": {
        "summary": "Bulk Operations",
        "operationId": "NotificationService_SendBulkNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesSendBulkNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationServiceSendBulkNotificationBody"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/notifications/scheduled": {
      "get": {
        "operationId": "NotificationService_ListScheduledNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListScheduledNotificationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pendingOnly",
            "description": "Show only pending notifications",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/random-pools": {
      "get": {
        "operationId": "DrugTestingService_ListRandomPools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListRandomPoolsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "programId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      },
      "post": {
        "summary": "Random Testing Pool Management",
        "operationId": "DrugTestingService_CreateRandomPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCreateRandomPoolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceCreateRandomPoolBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/random-selections": {
      "get": {
        "operationId": "DrugTestingService_ListRandomSelections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListRandomSelectionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "poolId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/reports": {
      "get": {
        "operationId": "ComplianceService_ListSavedReports",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListSavedReportsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reportType",
            "description": "Optional: filter by report type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "generatedBy",
            "description": "Optional: filter by generator",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/subscriptions": {
      "get": {
        "operationId": "OrganizationService_GetSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetSubscriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      },
      "post": {
        "summary": "Subscription Management",
        "operationId": "OrganizationService_CreateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCreateSubscriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationServiceCreateSubscriptionBody"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/testing-programs": {
      "get": {
        "operationId": "DrugTestingService_ListTestingPrograms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListTestingProgramsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "isDotProgram",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      },
      "post": {
        "summary": "Testing Program Management",
        "operationId": "DrugTestingService_CreateTestingProgram",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCreateTestingProgramResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceCreateTestingProgramBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/users": {
      "get": {
        "operationId": "OrganizationService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "role",
            "description": "Filter by role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "search",
            "description": "Search by name, email, employee_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requiresDotTesting",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "department",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      },
      "post": {
        "summary": "User Management",
        "operationId": "OrganizationService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationServiceCreateUserBody"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/workflow-analytics": {
      "get": {
        "summary": "Workflow Analytics and Monitoring",
        "operationId": "WorkflowService_GetWorkflowAnalytics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetWorkflowAnalyticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workflowType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/workflows": {
      "get": {
        "operationId": "WorkflowService_ListWorkflows",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListWorkflowsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workflowType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Optional: filter by status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityType",
            "description": "Optional: filter by entity type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "entityId",
            "description": "Optional: filter by specific entity",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      },
      "post": {
        "summary": "Generic Workflow Management",
        "operationId": "WorkflowService_StartWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesStartWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowServiceStartWorkflowBody"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/workflows/failed": {
      "get": {
        "operationId": "WorkflowService_GetFailedWorkflows",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetFailedWorkflowsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workflowType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "failedAfter",
            "description": "Optional: show failures after this date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/workflows/mvr-monitoring": {
      "post": {
        "operationId": "WorkflowService_StartMVRMonitoringWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesStartMVRMonitoringWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowServiceStartMVRMonitoringWorkflowBody"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/organizations/{organizationId}/workflows/running": {
      "get": {
        "operationId": "WorkflowService_GetRunningWorkflows",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetRunningWorkflowsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workflowType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "runningLongerThanMinutes",
            "description": "Optional: show workflows running longer than X minutes",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/random-pools/{poolId}": {
      "get": {
        "operationId": "DrugTestingService_GetRandomPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetRandomPoolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "poolId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/random-pools/{poolId}/selections": {
      "post": {
        "summary": "Random Selection Management",
        "operationId": "DrugTestingService_ConductRandomSelection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesConductRandomSelectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "poolId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceConductRandomSelectionBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/random-pools/{poolId}/users": {
      "delete": {
        "operationId": "DrugTestingService_RemoveUsersFromPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesRemoveUsersFromPoolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "poolId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceRemoveUsersFromPoolBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      },
      "post": {
        "operationId": "DrugTestingService_AddUsersToPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesAddUsersToPoolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "poolId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceAddUsersToPoolBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/random-selections/{selectionId}": {
      "get": {
        "operationId": "DrugTestingService_GetRandomSelection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetRandomSelectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "selectionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/random-selections/{selectionId}/validate": {
      "post": {
        "operationId": "DrugTestingService_ValidateRandomSelection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesValidateRandomSelectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "selectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DrugTestingServiceValidateRandomSelectionBody"
            }
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/reports/{reportId}": {
      "get": {
        "operationId": "ComplianceService_GetSavedReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetSavedReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      },
      "delete": {
        "operationId": "ComplianceService_DeleteSavedReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesDeleteSavedReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deletedBy",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/subscription-plans": {
      "get": {
        "operationId": "OrganizationService_ListSubscriptionPlans",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListSubscriptionPlansResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/subscriptions/{subscriptionId}": {
      "put": {
        "operationId": "OrganizationService_UpdateSubscription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateSubscriptionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationServiceUpdateSubscriptionBody"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/testing-programs/{programId}": {
      "get": {
        "operationId": "DrugTestingService_GetTestingProgram",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetTestingProgramResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DrugTestingService"
        ]
      }
    },
    "/api/v1/users/{userId}": {
      "get": {
        "operationId": "OrganizationService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1consortiumservicesGetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      },
      "delete": {
        "operationId": "OrganizationService_DeactivateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesDeactivateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationServiceDeactivateUserBody"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      },
      "put": {
        "operationId": "OrganizationService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1consortiumservicesUpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesOrganizationServiceUpdateUserBody"
            }
          }
        ],
        "tags": [
          "OrganizationService"
        ]
      }
    },
    "/api/v1/users/{userId}/compliance-status": {
      "get": {
        "summary": "Compliance Status Management",
        "operationId": "ComplianceService_GetComplianceStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetComplianceStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "Optional: get compliance for specific user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      },
      "put": {
        "operationId": "ComplianceService_UpdateComplianceStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateComplianceStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ComplianceServiceUpdateComplianceStatusBody"
            }
          }
        ],
        "tags": [
          "ComplianceService"
        ]
      }
    },
    "/api/v1/users/{userId}/mvr-monitoring-status": {
      "get": {
        "operationId": "MVRService_GetMonitoringStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetMonitoringStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MVRService"
        ]
      }
    },
    "/api/v1/users/{userId}/notification-preferences": {
      "get": {
        "summary": "Preference Management",
        "operationId": "NotificationService_GetNotificationPreferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetNotificationPreferencesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      },
      "put": {
        "operationId": "NotificationService_UpdateNotificationPreferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateNotificationPreferencesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationServiceUpdateNotificationPreferencesBody"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/users/{userId}/notifications": {
      "get": {
        "operationId": "NotificationService_ListNotifications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesListNotificationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "Optional: filter by user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "organizationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationType",
            "description": "Optional: filter by type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "description": "Optional: filter by channel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Optional: filter by delivery status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "priority",
            "description": "Optional: filter by priority",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "unreadOnly",
            "description": "Optional: show only unread notifications",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/users/{userId}/notifications/mark-all-read": {
      "put": {
        "operationId": "NotificationService_MarkAllNotificationsRead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesMarkAllNotificationsReadResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationServiceMarkAllNotificationsReadBody"
            }
          }
        ],
        "tags": [
          "NotificationService"
        ]
      }
    },
    "/api/v1/users/{userId}/shared-documents": {
      "get": {
        "operationId": "DocumentService_GetSharedDocuments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetSharedDocumentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sharedWithMe",
            "description": "true for docs shared with user, false for docs user shared",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "permissionLevel",
            "description": "Optional: filter by permission level",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentService"
        ]
      }
    },
    "/api/v1/workflows/background-check": {
      "post": {
        "operationId": "WorkflowService_StartBackgroundCheckWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesStartBackgroundCheckWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesStartBackgroundCheckWorkflowRequest"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/workflows/drug-test-order": {
      "post": {
        "summary": "Specific Workflow Types",
        "operationId": "WorkflowService_StartDrugTestOrderWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesStartDrugTestOrderWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesStartDrugTestOrderWorkflowRequest"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/workflows/notification": {
      "post": {
        "operationId": "WorkflowService_StartNotificationWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesStartNotificationWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesStartNotificationWorkflowRequest"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/workflows/random-selection": {
      "post": {
        "operationId": "WorkflowService_StartRandomSelectionWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesStartRandomSelectionWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicesStartRandomSelectionWorkflowRequest"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/workflows/{workflowId}": {
      "get": {
        "operationId": "WorkflowService_GetWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesGetWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      },
      "put": {
        "operationId": "WorkflowService_UpdateWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesUpdateWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowServiceUpdateWorkflowBody"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/workflows/{workflowId}/cancel": {
      "post": {
        "operationId": "WorkflowService_CancelWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesCancelWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowServiceCancelWorkflowBody"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    },
    "/api/v1/workflows/{workflowId}/retry": {
      "post": {
        "operationId": "WorkflowService_RetryWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/servicesRetryWorkflowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowServiceRetryWorkflowBody"
            }
          }
        ],
        "tags": [
          "WorkflowService"
        ]
      }
    }
  },
  "definitions": {
    "AuthorizationServiceRemoveRoleBody": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/authUserRole"
        },
        "organizationId": {
          "type": "string"
        },
        "removedBy": {
          "type": "string"
        }
      }
    },
    "BackgroundCheckServiceAddFindingBody": {
      "type": "object",
      "properties": {
        "findingType": {
          "type": "string",
          "description": "\"criminal\", \"employment_gap\", \"education_discrepancy\", etc."
        },
        "severity": {
          "type": "string",
          "title": "\"low\", \"medium\", \"high\""
        },
        "description": {
          "type": "string"
        },
        "incidentDate": {
          "type": "string",
          "format": "date-time"
        },
        "jurisdiction": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "disposition": {
          "type": "string"
        },
        "jobRelated": {
          "type": "boolean"
        },
        "requiresReview": {
          "type": "boolean"
        },
        "rawData": {
          "type": "string",
          "title": "JSON string with full details"
        }
      },
      "title": "Background Check Findings Management"
    },
    "BackgroundCheckServiceHandleDisputeBody": {
      "type": "object",
      "properties": {
        "disputeDetails": {
          "type": "string"
        },
        "handledBy": {
          "type": "string"
        },
        "resolution": {
          "type": "string"
        },
        "disputeValid": {
          "type": "boolean"
        }
      }
    },
    "BackgroundCheckServiceInitiateAdverseActionBody": {
      "type": "object",
      "properties": {
        "initiatedBy": {
          "type": "string"
        },
        "disqualifyingFindings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Finding IDs that led to adverse action"
        },
        "reason": {
          "type": "string"
        },
        "preAdverseAction": {
          "type": "boolean",
          "title": "true for pre-adverse, false for final adverse"
        }
      },
      "title": "FCRA Compliance Messages"
    },
    "BackgroundCheckServiceOrderBackgroundCheckBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "checkTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "\"criminal\", \"employment\", \"education\", \"reference\", \"credit\", \"license\""
        },
        "packageType": {
          "type": "string",
          "title": "\"basic\", \"standard\", \"comprehensive\", \"custom\""
        },
        "orderedBy": {
          "type": "string"
        },
        "purpose": {
          "type": "string",
          "title": "\"pre_employment\", \"periodic_review\", \"promotion\""
        },
        "fcraCompliant": {
          "type": "boolean"
        },
        "provider": {
          "type": "string",
          "title": "\"sterling\", \"hireright\", \"checkr\""
        },
        "searchParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional search criteria"
        }
      },
      "title": "Background Check Management Messages"
    },
    "BackgroundCheckServiceUpdateBackgroundCheckBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "\"ordered\", \"processing\", \"completed\", \"failed\", \"cancelled\""
        },
        "completionDate": {
          "type": "string",
          "format": "date-time"
        },
        "overallResult": {
          "type": "string",
          "title": "\"clear\", \"consider\", \"engaged\""
        },
        "providerReference": {
          "type": "string"
        },
        "rawData": {
          "type": "string",
          "title": "JSON string from provider"
        },
        "totalCost": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "BackgroundCheckServiceUpdateFindingBody": {
      "type": "object",
      "properties": {
        "reviewStatus": {
          "type": "string",
          "title": "\"pending\", \"reviewed\", \"approved\", \"rejected\""
        },
        "reviewDecision": {
          "type": "string",
          "title": "\"no_action\", \"further_review\", \"disqualifying\""
        },
        "reviewedBy": {
          "type": "string"
        },
        "reviewDate": {
          "type": "string",
          "format": "date-time"
        },
        "reviewNotes": {
          "type": "string"
        },
        "jobRelated": {
          "type": "boolean"
        }
      }
    },
    "ComplianceServiceGenerateComplianceCertificateBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "Optional: certificate for specific user"
        },
        "certificateType": {
          "type": "string",
          "title": "\"consortium_membership\", \"drug_test_completion\", \"compliance_summary\""
        },
        "customFields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data for certificate"
        }
      },
      "title": "Certificate Management"
    },
    "ComplianceServiceGenerateComplianceReportBody": {
      "type": "object",
      "properties": {
        "reportType": {
          "type": "string",
          "title": "\"compliance_summary\", \"drug_testing_report\", \"mvr_summary\", \"dot_annual_report\""
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "format": {
          "type": "string",
          "title": "\"pdf\", \"csv\", \"xlsx\""
        },
        "includeSections": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Sections to include in report"
        },
        "filters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional filtering criteria"
        }
      },
      "title": "Reporting Messages"
    },
    "ComplianceServiceRevokeCertificateBody": {
      "type": "object",
      "properties": {
        "revokedBy": {
          "type": "string"
        },
        "revocationReason": {
          "type": "string"
        }
      }
    },
    "ComplianceServiceUpdateComplianceStatusBody": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "forceRecalculation": {
          "type": "boolean"
        }
      }
    },
    "DOTPhysicalServiceGenerateCertificateBody": {
      "type": "object",
      "properties": {
        "templateType": {
          "type": "string",
          "title": "\"dot_medical_certificate\", \"exemption_certificate\""
        },
        "includeRestrictions": {
          "type": "boolean"
        }
      },
      "title": "Certificate Management"
    },
    "DOTPhysicalServiceScheduleDOTPhysicalBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "medicalExaminerId": {
          "type": "string",
          "title": "Optional: specific examiner"
        },
        "preferredDate": {
          "type": "string",
          "format": "date-time"
        },
        "examinationType": {
          "type": "string",
          "title": "\"initial\", \"renewal\", \"follow_up\""
        },
        "scheduledBy": {
          "type": "string"
        },
        "facilityPreference": {
          "type": "string"
        },
        "specialRequirements": {
          "type": "string",
          "title": "Any special accommodations needed"
        }
      },
      "title": "DOT Physical Management Messages"
    },
    "DOTPhysicalServiceSetExpirationReminderBody": {
      "type": "object",
      "properties": {
        "reminderDays": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Days before expiration to send reminders"
        },
        "emailEnabled": {
          "type": "boolean"
        },
        "smsEnabled": {
          "type": "boolean"
        },
        "notificationRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Additional recipients"
        }
      }
    },
    "DOTPhysicalServiceUpdateDOTPhysicalBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "\"scheduled\", \"completed\", \"cancelled\", \"no_show\""
        },
        "examinationDate": {
          "type": "string",
          "format": "date-time"
        },
        "qualificationStatus": {
          "type": "string",
          "title": "\"qualified\", \"disqualified\", \"qualified_with_restrictions\""
        },
        "certificateIssueDate": {
          "type": "string",
          "format": "date-time"
        },
        "certificateExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "certificateNumber": {
          "type": "string"
        },
        "restrictions": {
          "type": "string",
          "title": "JSON string of any restrictions"
        },
        "examinerNotes": {
          "type": "string"
        },
        "requiresMonitoring": {
          "type": "boolean"
        },
        "monitoringRequirements": {
          "type": "string"
        },
        "exemptionType": {
          "type": "string"
        },
        "exemptionExpiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DocumentServiceApplyRetentionPolicyBody": {
      "type": "object",
      "properties": {
        "documentType": {
          "type": "string",
          "title": "Optional: apply to specific type"
        },
        "retentionDays": {
          "type": "integer",
          "format": "int32",
          "title": "Days to retain documents"
        },
        "forceApply": {
          "type": "boolean",
          "title": "Apply even if documents already have auto_delete_at"
        }
      }
    },
    "DocumentServiceShareDocumentBody": {
      "type": "object",
      "properties": {
        "shareWithUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissionLevel": {
          "type": "string",
          "title": "\"view\", \"download\", \"edit\""
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "title": "Optional: share expiration"
        },
        "sharedBy": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "title": "Optional: message to recipients"
        }
      },
      "title": "Document Sharing Messages"
    },
    "DocumentServiceUpdateDocumentBody": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "confidentialityLevel": {
          "type": "string"
        },
        "autoDeleteAt": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata"
        }
      }
    },
    "DocumentServiceUploadDocumentBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "Optional: for user-specific documents"
        },
        "documentType": {
          "type": "string",
          "description": "\"test_result\", \"medical_certificate\", \"training_record\", etc."
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "title": "MIME type"
        },
        "fileData": {
          "type": "string",
          "format": "byte"
        },
        "relatedEntityType": {
          "type": "string",
          "description": "\"drug_test\", \"mvr_report\", \"dot_physical\", etc."
        },
        "relatedEntityId": {
          "type": "string",
          "title": "ID of related entity"
        },
        "isHipaaProtected": {
          "type": "boolean"
        },
        "confidentialityLevel": {
          "type": "string",
          "title": "\"public\", \"internal\", \"confidential\", \"restricted\""
        },
        "autoDeleteAt": {
          "type": "string",
          "format": "date-time",
          "title": "Optional: automatic deletion date"
        }
      },
      "title": "Document Management Messages"
    },
    "DrugTestingServiceAddUsersToPoolBody": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addedBy": {
          "type": "string"
        }
      }
    },
    "DrugTestingServiceConductRandomSelectionBody": {
      "type": "object",
      "properties": {
        "numberToSelect": {
          "type": "integer",
          "format": "int32"
        },
        "conductedBy": {
          "type": "string"
        },
        "selectionPeriod": {
          "type": "string",
          "description": "\"Q1 2025\", \"January 2025\", etc."
        },
        "algorithm": {
          "type": "string",
          "title": "\"weighted\", \"simple_random\", \"stratified\""
        }
      },
      "title": "Random Selection Management"
    },
    "DrugTestingServiceCreateRandomPoolBody": {
      "type": "object",
      "properties": {
        "programId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "poolType": {
          "type": "string",
          "description": "\"dot_drug\", \"dot_alcohol\", \"non_dot_drug\", etc."
        },
        "selectionFrequency": {
          "type": "string",
          "title": "\"quarterly\", \"monthly\""
        },
        "targetPercentage": {
          "type": "string",
          "description": "\"25%\", \"10%\", etc."
        },
        "isActive": {
          "type": "boolean"
        }
      },
      "title": "Random Testing Management"
    },
    "DrugTestingServiceCreateTestingProgramBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "isDotProgram": {
          "type": "boolean"
        },
        "drugPanelType": {
          "type": "string",
          "title": "\"5_panel\", \"10_panel\", \"custom\""
        },
        "alcoholTestingEnabled": {
          "type": "boolean"
        },
        "randomTestingEnabled": {
          "type": "boolean"
        },
        "randomTestingRate": {
          "type": "string",
          "description": "\"25%\", \"50%\", etc."
        },
        "testingFrequency": {
          "type": "string",
          "title": "\"quarterly\", \"monthly\", \"annual\""
        }
      },
      "title": "Testing Program Management"
    },
    "DrugTestingServiceOrderDrugTestBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "programId": {
          "type": "string"
        },
        "testType": {
          "type": "string",
          "description": "\"pre_employment\", \"random\", \"post_accident\", etc."
        },
        "testCategory": {
          "type": "string",
          "title": "\"drug\", \"alcohol\", \"both\""
        },
        "isDotTest": {
          "type": "boolean"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "orderedBy": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "facilityPreference": {
          "type": "string"
        }
      },
      "title": "Drug Test Management"
    },
    "DrugTestingServiceRemoveUsersFromPoolBody": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removedBy": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "DrugTestingServiceUpdateDrugTestBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "\"ordered\", \"in_progress\", \"completed\", \"cancelled\""
        },
        "result": {
          "type": "string",
          "title": "\"negative\", \"positive\", \"dilute\", \"invalid\", \"pending\""
        },
        "collectionDate": {
          "type": "string",
          "format": "date-time"
        },
        "resultDate": {
          "type": "string",
          "format": "date-time"
        },
        "mroReviewedBy": {
          "type": "string"
        },
        "mroReviewDate": {
          "type": "string",
          "format": "date-time"
        },
        "labResults": {
          "type": "string",
          "title": "JSON string"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "DrugTestingServiceValidateRandomSelectionBody": {
      "type": "object",
      "properties": {
        "validatedBy": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "MVRServiceAddMVRViolationBody": {
      "type": "object",
      "properties": {
        "violationType": {
          "type": "string",
          "description": "\"speeding\", \"dui\", \"reckless_driving\", etc."
        },
        "violationDate": {
          "type": "string",
          "format": "date-time"
        },
        "jurisdiction": {
          "type": "string",
          "title": "State/county where violation occurred"
        },
        "description": {
          "type": "string"
        },
        "severity": {
          "type": "string",
          "title": "\"minor\", \"major\", \"serious\""
        },
        "fineAmount": {
          "type": "string"
        },
        "caseNumber": {
          "type": "string"
        },
        "affectsCdl": {
          "type": "boolean"
        },
        "requiresAction": {
          "type": "boolean"
        }
      },
      "title": "MVR Violation Management"
    },
    "MVRServiceEnableContinuousMonitoringBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "monitoringFrequency": {
          "type": "string",
          "title": "\"monthly\", \"quarterly\", \"annual\""
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "title": "Continuous Monitoring Messages"
    },
    "MVRServiceOrderMVRBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "licenseNumber": {
          "type": "string"
        },
        "licenseState": {
          "type": "string"
        },
        "orderedBy": {
          "type": "string"
        },
        "reportType": {
          "type": "string",
          "title": "\"initial\", \"annual\", \"continuous_monitoring\""
        },
        "provider": {
          "type": "string",
          "title": "\"mvr_com\", \"hireright\", \"sterling\""
        }
      },
      "title": "MVR Management Messages"
    },
    "MVRServiceUpdateMVRReportBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "\"ordered\", \"processing\", \"completed\", \"failed\""
        },
        "reportDate": {
          "type": "string",
          "format": "date-time"
        },
        "licenseStatus": {
          "type": "string",
          "title": "\"valid\", \"suspended\", \"revoked\", \"expired\""
        },
        "cdlStatus": {
          "type": "string",
          "title": "\"valid\", \"disqualified\", \"not_applicable\""
        },
        "rawData": {
          "type": "string",
          "title": "JSON string from provider"
        },
        "providerReference": {
          "type": "string"
        }
      }
    },
    "MVRServiceUpdateMVRViolationBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "\"active\", \"resolved\", \"dismissed\""
        },
        "actionTaken": {
          "type": "string"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "NotificationServiceCreateNotificationTemplateBody": {
      "type": "object",
      "properties": {
        "templateName": {
          "type": "string"
        },
        "notificationType": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "subjectTemplate": {
          "type": "string"
        },
        "bodyTemplate": {
          "type": "string"
        },
        "requiredVariables": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Variables that must be provided"
        },
        "isSystemTemplate": {
          "type": "boolean",
          "title": "System templates are read-only"
        }
      },
      "title": "Notification Templates"
    },
    "NotificationServiceMarkAllNotificationsReadBody": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        }
      }
    },
    "NotificationServiceMarkNotificationReadBody": {
      "type": "object",
      "properties": {
        "readBy": {
          "type": "string"
        }
      }
    },
    "NotificationServiceSendBulkNotificationBody": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Target users"
        },
        "notificationType": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "templateId": {
          "type": "string",
          "title": "Optional: use template"
        },
        "templateData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Common template data"
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesBulkNotificationRecipient"
          },
          "title": "Per-recipient data"
        }
      },
      "title": "Bulk Notifications"
    },
    "NotificationServiceUpdateNotificationPreferencesBody": {
      "type": "object",
      "properties": {
        "preferences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesNotificationPreference"
          }
        }
      }
    },
    "NotificationServiceUpdateNotificationTemplateBody": {
      "type": "object",
      "properties": {
        "templateName": {
          "type": "string"
        },
        "subjectTemplate": {
          "type": "string"
        },
        "bodyTemplate": {
          "type": "string"
        },
        "requiredVariables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "OrganizationServiceCreateSubscriptionBody": {
      "type": "object",
      "properties": {
        "planId": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "stripeSubscriptionId": {
          "type": "string"
        },
        "stripeCustomerId": {
          "type": "string"
        }
      },
      "title": "Subscription Management Messages"
    },
    "OrganizationServiceCreateUserBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "ssnLastFour": {
          "type": "string"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time"
        },
        "requiresDotTesting": {
          "type": "boolean"
        },
        "requiresNonDotTesting": {
          "type": "boolean"
        },
        "cdlNumber": {
          "type": "string"
        },
        "cdlState": {
          "type": "string"
        },
        "cdlExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "jobTitle": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "supervisorId": {
          "type": "string"
        },
        "emergencyContactName": {
          "type": "string"
        },
        "emergencyContactPhone": {
          "type": "string"
        },
        "emergencyContactRelationship": {
          "type": "string"
        }
      },
      "title": "User Management Messages"
    },
    "OrganizationServiceDeactivateOrganizationBody": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        }
      }
    },
    "OrganizationServiceDeactivateUserBody": {
      "type": "object",
      "properties": {
        "terminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "OrganizationServiceUpdateOrganizationBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "usdotNumber": {
          "type": "string"
        },
        "mcNumber": {
          "type": "string"
        },
        "industry": {
          "type": "string"
        },
        "isDotRegulated": {
          "type": "boolean"
        },
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "settings": {
          "type": "string",
          "title": "JSON string"
        }
      }
    },
    "OrganizationServiceUpdateSubscriptionBody": {
      "type": "object",
      "properties": {
        "planId": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "WorkflowServiceCancelWorkflowBody": {
      "type": "object",
      "properties": {
        "cancelledBy": {
          "type": "string"
        },
        "cancellationReason": {
          "type": "string"
        }
      }
    },
    "WorkflowServiceRetryWorkflowBody": {
      "type": "object",
      "properties": {
        "retriedBy": {
          "type": "string"
        },
        "updatedInputData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional: update input data"
        }
      }
    },
    "WorkflowServiceStartMVRMonitoringWorkflowBody": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "monitoringFrequency": {
          "type": "string",
          "title": "\"monthly\", \"quarterly\", \"annual\""
        },
        "provider": {
          "type": "string",
          "description": "\"mvr_com\", \"hireright\", etc."
        },
        "providerConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "MVR Monitoring Workflow"
    },
    "WorkflowServiceStartWorkflowBody": {
      "type": "object",
      "properties": {
        "workflowType": {
          "type": "string",
          "description": "\"drug_test_order\", \"mvr_monitoring\", \"random_selection\", etc."
        },
        "entityType": {
          "type": "string",
          "description": "\"drug_test\", \"mvr_report\", \"random_selection\", etc."
        },
        "entityId": {
          "type": "string",
          "title": "ID of the related entity"
        },
        "inputData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Input parameters for the workflow"
        },
        "startedBy": {
          "type": "string"
        },
        "scheduledAt": {
          "type": "string",
          "format": "date-time",
          "title": "Optional: schedule for future execution"
        }
      },
      "title": "Workflow Management Messages"
    },
    "WorkflowServiceUpdateWorkflowBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "\"running\", \"completed\", \"failed\", \"cancelled\""
        },
        "outputData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Output/result data"
        },
        "errorMessage": {
          "type": "string",
          "title": "If status is \"failed\""
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "completedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authAssignRoleRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/authUserRole"
        },
        "organizationId": {
          "type": "string"
        },
        "assignedBy": {
          "type": "string"
        }
      },
      "title": "Role management messages"
    },
    "authAssignRoleResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authAuthServiceUpdateUserBody": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "authChangePasswordRequest": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "authChangePasswordResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authCheckPermissionRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "permission": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        }
      },
      "title": "Permission and Role Management"
    },
    "authCheckPermissionResponse": {
      "type": "object",
      "properties": {
        "allowed": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "authCleanupExpiredTokensResponse": {
      "type": "object",
      "properties": {
        "cleanedCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "authCompleteRegistrationRequest": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "emailVerificationToken": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "subscriptionPlan": {
          "type": "string",
          "title": "Optional subscription plan"
        }
      },
      "title": "Step 2: Complete Registration - After Email Verification and Subscription"
    },
    "authCompleteRegistrationResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/authUserSession"
        },
        "sessionId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authCreateSessionResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "authCreateTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "tokenId": {
          "type": "string"
        }
      }
    },
    "authDisableMFARequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "authDisableMFAResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authEnableMFARequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "title": "\"totp\", \"sms\", \"email\""
        }
      },
      "title": "MFA Messages"
    },
    "authEnableMFAResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        },
        "qrCode": {
          "type": "string"
        },
        "backupCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "authForgotPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "authForgotPasswordResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authGetActiveSessionsResponse": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authSessionInfo"
          }
        }
      }
    },
    "authGetRolePermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authPermission"
          }
        }
      }
    },
    "authGetSignupStatusResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "title": "\"pending_verification\", \"verified\", \"completed\", \"expired\", \"failed\""
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "subscriptionCompleted": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "nextStep": {
          "type": "string",
          "title": "Description of what the user needs to do next"
        }
      }
    },
    "authGetUserPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "type": "string"
        }
      }
    },
    "authGetUserRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authUserRole"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authPermission"
          }
        }
      }
    },
    "authHasPermissionRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "permission": {
          "$ref": "#/definitions/authPermission"
        },
        "organizationId": {
          "type": "string",
          "title": "Optional: for organization-specific permissions"
        },
        "resourceId": {
          "type": "string",
          "title": "Optional: for resource-specific permissions"
        }
      },
      "title": "Permission check request"
    },
    "authHasPermissionResponse": {
      "type": "object",
      "properties": {
        "hasPermission": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "authLoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "rememberMe": {
          "type": "boolean"
        }
      },
      "title": "Authentication Request and Response Messages"
    },
    "authLoginResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/authUserSession"
        },
        "sessionId": {
          "type": "string"
        }
      }
    },
    "authLogoutRequest": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      }
    },
    "authLogoutResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authPermission": {
      "type": "string",
      "enum": [
        "PERMISSION_UNSPECIFIED",
        "SYSTEM_ADMIN",
        "MANAGE_ALL_ORGANIZATIONS",
        "MANAGE_SUBSCRIPTIONS",
        "VIEW_SYSTEM_AUDIT_LOGS",
        "MANAGE_ORGANIZATION",
        "VIEW_ORGANIZATION",
        "UPDATE_ORGANIZATION_SETTINGS",
        "MANAGE_USERS",
        "INVITE_USERS",
        "DEACTIVATE_USERS",
        "VIEW_USER_PROFILES",
        "UPDATE_USER_PROFILES",
        "MANAGE_TESTING_PROGRAMS",
        "ORDER_DRUG_TESTS",
        "VIEW_TEST_RESULTS",
        "MANAGE_RANDOM_POOLS",
        "CONDUCT_RANDOM_SELECTIONS",
        "APPROVE_TEST_RESULTS",
        "ORDER_MVR_REPORTS",
        "VIEW_MVR_REPORTS",
        "MANAGE_MVR_MONITORING",
        "SCHEDULE_DOT_PHYSICALS",
        "VIEW_MEDICAL_CERTIFICATES",
        "MANAGE_MEDICAL_EXAMINERS",
        "CONDUCT_DOT_PHYSICALS",
        "ORDER_BACKGROUND_CHECKS",
        "VIEW_BACKGROUND_REPORTS",
        "MANAGE_ADVERSE_ACTIONS",
        "DOWNLOAD_CERTIFICATES",
        "MANAGE_DOCUMENTS",
        "VIEW_COMPLIANCE_REPORTS",
        "GENERATE_REPORTS",
        "VIEW_COMPLIANCE_STATUS",
        "MANAGE_COMPLIANCE_PROGRAMS",
        "MANAGE_NOTIFICATIONS",
        "SEND_NOTIFICATIONS",
        "VIEW_AUDIT_LOGS",
        "VIEW_ORGANIZATION_AUDIT_LOGS"
      ],
      "default": "PERMISSION_UNSPECIFIED",
      "description": "- SYSTEM_ADMIN: System Administration (Internal only)\n - MANAGE_ORGANIZATION: Organization Management\n - MANAGE_USERS: User Management\n - MANAGE_TESTING_PROGRAMS: Drug \u0026 Alcohol Testing\n - ORDER_MVR_REPORTS: MVR Management\n - SCHEDULE_DOT_PHYSICALS: DOT Physicals\n - ORDER_BACKGROUND_CHECKS: Background Checks\n - DOWNLOAD_CERTIFICATES: Documents \u0026 Certificates\n - VIEW_COMPLIANCE_STATUS: Compliance Management\n - MANAGE_NOTIFICATIONS: Notifications\n - VIEW_AUDIT_LOGS: Audit \u0026 Logs",
      "title": "Permission definitions"
    },
    "authRefreshSessionResponse": {
      "type": "object",
      "properties": {
        "newAccessToken": {
          "type": "string"
        },
        "newRefreshToken": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authRefreshTokenRequest": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "authRefreshTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authRemoveRoleResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authResendVerificationRequest": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        }
      }
    },
    "authResendVerificationResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "sent": {
          "type": "boolean"
        }
      }
    },
    "authResetPasswordRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "authResetPasswordResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authRevokeAllSessionsResponse": {
      "type": "object",
      "properties": {
        "revokedCount": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "authRevokeSessionResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authRevokeTokenResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authSessionInfo": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "userAgent": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastAccessed": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "isCurrent": {
          "type": "boolean"
        }
      }
    },
    "authSignupRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "invitationToken": {
          "type": "string",
          "title": "Optional invitation token"
        },
        "companyName": {
          "type": "string",
          "title": "Optional company name"
        },
        "isDotCompany": {
          "type": "boolean",
          "title": "Optional flag to indicate if the company is a .com company"
        },
        "dotNumber": {
          "type": "string",
          "title": "Optional DOT number for .com companies"
        }
      },
      "title": "Step 1: Initial Signup - User Information"
    },
    "authSignupResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "requiresEmailVerification": {
          "type": "boolean"
        }
      }
    },
    "authSocialSignupRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "description": "\"google\", \"facebook\", \"github\", etc."
        },
        "providerToken": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "invitationToken": {
          "type": "string",
          "title": "Optional invitation token"
        }
      },
      "title": "Social Signup - OAuth/Social Login"
    },
    "authSocialSignupResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "requiresEmailVerification": {
          "type": "boolean"
        }
      }
    },
    "authUserRole": {
      "type": "string",
      "enum": [
        "USER_ROLE_UNSPECIFIED",
        "INTERNAL_SU",
        "INTERNAL_ADMIN",
        "INTERNAL_SUPPORT",
        "CLIENT_ADMIN",
        "DER",
        "SAFETY_MANAGER",
        "HR_MANAGER",
        "EMPLOYEE",
        "MRO",
        "SAP",
        "MEDICAL_EXAMINER"
      ],
      "default": "USER_ROLE_UNSPECIFIED",
      "description": "- INTERNAL_SU: Internal Users\n\nInternal Super User\n - INTERNAL_ADMIN: Internal Administrator\n - INTERNAL_SUPPORT: Internal Support\n - CLIENT_ADMIN: External Users\n\nClient Administrator\n - DER: Designated Employer Representative\n - SAFETY_MANAGER: Safety Manager\n - HR_MANAGER: HR Manager\n - EMPLOYEE: Employee\n - MRO: Provider Users\n\nMedical Review Officer\n - SAP: Substance Abuse Professional\n - MEDICAL_EXAMINER: Medical Examiner",
      "title": "Role definitions matching the database schema"
    },
    "authUserSession": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mfaEnabled": {
          "type": "boolean"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Session and User Information"
    },
    "authValidateSessionResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "authValidateTokenResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "authVerifyEmailRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "authVerifyEmailResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "authVerifyMFARequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "method": {
          "type": "string"
        }
      }
    },
    "authVerifyMFAResponse": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "gatewayAddRouteResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "gatewayApiRequest": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "title": "HTTP method: GET, POST, PUT, DELETE"
        },
        "path": {
          "type": "string",
          "title": "API endpoint path"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "queryParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "body": {
          "$ref": "#/definitions/protobufAny",
          "title": "Request body"
        },
        "userId": {
          "type": "string",
          "title": "Authenticated user ID"
        },
        "organizationId": {
          "type": "string",
          "title": "User's organization"
        },
        "sessionId": {
          "type": "string",
          "title": "Session identifier"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Common API Gateway Messages"
    },
    "gatewayApiResponse": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "body": {
          "$ref": "#/definitions/protobufAny",
          "title": "Response body"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "processingTimeMs": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "gatewayApiVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "\"v1\", \"v2\", etc."
        },
        "basePath": {
          "type": "string",
          "title": "\"/api/v1\""
        },
        "isDefault": {
          "type": "boolean"
        },
        "deprecated": {
          "type": "boolean"
        },
        "deprecationDate": {
          "type": "string",
          "format": "date-time"
        },
        "sunsetDate": {
          "type": "string",
          "format": "date-time"
        },
        "routes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayRouteConfig"
          }
        }
      },
      "title": "API Version Configuration"
    },
    "gatewayAuthContext": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sessionId": {
          "type": "string"
        },
        "mfaVerified": {
          "type": "boolean"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Authentication/Authorization Messages"
    },
    "gatewayAuthenticateResponse": {
      "type": "object",
      "properties": {
        "authenticated": {
          "type": "boolean"
        },
        "authorized": {
          "type": "boolean"
        },
        "authContext": {
          "$ref": "#/definitions/gatewayAuthContext"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "gatewayCacheConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "ttlSeconds": {
          "type": "integer",
          "format": "int32",
          "title": "Time to live"
        },
        "cacheKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Keys to cache by (user_id, org_id, etc.)"
        },
        "varyByUser": {
          "type": "boolean",
          "title": "Cache per user"
        },
        "varyByOrganization": {
          "type": "boolean",
          "title": "Cache per organization"
        }
      },
      "title": "Cache Configuration"
    },
    "gatewayCircuitBreakerConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "failureThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Failures before opening circuit"
        },
        "timeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "title": "Time before attempting to close"
        },
        "successThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Successes needed to close circuit"
        }
      },
      "title": "Circuit Breaker Configuration"
    },
    "gatewayCircuitBreakerStatusResponse": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "title": "\"closed\", \"open\", \"half_open\""
        },
        "failureCount": {
          "type": "integer",
          "format": "int32"
        },
        "lastFailure": {
          "type": "string",
          "format": "date-time"
        },
        "nextAttempt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gatewayCorsConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "allowedOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedMethods": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exposedHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowCredentials": {
          "type": "boolean"
        },
        "maxAgeSeconds": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CORS Configuration"
    },
    "gatewayEndpointMetric": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "requestCount": {
          "type": "string",
          "format": "int64"
        },
        "averageResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "errorCount": {
          "type": "string",
          "format": "int64"
        },
        "errorRate": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "gatewayErrorStats": {
      "type": "object",
      "properties": {
        "errorType": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        },
        "lastOccurrence": {
          "type": "string"
        },
        "affectedServices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "gatewayGatewayConfig": {
      "type": "object",
      "properties": {
        "apiVersions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayApiVersion"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayServiceConfig"
          }
        },
        "globalConfig": {
          "$ref": "#/definitions/gatewayGlobalConfig"
        }
      }
    },
    "gatewayGatewayMetrics": {
      "type": "object",
      "properties": {
        "totalRequestsToday": {
          "type": "string",
          "format": "int64"
        },
        "activeConnections": {
          "type": "string",
          "format": "int64"
        },
        "cpuUsagePercent": {
          "type": "number",
          "format": "float"
        },
        "memoryUsagePercent": {
          "type": "number",
          "format": "float"
        },
        "requestsPerMinute": {
          "type": "string",
          "format": "int64"
        },
        "averageResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "errorCountToday": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "gatewayGetErrorStatsResponse": {
      "type": "object",
      "properties": {
        "errorStats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayErrorStats"
          }
        },
        "totalErrors": {
          "type": "string",
          "format": "int64"
        },
        "mostCommonError": {
          "type": "string"
        }
      }
    },
    "gatewayGetGatewayConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/gatewayGatewayConfig"
        }
      }
    },
    "gatewayGetGatewayStatusResponse": {
      "type": "object",
      "properties": {
        "gatewayStatus": {
          "type": "string",
          "title": "\"healthy\", \"degraded\", \"unhealthy\""
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        },
        "uptimeSeconds": {
          "type": "string",
          "format": "int64"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayServiceStatus"
          }
        },
        "gatewayMetrics": {
          "$ref": "#/definitions/gatewayGatewayMetrics"
        }
      }
    },
    "gatewayGetMetricsResponse": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/gatewayMetricsSummary"
        },
        "timeSeries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayTimeSeriesPoint"
          }
        },
        "endpointMetrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayEndpointMetric"
          }
        },
        "serviceMetrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayServiceMetric"
          }
        }
      }
    },
    "gatewayGetPerformanceStatsResponse": {
      "type": "object",
      "properties": {
        "performanceStats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayPerformanceStats"
          }
        },
        "overallStats": {
          "$ref": "#/definitions/gatewayPerformanceStats"
        }
      }
    },
    "gatewayGetRateLimitStatsResponse": {
      "type": "object",
      "properties": {
        "rateLimitStats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayRateLimitStats"
          }
        },
        "totalRequests": {
          "type": "string",
          "format": "int64"
        },
        "totalRejections": {
          "type": "string",
          "format": "int64"
        },
        "overallRejectionRate": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "gatewayGlobalConfig": {
      "type": "object",
      "properties": {
        "defaultApiVersion": {
          "type": "string"
        },
        "cors": {
          "$ref": "#/definitions/gatewayCorsConfig"
        },
        "security": {
          "$ref": "#/definitions/gatewaySecurityConfig"
        },
        "logging": {
          "$ref": "#/definitions/gatewayLoggingConfig"
        },
        "metrics": {
          "$ref": "#/definitions/gatewayMetricsConfig"
        }
      }
    },
    "gatewayHealthCheckConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "intervalSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "timeoutSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "healthCheckPath": {
          "type": "string",
          "title": "gRPC method for health checks"
        },
        "unhealthyThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Failures before marking unhealthy"
        },
        "healthyThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Successes before marking healthy"
        }
      },
      "title": "Health Check Configuration"
    },
    "gatewayHttpMethod": {
      "type": "string",
      "enum": [
        "HTTP_METHOD_UNSPECIFIED",
        "GET",
        "POST",
        "PUT",
        "DELETE",
        "PATCH",
        "OPTIONS",
        "HEAD"
      ],
      "default": "HTTP_METHOD_UNSPECIFIED",
      "title": "HTTP Method enumeration"
    },
    "gatewayListRoutesResponse": {
      "type": "object",
      "properties": {
        "routes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayRouteConfig"
          }
        }
      }
    },
    "gatewayListServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayServiceInfo"
          }
        }
      }
    },
    "gatewayLogApiRequestResponse": {
      "type": "object",
      "properties": {
        "logId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "gatewayLoggingConfig": {
      "type": "object",
      "properties": {
        "logLevel": {
          "type": "string",
          "title": "\"debug\", \"info\", \"warn\", \"error\""
        },
        "logRequests": {
          "type": "boolean"
        },
        "logResponses": {
          "type": "boolean"
        },
        "logRequestBody": {
          "type": "boolean"
        },
        "logResponseBody": {
          "type": "boolean"
        },
        "sensitiveHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Headers to redact"
        },
        "sensitiveFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "JSON fields to redact"
        }
      },
      "title": "Logging Configuration"
    },
    "gatewayMetricsConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "metricsEndpoint": {
          "type": "string",
          "title": "\"/metrics\""
        },
        "collectDetailedMetrics": {
          "type": "boolean"
        },
        "customMetrics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Metrics Configuration"
    },
    "gatewayMetricsSummary": {
      "type": "object",
      "properties": {
        "totalRequests": {
          "type": "string",
          "format": "int64"
        },
        "successfulRequests": {
          "type": "string",
          "format": "int64",
          "title": "2xx status codes"
        },
        "clientErrors": {
          "type": "string",
          "format": "int64",
          "title": "4xx status codes"
        },
        "serverErrors": {
          "type": "string",
          "format": "int64",
          "title": "5xx status codes"
        },
        "averageResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "p50ResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "p95ResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "p99ResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "totalBytesTransferred": {
          "type": "string",
          "format": "int64"
        },
        "requestsPerSecond": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "gatewayMiddlewareConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "\"auth\", \"rate_limit\", \"cors\", \"logging\", \"validation\""
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "Execution order"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Middleware-specific configuration"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "title": "Middleware Configuration"
    },
    "gatewayPerformanceStats": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "requestCount": {
          "type": "string",
          "format": "int64"
        },
        "minResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "maxResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "avgResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "p50ResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "p95ResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "p99ResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "timeoutCount": {
          "type": "string",
          "format": "int64"
        },
        "throughputRps": {
          "type": "number",
          "format": "float",
          "title": "Requests per second"
        }
      }
    },
    "gatewayRateLimitConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "requestsPerMinute": {
          "type": "integer",
          "format": "int32"
        },
        "requestsPerHour": {
          "type": "integer",
          "format": "int32"
        },
        "requestsPerDay": {
          "type": "integer",
          "format": "int32"
        },
        "rateLimitType": {
          "type": "string",
          "title": "\"user\", \"ip\", \"organization\""
        },
        "burstLimit": {
          "type": "integer",
          "format": "int32",
          "title": "Allow burst of requests"
        }
      },
      "title": "Rate Limiting Configuration"
    },
    "gatewayRateLimitResponse": {
      "type": "object",
      "properties": {
        "allowed": {
          "type": "boolean"
        },
        "remainingRequests": {
          "type": "integer",
          "format": "int32"
        },
        "resetTime": {
          "type": "string",
          "format": "date-time"
        },
        "retryAfterSeconds": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "gatewayRateLimitStats": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "title": "User ID, IP, or organization ID"
        },
        "identifierType": {
          "type": "string",
          "title": "\"user\", \"ip\", \"organization\""
        },
        "endpoint": {
          "type": "string"
        },
        "totalRequests": {
          "type": "string",
          "format": "int64"
        },
        "rejectedRequests": {
          "type": "string",
          "format": "int64"
        },
        "rejectionRate": {
          "type": "number",
          "format": "float"
        },
        "lastRejection": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gatewayRecordErrorResponse": {
      "type": "object",
      "properties": {
        "errorId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "gatewayRecordMetricResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "gatewayRemoveRouteResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "gatewayRequestMetric": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "durationMs": {
          "type": "string",
          "format": "int64"
        },
        "requestSizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "responseSizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "errorType": {
          "type": "string",
          "title": "If there was an error"
        },
        "userAgent": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        }
      },
      "title": "Metrics Collection Messages"
    },
    "gatewayRetryConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "maxRetries": {
          "type": "integer",
          "format": "int32"
        },
        "baseDelayMs": {
          "type": "integer",
          "format": "int32",
          "title": "Base delay between retries"
        },
        "maxDelayMs": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum delay between retries"
        },
        "backoffStrategy": {
          "type": "string",
          "title": "\"linear\", \"exponential\", \"fixed\""
        },
        "retryableStatusCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "HTTP status codes to retry"
        }
      },
      "title": "Retry Configuration"
    },
    "gatewayRouteConfig": {
      "type": "object",
      "properties": {
        "routeId": {
          "type": "string"
        },
        "pathPattern": {
          "type": "string",
          "title": "e.g., \"/api/v1/organizations/{id}\""
        },
        "method": {
          "$ref": "#/definitions/gatewayHttpMethod"
        },
        "targetService": {
          "type": "string",
          "title": "Target microservice"
        },
        "targetMethod": {
          "type": "string",
          "title": "Target gRPC method"
        },
        "requiredPermissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requiresAuthentication": {
          "type": "boolean"
        },
        "rateLimit": {
          "$ref": "#/definitions/gatewayRateLimitConfig"
        },
        "cache": {
          "$ref": "#/definitions/gatewayCacheConfig"
        },
        "middleware": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/gatewayMiddlewareConfig"
          }
        },
        "isPublic": {
          "type": "boolean",
          "title": "Public endpoints don't require auth"
        }
      },
      "title": "Route Configuration"
    },
    "gatewayRouteResponse": {
      "type": "object",
      "properties": {
        "targetService": {
          "type": "string"
        },
        "targetMethod": {
          "type": "string"
        },
        "transformedRequest": {
          "$ref": "#/definitions/protobufAny"
        },
        "routingMetadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "gatewaySecurityConfig": {
      "type": "object",
      "properties": {
        "enforceHttps": {
          "type": "boolean"
        },
        "validateJwtSignature": {
          "type": "boolean"
        },
        "trustedJwtIssuers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requireApiKey": {
          "type": "boolean"
        },
        "apiKeyHeader": {
          "type": "string"
        },
        "enableIpFiltering": {
          "type": "boolean"
        },
        "allowedIpRanges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Security Configuration"
    },
    "gatewayServiceConfig": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "serviceAddress": {
          "type": "string"
        },
        "servicePort": {
          "type": "integer",
          "format": "int32"
        },
        "loadBalancingEnabled": {
          "type": "boolean"
        },
        "loadBalancerStrategy": {
          "type": "string",
          "title": "\"round_robin\", \"least_connections\", \"weighted\""
        },
        "healthCheck": {
          "$ref": "#/definitions/gatewayHealthCheckConfig"
        },
        "circuitBreaker": {
          "$ref": "#/definitions/gatewayCircuitBreakerConfig"
        },
        "timeout": {
          "$ref": "#/definitions/gatewayTimeoutConfig"
        },
        "retry": {
          "$ref": "#/definitions/gatewayRetryConfig"
        }
      },
      "title": "Service Configuration"
    },
    "gatewayServiceHealthResponse": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "healthy": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "title": "\"healthy\", \"degraded\", \"unhealthy\""
        },
        "version": {
          "type": "string"
        },
        "lastCheck": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "gatewayServiceInfo": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "healthy": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "gatewayServiceMetric": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "requestCount": {
          "type": "string",
          "format": "int64"
        },
        "averageResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "errorCount": {
          "type": "string",
          "format": "int64"
        },
        "errorRate": {
          "type": "number",
          "format": "float"
        },
        "healthy": {
          "type": "boolean"
        }
      }
    },
    "gatewayServiceStatus": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "healthy": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "title": "\"healthy\", \"degraded\", \"unhealthy\", \"unknown\""
        },
        "lastCheck": {
          "type": "string",
          "format": "date-time"
        },
        "responseTimeMs": {
          "type": "string",
          "format": "int64"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "gatewayTimeSeriesPoint": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "requestCount": {
          "type": "string",
          "format": "int64"
        },
        "averageResponseTimeMs": {
          "type": "number",
          "format": "float"
        },
        "errorCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "gatewayTimeoutConfig": {
      "type": "object",
      "properties": {
        "requestTimeoutSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "connectionTimeoutSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "idleTimeoutSeconds": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Timeout Configuration"
    },
    "gatewayUpdateGatewayConfigResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "gatewayUpdateRouteResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "gatewayValidateRequestResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "validationErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pbentityBackgroundCheckFindings": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "BackgroundCheckId": {
          "type": "string"
        },
        "FindingType": {
          "type": "string"
        },
        "Severity": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "DateOfRecord": {
          "type": "string",
          "format": "date-time"
        },
        "Jurisdiction": {
          "type": "string"
        },
        "CaseNumber": {
          "type": "string"
        },
        "Disposition": {
          "type": "string"
        },
        "JobRelated": {
          "type": "boolean"
        },
        "Disqualifying": {
          "type": "boolean"
        },
        "RequiresIndividualizedAssessment": {
          "type": "boolean"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityBackgroundChecks": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "CheckType": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "OrderedDate": {
          "type": "string",
          "format": "date-time"
        },
        "OrderedBy": {
          "type": "string"
        },
        "ExternalOrderId": {
          "type": "string"
        },
        "ProviderName": {
          "type": "string"
        },
        "CompletedDate": {
          "type": "string",
          "format": "date-time"
        },
        "ReportDate": {
          "type": "string",
          "format": "date-time"
        },
        "OverallResult": {
          "type": "string"
        },
        "RequiresReview": {
          "type": "boolean"
        },
        "AdverseActionRequired": {
          "type": "boolean"
        },
        "FcraDisclosureSent": {
          "type": "boolean"
        },
        "FcraAuthorizationReceived": {
          "type": "boolean"
        },
        "PreAdverseActionSent": {
          "type": "boolean"
        },
        "AdverseActionSent": {
          "type": "boolean"
        },
        "Notes": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityCertificates": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "CertificateType": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "CertificateNumber": {
          "type": "string"
        },
        "IssueDate": {
          "type": "string",
          "format": "date-time"
        },
        "ExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "TestId": {
          "type": "string"
        },
        "PhysicalId": {
          "type": "string"
        },
        "CertificateUrl": {
          "type": "string"
        },
        "TemplateUsed": {
          "type": "string"
        },
        "IsDigitallySigned": {
          "type": "boolean"
        },
        "SignatureHash": {
          "type": "string"
        },
        "SignatureTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "DownloadCount": {
          "type": "integer",
          "format": "int32"
        },
        "LastDownloadedAt": {
          "type": "string",
          "format": "date-time"
        },
        "LastDownloadedBy": {
          "type": "string"
        },
        "IsRevoked": {
          "type": "boolean"
        },
        "RevokedAt": {
          "type": "string",
          "format": "date-time"
        },
        "RevokedBy": {
          "type": "string"
        },
        "RevocationReason": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityComplianceStatus": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "IsCompliant": {
          "type": "boolean"
        },
        "CompliancePercentage": {
          "type": "string"
        },
        "LastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "DrugTestingCurrent": {
          "type": "boolean"
        },
        "LastDrugTestDate": {
          "type": "string",
          "format": "date-time"
        },
        "NextDrugTestDue": {
          "type": "string",
          "format": "date-time"
        },
        "MvrCurrent": {
          "type": "boolean"
        },
        "LastMvrDate": {
          "type": "string",
          "format": "date-time"
        },
        "NextMvrDue": {
          "type": "string",
          "format": "date-time"
        },
        "PhysicalCurrent": {
          "type": "boolean"
        },
        "MedicalCertExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "BackgroundCheckCurrent": {
          "type": "boolean"
        },
        "LastBackgroundCheckDate": {
          "type": "string",
          "format": "date-time"
        },
        "TrainingCurrent": {
          "type": "boolean"
        },
        "LastTrainingDate": {
          "type": "string",
          "format": "date-time"
        },
        "ViolationsCount": {
          "type": "integer",
          "format": "int32"
        },
        "HighRiskFlags": {
          "type": "integer",
          "format": "int32"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityDocuments": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "DocumentType": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "FileName": {
          "type": "string"
        },
        "FileSize": {
          "type": "string",
          "format": "int64"
        },
        "MimeType": {
          "type": "string"
        },
        "StoragePath": {
          "type": "string"
        },
        "StorageBucket": {
          "type": "string"
        },
        "TestId": {
          "type": "string"
        },
        "MvrReportId": {
          "type": "string"
        },
        "PhysicalId": {
          "type": "string"
        },
        "BackgroundCheckId": {
          "type": "string"
        },
        "UploadedBy": {
          "type": "string"
        },
        "UploadedAt": {
          "type": "string",
          "format": "date-time"
        },
        "IsConfidential": {
          "type": "boolean"
        },
        "IsHipaaProtected": {
          "type": "boolean"
        },
        "RetentionPeriodYears": {
          "type": "integer",
          "format": "int32"
        },
        "AutoDeleteDate": {
          "type": "string",
          "format": "date-time"
        },
        "DownloadCount": {
          "type": "integer",
          "format": "int32"
        },
        "LastAccessedAt": {
          "type": "string",
          "format": "date-time"
        },
        "LastAccessedBy": {
          "type": "string"
        },
        "Version": {
          "type": "integer",
          "format": "int32"
        },
        "ParentDocumentId": {
          "type": "string"
        },
        "IsCurrentVersion": {
          "type": "boolean"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityDotPhysicals": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "ScheduledDate": {
          "type": "string",
          "format": "date-time"
        },
        "ScheduledBy": {
          "type": "string"
        },
        "ExaminerId": {
          "type": "string"
        },
        "ExaminerName": {
          "type": "string"
        },
        "ExaminerLicenseNumber": {
          "type": "string"
        },
        "ExaminerRegistryNumber": {
          "type": "string"
        },
        "ClinicName": {
          "type": "string"
        },
        "ClinicAddress": {
          "type": "string"
        },
        "ClinicPhone": {
          "type": "string"
        },
        "ExaminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "CertificateNumber": {
          "type": "string"
        },
        "CertificateIssueDate": {
          "type": "string",
          "format": "date-time"
        },
        "CertificateExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "MedicalQualification": {
          "type": "string"
        },
        "Restrictions": {
          "type": "string"
        },
        "Exemptions": {
          "type": "string"
        },
        "RequiresMonitoring": {
          "type": "boolean"
        },
        "MonitoringRequirements": {
          "type": "string"
        },
        "NextRequiredDate": {
          "type": "string",
          "format": "date-time"
        },
        "CertificateUrl": {
          "type": "string"
        },
        "CertificateUploadedAt": {
          "type": "string",
          "format": "date-time"
        },
        "Notes": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityDrugAlcoholTests": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "ProgramId": {
          "type": "string"
        },
        "SelectionId": {
          "type": "string"
        },
        "TestType": {
          "type": "string"
        },
        "TestCategory": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "Result": {
          "type": "string"
        },
        "IsDotTest": {
          "type": "boolean"
        },
        "OrderedDate": {
          "type": "string",
          "format": "date-time"
        },
        "OrderedBy": {
          "type": "string"
        },
        "DueDate": {
          "type": "string",
          "format": "date-time"
        },
        "ExternalOrderId": {
          "type": "string"
        },
        "ExternalFacilityId": {
          "type": "string"
        },
        "FacilityName": {
          "type": "string"
        },
        "FacilityAddress": {
          "type": "string"
        },
        "CollectionDate": {
          "type": "string",
          "format": "date-time"
        },
        "CollectedBy": {
          "type": "string"
        },
        "LabId": {
          "type": "string"
        },
        "LabAccessionNumber": {
          "type": "string"
        },
        "ResultDate": {
          "type": "string",
          "format": "date-time"
        },
        "ResultReceivedDate": {
          "type": "string",
          "format": "date-time"
        },
        "MroReviewRequired": {
          "type": "boolean"
        },
        "MroId": {
          "type": "string"
        },
        "MroReviewDate": {
          "type": "string",
          "format": "date-time"
        },
        "MroNotes": {
          "type": "string"
        },
        "RequiresImmediateRemoval": {
          "type": "boolean"
        },
        "ReturnToDutyRequired": {
          "type": "boolean"
        },
        "FollowUpTestsRequired": {
          "type": "integer",
          "format": "int32"
        },
        "Notes": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityMvrReports": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "OrderedDate": {
          "type": "string",
          "format": "date-time"
        },
        "OrderedBy": {
          "type": "string"
        },
        "LicenseNumber": {
          "type": "string"
        },
        "LicenseState": {
          "type": "string"
        },
        "ExternalOrderId": {
          "type": "string"
        },
        "ProviderName": {
          "type": "string"
        },
        "ReportDate": {
          "type": "string",
          "format": "date-time"
        },
        "ReportReceivedDate": {
          "type": "string",
          "format": "date-time"
        },
        "RawReportData": {
          "type": "string"
        },
        "TotalViolations": {
          "type": "integer",
          "format": "int32"
        },
        "MajorViolations": {
          "type": "integer",
          "format": "int32"
        },
        "MinorViolations": {
          "type": "integer",
          "format": "int32"
        },
        "LicenseStatus": {
          "type": "string"
        },
        "LicenseExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "ReviewedBy": {
          "type": "string"
        },
        "ReviewedDate": {
          "type": "string",
          "format": "date-time"
        },
        "RequiresAction": {
          "type": "boolean"
        },
        "ActionNotes": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityMvrViolations": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "MvrReportId": {
          "type": "string"
        },
        "ViolationDate": {
          "type": "string",
          "format": "date-time"
        },
        "ViolationCode": {
          "type": "string"
        },
        "ViolationDescription": {
          "type": "string"
        },
        "ViolationType": {
          "type": "string"
        },
        "Severity": {
          "type": "string"
        },
        "ConvictionDate": {
          "type": "string",
          "format": "date-time"
        },
        "FineAmount": {
          "type": "string"
        },
        "Points": {
          "type": "integer",
          "format": "int32"
        },
        "State": {
          "type": "string"
        },
        "CourtName": {
          "type": "string"
        },
        "CaseNumber": {
          "type": "string"
        },
        "Disqualifying": {
          "type": "boolean"
        },
        "RequiresEmployerNotification": {
          "type": "boolean"
        },
        "AffectsCdl": {
          "type": "boolean"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityNotifications": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "NotificationType": {
          "type": "string"
        },
        "Priority": {
          "type": "string"
        },
        "SentAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeliveredAt": {
          "type": "string",
          "format": "date-time"
        },
        "ReadAt": {
          "type": "string",
          "format": "date-time"
        },
        "EmailAddress": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "ExternalMessageId": {
          "type": "string"
        },
        "TestId": {
          "type": "string"
        },
        "MvrReportId": {
          "type": "string"
        },
        "PhysicalId": {
          "type": "string"
        },
        "WorkflowId": {
          "type": "string"
        },
        "DeliveryAttempts": {
          "type": "integer",
          "format": "int32"
        },
        "LastAttemptAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeliveryError": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityOrganizationSubscriptions": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "PlanId": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "StartDate": {
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "type": "string",
          "format": "date-time"
        },
        "AutoRenew": {
          "type": "boolean"
        },
        "StripeSubscriptionId": {
          "type": "string"
        },
        "StripeCustomerId": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityOrganizations": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "UsdotNumber": {
          "type": "string"
        },
        "McNumber": {
          "type": "string"
        },
        "Industry": {
          "type": "string"
        },
        "IsDotRegulated": {
          "type": "boolean"
        },
        "AddressLine1": {
          "type": "string"
        },
        "AddressLine2": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "ZipCode": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "Website": {
          "type": "string"
        },
        "TaxId": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean"
        },
        "Settings": {
          "type": "string"
        }
      }
    },
    "pbentityPoolMemberships": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PoolId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "JoinedAt": {
          "type": "string",
          "format": "date-time"
        },
        "LeftAt": {
          "type": "string",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean"
        }
      }
    },
    "pbentityRandomSelectionMembers": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "SelectionId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "TestId": {
          "type": "string"
        },
        "SelectionOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "pbentityRandomSelections": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PoolId": {
          "type": "string"
        },
        "SelectionDate": {
          "type": "string",
          "format": "date-time"
        },
        "SelectionPeriod": {
          "type": "string"
        },
        "TotalPoolSize": {
          "type": "integer",
          "format": "int32"
        },
        "RequiredSelections": {
          "type": "integer",
          "format": "int32"
        },
        "SelectionAlgorithm": {
          "type": "string"
        },
        "SelectionSeed": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "CreatedBy": {
          "type": "string"
        }
      }
    },
    "pbentityRandomTestingPools": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "ProgramId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentitySavedReports": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "CreatedBy": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ReportType": {
          "type": "string"
        },
        "Parameters": {
          "type": "string"
        },
        "Filters": {
          "type": "string"
        },
        "GeneratedAt": {
          "type": "string",
          "format": "date-time"
        },
        "FilePath": {
          "type": "string"
        },
        "FileFormat": {
          "type": "string"
        },
        "IsScheduled": {
          "type": "boolean"
        },
        "ScheduleFrequency": {
          "type": "string"
        },
        "NextRunDate": {
          "type": "string",
          "format": "date-time"
        },
        "IsPublic": {
          "type": "boolean"
        },
        "SharedWith": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentitySubscriptionPlans": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Tier": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "MaxEmployees": {
          "type": "integer",
          "format": "int32"
        },
        "AnnualPrice": {
          "type": "string"
        },
        "Features": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityTemporalWorkflows": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "WorkflowId": {
          "type": "string"
        },
        "WorkflowType": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "InputData": {
          "type": "string"
        },
        "OutputData": {
          "type": "string"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "TestId": {
          "type": "string"
        },
        "SelectionId": {
          "type": "string"
        },
        "StartedAt": {
          "type": "string",
          "format": "date-time"
        },
        "CompletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ScheduledFor": {
          "type": "string",
          "format": "date-time"
        },
        "RetryCount": {
          "type": "integer",
          "format": "int32"
        },
        "MaxRetries": {
          "type": "integer",
          "format": "int32"
        },
        "NextRetryAt": {
          "type": "string",
          "format": "date-time"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityTestingPrograms": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "IsDotProgram": {
          "type": "boolean"
        },
        "DrugPanelType": {
          "type": "string"
        },
        "AlcoholTestingEnabled": {
          "type": "boolean"
        },
        "RandomTestingEnabled": {
          "type": "boolean"
        },
        "RandomTestingRate": {
          "type": "string"
        },
        "TestingFrequency": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pbentityUserProfiles": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OrganizationId": {
          "type": "string"
        },
        "Role": {
          "type": "string"
        },
        "EmployeeId": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "SsnLastFour": {
          "type": "string"
        },
        "HireDate": {
          "type": "string",
          "format": "date-time"
        },
        "TerminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "IsActive": {
          "type": "boolean"
        },
        "IsSystemUser": {
          "type": "boolean"
        },
        "StripeCustomerId": {
          "type": "string"
        },
        "RequiresDotTesting": {
          "type": "boolean"
        },
        "RequiresNonDotTesting": {
          "type": "boolean"
        },
        "CdlNumber": {
          "type": "string"
        },
        "CdlState": {
          "type": "string"
        },
        "CdlExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "JobTitle": {
          "type": "string"
        },
        "Department": {
          "type": "string"
        },
        "SupervisorId": {
          "type": "string"
        },
        "EmergencyContactName": {
          "type": "string"
        },
        "EmergencyContactPhone": {
          "type": "string"
        },
        "EmergencyContactRelationship": {
          "type": "string"
        },
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "LastLoginAt": {
          "type": "string",
          "format": "date-time"
        },
        "Settings": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "servicesAddFindingResponse": {
      "type": "object",
      "properties": {
        "finding": {
          "$ref": "#/definitions/pbentityBackgroundCheckFindings"
        }
      }
    },
    "servicesAddMVRViolationResponse": {
      "type": "object",
      "properties": {
        "violation": {
          "$ref": "#/definitions/pbentityMvrViolations"
        }
      }
    },
    "servicesAddUsersToPoolResponse": {
      "type": "object",
      "properties": {
        "memberships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityPoolMemberships"
          }
        }
      }
    },
    "servicesAdverseActionStatus": {
      "type": "object",
      "properties": {
        "adverseActionId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "title": "\"pre_adverse_sent\", \"waiting_dispute_period\", \"final_adverse_sent\", \"disputed\", \"resolved\""
        },
        "initiatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "disputeDeadline": {
          "type": "string",
          "format": "date-time"
        },
        "disputeReceived": {
          "type": "boolean"
        },
        "disputeReceivedAt": {
          "type": "string",
          "format": "date-time"
        },
        "resolution": {
          "type": "string"
        }
      }
    },
    "servicesApplyRetentionPolicyResponse": {
      "type": "object",
      "properties": {
        "documentsUpdated": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesBackgroundCheckPackage": {
      "type": "object",
      "properties": {
        "packageId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "includedChecks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "estimatedTurnaround": {
          "type": "string",
          "title": "\"1-2 business days\", \"3-5 business days\""
        },
        "provider": {
          "type": "string"
        },
        "fcraCompliant": {
          "type": "boolean"
        }
      }
    },
    "servicesBulkNotificationRecipient": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "templateData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "User-specific template data"
        }
      }
    },
    "servicesCancelScheduledNotificationResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesCancelWorkflowResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesComplianceAlert": {
      "type": "object",
      "properties": {
        "alertId": {
          "type": "string"
        },
        "alertType": {
          "type": "string",
          "description": "\"drug_test_overdue\", \"mvr_expired\", \"physical_expiring\", etc."
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "severity": {
          "type": "string",
          "title": "\"low\", \"medium\", \"high\", \"critical\""
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "daysOverdue": {
          "type": "integer",
          "format": "int32"
        },
        "actionRequired": {
          "type": "string"
        }
      }
    },
    "servicesComplianceAuditEntry": {
      "type": "object",
      "properties": {
        "auditId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "action": {
          "type": "string",
          "title": "\"test_completed\", \"certificate_generated\", \"violation_added\""
        },
        "complianceType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "performedBy": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "servicesComplianceMetrics": {
      "type": "object",
      "properties": {
        "overallCompliancePercentage": {
          "type": "number",
          "format": "float"
        },
        "drugTestingCompliance": {
          "type": "number",
          "format": "float"
        },
        "mvrCompliance": {
          "type": "number",
          "format": "float"
        },
        "dotPhysicalCompliance": {
          "type": "number",
          "format": "float"
        },
        "backgroundCheckCompliance": {
          "type": "number",
          "format": "float"
        },
        "compliantEmployees": {
          "type": "integer",
          "format": "int32"
        },
        "nonCompliantEmployees": {
          "type": "integer",
          "format": "int32"
        },
        "pendingRequirements": {
          "type": "integer",
          "format": "int32"
        },
        "lastCalculated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesComplianceTrend": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "compliancePercentage": {
          "type": "number",
          "format": "float"
        },
        "compliantEmployees": {
          "type": "integer",
          "format": "int32"
        },
        "totalEmployees": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesConductRandomSelectionResponse": {
      "type": "object",
      "properties": {
        "selection": {
          "$ref": "#/definitions/pbentityRandomSelections"
        },
        "selectedMembers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityRandomSelectionMembers"
          }
        },
        "selectedUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "servicesCreateNotificationTemplateResponse": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesCreateOrganizationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "title": "\"internal\", \"client\", \"provider\""
        },
        "usdotNumber": {
          "type": "string"
        },
        "mcNumber": {
          "type": "string"
        },
        "industry": {
          "type": "string"
        },
        "isDotRegulated": {
          "type": "boolean"
        },
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "taxId": {
          "type": "string"
        },
        "settings": {
          "type": "string",
          "title": "JSON string"
        }
      },
      "title": "Organization Management Messages"
    },
    "servicesCreateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/pbentityOrganizations"
        }
      }
    },
    "servicesCreateRandomPoolResponse": {
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "#/definitions/pbentityRandomTestingPools"
        }
      }
    },
    "servicesCreateSubscriptionResponse": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/pbentityOrganizationSubscriptions"
        }
      }
    },
    "servicesCreateTestingProgramResponse": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/pbentityTestingPrograms"
        }
      }
    },
    "servicesCreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/pbentityUserProfiles"
        }
      }
    },
    "servicesDeactivateOrganizationResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesDeactivateUserResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesDeleteDocumentResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesDeleteSavedReportResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesDocumentRetentionInfo": {
      "type": "object",
      "properties": {
        "documentId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "documentType": {
          "type": "string"
        },
        "uploadedAt": {
          "type": "string",
          "format": "date-time"
        },
        "autoDeleteAt": {
          "type": "string",
          "format": "date-time"
        },
        "daysUntilDeletion": {
          "type": "integer",
          "format": "int32"
        },
        "retentionPolicyApplied": {
          "type": "boolean"
        }
      }
    },
    "servicesDocumentTypeStats": {
      "type": "object",
      "properties": {
        "documentType": {
          "type": "string"
        },
        "totalDocuments": {
          "type": "integer",
          "format": "int32"
        },
        "totalSizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "downloads": {
          "type": "integer",
          "format": "int32"
        },
        "shares": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesEnableContinuousMonitoringResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesExpiringCertificate": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "certificateNumber": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "daysUntilExpiration": {
          "type": "integer",
          "format": "int32"
        },
        "qualificationStatus": {
          "type": "string"
        }
      }
    },
    "servicesFailedWorkflow": {
      "type": "object",
      "properties": {
        "workflow": {
          "$ref": "#/definitions/pbentityTemporalWorkflows"
        },
        "errorSummary": {
          "type": "string"
        },
        "canRetry": {
          "type": "boolean"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "lastRetryAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesFindingSummary": {
      "type": "object",
      "properties": {
        "findingType": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "severity": {
          "type": "string"
        }
      }
    },
    "servicesGenerateCertificateResponse": {
      "type": "object",
      "properties": {
        "certificateUrl": {
          "type": "string"
        },
        "certificateNumber": {
          "type": "string"
        },
        "generatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesGenerateComplianceCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/pbentityCertificates"
        },
        "downloadUrl": {
          "type": "string"
        }
      }
    },
    "servicesGenerateComplianceReportResponse": {
      "type": "object",
      "properties": {
        "report": {
          "$ref": "#/definitions/pbentitySavedReports"
        },
        "downloadUrl": {
          "type": "string"
        }
      }
    },
    "servicesGetAdverseActionStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/servicesAdverseActionStatus"
        }
      }
    },
    "servicesGetAvailablePackagesResponse": {
      "type": "object",
      "properties": {
        "packages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesBackgroundCheckPackage"
          }
        }
      }
    },
    "servicesGetBackgroundCheckAnalyticsResponse": {
      "type": "object",
      "properties": {
        "totalChecks": {
          "type": "integer",
          "format": "int32"
        },
        "completedChecks": {
          "type": "integer",
          "format": "int32"
        },
        "pendingChecks": {
          "type": "integer",
          "format": "int32"
        },
        "clearResults": {
          "type": "integer",
          "format": "int32"
        },
        "considerResults": {
          "type": "integer",
          "format": "int32"
        },
        "engagedResults": {
          "type": "integer",
          "format": "int32"
        },
        "findingsSummary": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesFindingSummary"
          }
        },
        "adverseActionsInitiated": {
          "type": "integer",
          "format": "int32"
        },
        "averageCompletionTimeHours": {
          "type": "number",
          "format": "float"
        },
        "totalCost": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "servicesGetBackgroundCheckResponse": {
      "type": "object",
      "properties": {
        "backgroundCheck": {
          "$ref": "#/definitions/pbentityBackgroundChecks"
        },
        "findings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityBackgroundCheckFindings"
          }
        }
      }
    },
    "servicesGetCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/pbentityCertificates"
        },
        "downloadUrl": {
          "type": "string"
        }
      }
    },
    "servicesGetComplianceAlertsResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesComplianceAlert"
          }
        },
        "totalAlerts": {
          "type": "integer",
          "format": "int32"
        },
        "criticalAlerts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesGetComplianceAnalyticsResponse": {
      "type": "object",
      "properties": {
        "currentMetrics": {
          "$ref": "#/definitions/servicesComplianceMetrics"
        },
        "trends": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesComplianceTrend"
          }
        },
        "totalViolations": {
          "type": "integer",
          "format": "int32"
        },
        "resolvedViolations": {
          "type": "integer",
          "format": "int32"
        },
        "totalComplianceCost": {
          "type": "number",
          "format": "float"
        },
        "averageCostPerEmployee": {
          "type": "number",
          "format": "float"
        },
        "complianceByType": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "compliance type -\u003e employee count"
        }
      }
    },
    "servicesGetComplianceAuditTrailResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesComplianceAuditEntry"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesGetComplianceStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/pbentityComplianceStatus"
        },
        "metrics": {
          "$ref": "#/definitions/servicesComplianceMetrics"
        }
      }
    },
    "servicesGetDOTPhysicalResponse": {
      "type": "object",
      "properties": {
        "physical": {
          "$ref": "#/definitions/pbentityDotPhysicals"
        }
      }
    },
    "servicesGetDocumentAnalyticsResponse": {
      "type": "object",
      "properties": {
        "totalDocuments": {
          "type": "integer",
          "format": "int32"
        },
        "totalStorageBytes": {
          "type": "string",
          "format": "int64"
        },
        "documentsUploaded": {
          "type": "integer",
          "format": "int32",
          "title": "In the specified period"
        },
        "documentsDownloaded": {
          "type": "integer",
          "format": "int32",
          "title": "In the specified period"
        },
        "documentsShared": {
          "type": "integer",
          "format": "int32",
          "title": "In the specified period"
        },
        "typeStats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesDocumentTypeStats"
          }
        },
        "hipaaProtectedDocuments": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesGetDocumentResponse": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/pbentityDocuments"
        },
        "fileData": {
          "type": "string",
          "format": "byte",
          "title": "Only included if include_content is true"
        },
        "downloadUrl": {
          "type": "string",
          "title": "Signed URL for download"
        }
      }
    },
    "servicesGetDocumentRetentionStatusResponse": {
      "type": "object",
      "properties": {
        "retentionInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesDocumentRetentionInfo"
          }
        },
        "documentsScheduledForDeletion": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesGetDocumentVersionsResponse": {
      "type": "object",
      "properties": {
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityDocuments"
          }
        }
      }
    },
    "servicesGetDrugTestResponse": {
      "type": "object",
      "properties": {
        "test": {
          "$ref": "#/definitions/pbentityDrugAlcoholTests"
        }
      }
    },
    "servicesGetExpiringCertificatesResponse": {
      "type": "object",
      "properties": {
        "expiringCertificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesExpiringCertificate"
          }
        }
      }
    },
    "servicesGetFailedWorkflowsResponse": {
      "type": "object",
      "properties": {
        "failedWorkflows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesFailedWorkflow"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesGetMVRAnalyticsResponse": {
      "type": "object",
      "properties": {
        "totalReports": {
          "type": "integer",
          "format": "int32"
        },
        "activeViolations": {
          "type": "integer",
          "format": "int32"
        },
        "driversWithViolations": {
          "type": "integer",
          "format": "int32"
        },
        "violationSummary": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesViolationSummary"
          }
        },
        "cdlDisqualifications": {
          "type": "integer",
          "format": "int32"
        },
        "averageViolationsPerDriver": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "servicesGetMVRReportResponse": {
      "type": "object",
      "properties": {
        "report": {
          "$ref": "#/definitions/pbentityMvrReports"
        },
        "violations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityMvrViolations"
          }
        }
      }
    },
    "servicesGetMedicalExaminerResponse": {
      "type": "object",
      "properties": {
        "examiner": {
          "$ref": "#/definitions/servicesMedicalExaminerInfo"
        }
      }
    },
    "servicesGetMonitoringStatusResponse": {
      "type": "object",
      "properties": {
        "isMonitoringEnabled": {
          "type": "boolean"
        },
        "monitoringFrequency": {
          "type": "string"
        },
        "lastCheckDate": {
          "type": "string",
          "format": "date-time"
        },
        "nextCheckDate": {
          "type": "string",
          "format": "date-time"
        },
        "totalViolations": {
          "type": "integer",
          "format": "int32"
        },
        "activeViolations": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesGetNotificationAnalyticsResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "$ref": "#/definitions/servicesNotificationMetrics"
        }
      }
    },
    "servicesGetNotificationPreferencesResponse": {
      "type": "object",
      "properties": {
        "preferences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesNotificationPreference"
          }
        }
      }
    },
    "servicesGetNotificationResponse": {
      "type": "object",
      "properties": {
        "notification": {
          "$ref": "#/definitions/pbentityNotifications"
        }
      }
    },
    "servicesGetNotificationTemplateResponse": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/servicesNotificationTemplate"
        }
      }
    },
    "servicesGetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/pbentityOrganizations"
        }
      }
    },
    "servicesGetProviderStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/servicesProviderStatus"
        }
      }
    },
    "servicesGetRandomPoolResponse": {
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "#/definitions/pbentityRandomTestingPools"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityPoolMemberships"
          }
        }
      }
    },
    "servicesGetRandomSelectionResponse": {
      "type": "object",
      "properties": {
        "selection": {
          "$ref": "#/definitions/pbentityRandomSelections"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityRandomSelectionMembers"
          }
        }
      }
    },
    "servicesGetRunningWorkflowsResponse": {
      "type": "object",
      "properties": {
        "runningWorkflows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesRunningWorkflow"
          }
        }
      }
    },
    "servicesGetSavedReportResponse": {
      "type": "object",
      "properties": {
        "report": {
          "$ref": "#/definitions/pbentitySavedReports"
        },
        "downloadUrl": {
          "type": "string"
        }
      }
    },
    "servicesGetSharedDocumentsResponse": {
      "type": "object",
      "properties": {
        "sharedDocuments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesSharedDocument"
          }
        }
      }
    },
    "servicesGetSubscriptionResponse": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/pbentityOrganizationSubscriptions"
        },
        "plan": {
          "$ref": "#/definitions/pbentitySubscriptionPlans"
        }
      }
    },
    "servicesGetTestingProgramResponse": {
      "type": "object",
      "properties": {
        "program": {
          "$ref": "#/definitions/pbentityTestingPrograms"
        }
      }
    },
    "servicesGetWorkflowAnalyticsResponse": {
      "type": "object",
      "properties": {
        "totalWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "completedWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "failedWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "runningWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "overallSuccessRate": {
          "type": "number",
          "format": "float"
        },
        "averageDurationMinutes": {
          "type": "number",
          "format": "float"
        },
        "typeStats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesWorkflowTypeStats"
          }
        }
      }
    },
    "servicesGetWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflow": {
          "$ref": "#/definitions/pbentityTemporalWorkflows"
        }
      }
    },
    "servicesHandleDisputeResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "requiresReInvestigation": {
          "type": "boolean"
        }
      }
    },
    "servicesInitiateAdverseActionResponse": {
      "type": "object",
      "properties": {
        "adverseActionId": {
          "type": "string"
        },
        "noticeSentTo": {
          "type": "string"
        },
        "noticeSentAt": {
          "type": "string",
          "format": "date-time"
        },
        "disputeDeadline": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesListBackgroundChecksResponse": {
      "type": "object",
      "properties": {
        "backgroundChecks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityBackgroundChecks"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListCertificatesResponse": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityCertificates"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListComplianceStatusResponse": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityComplianceStatus"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "organizationMetrics": {
          "$ref": "#/definitions/servicesComplianceMetrics"
        }
      }
    },
    "servicesListDOTPhysicalsResponse": {
      "type": "object",
      "properties": {
        "physicals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityDotPhysicals"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListDocumentsResponse": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityDocuments"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListDrugTestsResponse": {
      "type": "object",
      "properties": {
        "tests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityDrugAlcoholTests"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListFindingsResponse": {
      "type": "object",
      "properties": {
        "findings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityBackgroundCheckFindings"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListMVRReportsResponse": {
      "type": "object",
      "properties": {
        "reports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityMvrReports"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListMVRViolationsResponse": {
      "type": "object",
      "properties": {
        "violations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityMvrViolations"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListMedicalExaminersResponse": {
      "type": "object",
      "properties": {
        "examiners": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesMedicalExaminerInfo"
          }
        }
      }
    },
    "servicesListNotificationTemplatesResponse": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesNotificationTemplate"
          }
        }
      }
    },
    "servicesListNotificationsResponse": {
      "type": "object",
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityNotifications"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "unreadCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListOrganizationsResponse": {
      "type": "object",
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityOrganizations"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListRandomPoolsResponse": {
      "type": "object",
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityRandomTestingPools"
          }
        }
      }
    },
    "servicesListRandomSelectionsResponse": {
      "type": "object",
      "properties": {
        "selections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityRandomSelections"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListSavedReportsResponse": {
      "type": "object",
      "properties": {
        "reports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentitySavedReports"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListScheduledNotificationsResponse": {
      "type": "object",
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/servicesScheduledNotification"
          }
        }
      }
    },
    "servicesListSubscriptionPlansResponse": {
      "type": "object",
      "properties": {
        "plans": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentitySubscriptionPlans"
          }
        }
      }
    },
    "servicesListTestingProgramsResponse": {
      "type": "object",
      "properties": {
        "programs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityTestingPrograms"
          }
        }
      }
    },
    "servicesListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityUserProfiles"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesListWorkflowsResponse": {
      "type": "object",
      "properties": {
        "workflows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityTemporalWorkflows"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesMarkAllNotificationsReadResponse": {
      "type": "object",
      "properties": {
        "markedCount": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesMarkNotificationReadResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesMedicalExaminerInfo": {
      "type": "object",
      "properties": {
        "examinerId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "licenseNumber": {
          "type": "string"
        },
        "licenseState": {
          "type": "string"
        },
        "licenseExpiration": {
          "type": "string",
          "format": "date-time"
        },
        "certificationNumber": {
          "type": "string"
        },
        "certificationExpiration": {
          "type": "string",
          "format": "date-time"
        },
        "practiceName": {
          "type": "string"
        },
        "fullAddress": {
          "type": "string"
        },
        "acceptsNewPatients": {
          "type": "boolean"
        },
        "specializations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isActive": {
          "type": "boolean"
        },
        "rating": {
          "type": "number",
          "format": "float"
        },
        "examinationsCompleted": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesNotificationMetrics": {
      "type": "object",
      "properties": {
        "totalSent": {
          "type": "integer",
          "format": "int32"
        },
        "totalDelivered": {
          "type": "integer",
          "format": "int32"
        },
        "totalFailed": {
          "type": "integer",
          "format": "int32"
        },
        "totalRead": {
          "type": "integer",
          "format": "int32"
        },
        "deliveryRate": {
          "type": "number",
          "format": "float"
        },
        "readRate": {
          "type": "number",
          "format": "float"
        },
        "byChannel": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "channel -\u003e count"
        },
        "byType": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "type -\u003e count"
        }
      }
    },
    "servicesNotificationPreference": {
      "type": "object",
      "properties": {
        "notificationType": {
          "type": "string"
        },
        "emailEnabled": {
          "type": "boolean"
        },
        "smsEnabled": {
          "type": "boolean"
        },
        "inAppEnabled": {
          "type": "boolean"
        },
        "phoneEnabled": {
          "type": "boolean"
        },
        "frequency": {
          "type": "string",
          "title": "\"immediate\", \"daily_digest\", \"weekly_digest\""
        }
      }
    },
    "servicesNotificationTemplate": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "templateName": {
          "type": "string"
        },
        "notificationType": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "subjectTemplate": {
          "type": "string"
        },
        "bodyTemplate": {
          "type": "string"
        },
        "requiredVariables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isSystemTemplate": {
          "type": "boolean"
        },
        "isActive": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesOrderBackgroundCheckResponse": {
      "type": "object",
      "properties": {
        "backgroundCheck": {
          "$ref": "#/definitions/pbentityBackgroundChecks"
        },
        "externalOrderId": {
          "type": "string"
        },
        "confirmationCode": {
          "type": "string"
        },
        "estimatedCompletion": {
          "type": "string",
          "format": "date-time"
        },
        "estimatedCost": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "servicesOrderDrugTestResponse": {
      "type": "object",
      "properties": {
        "test": {
          "$ref": "#/definitions/pbentityDrugAlcoholTests"
        },
        "externalOrderId": {
          "type": "string"
        },
        "facilityName": {
          "type": "string"
        },
        "facilityAddress": {
          "type": "string"
        },
        "confirmationCode": {
          "type": "string"
        }
      }
    },
    "servicesOrderMVRResponse": {
      "type": "object",
      "properties": {
        "report": {
          "$ref": "#/definitions/pbentityMvrReports"
        },
        "externalOrderId": {
          "type": "string"
        },
        "confirmationCode": {
          "type": "string"
        },
        "estimatedCompletion": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesOrganizationServiceUpdateUserBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "ssnLastFour": {
          "type": "string"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "isActive": {
          "type": "boolean"
        },
        "requiresDotTesting": {
          "type": "boolean"
        },
        "requiresNonDotTesting": {
          "type": "boolean"
        },
        "cdlNumber": {
          "type": "string"
        },
        "cdlState": {
          "type": "string"
        },
        "cdlExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "jobTitle": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "supervisorId": {
          "type": "string"
        },
        "emergencyContactName": {
          "type": "string"
        },
        "emergencyContactPhone": {
          "type": "string"
        },
        "emergencyContactRelationship": {
          "type": "string"
        }
      }
    },
    "servicesProviderStatus": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "isAvailable": {
          "type": "boolean"
        },
        "statusMessage": {
          "type": "string"
        },
        "lastSuccessfulRequest": {
          "type": "string",
          "format": "date-time"
        },
        "currentQueueTimeMinutes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "servicesRegisterMedicalExaminerRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "licenseNumber": {
          "type": "string"
        },
        "licenseState": {
          "type": "string"
        },
        "licenseExpiration": {
          "type": "string",
          "format": "date-time"
        },
        "certificationNumber": {
          "type": "string"
        },
        "certificationExpiration": {
          "type": "string",
          "format": "date-time"
        },
        "practiceName": {
          "type": "string"
        },
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "acceptsNewPatients": {
          "type": "boolean"
        },
        "specializations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Medical Examiner Management"
    },
    "servicesRegisterMedicalExaminerResponse": {
      "type": "object",
      "properties": {
        "examinerId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesRemoveUsersFromPoolResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesRetryWorkflowResponse": {
      "type": "object",
      "properties": {
        "newWorkflow": {
          "$ref": "#/definitions/pbentityTemporalWorkflows"
        },
        "newWorkflowExecutionId": {
          "type": "string"
        }
      }
    },
    "servicesRevokeCertificateResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesRevokeDocumentShareResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesRunningWorkflow": {
      "type": "object",
      "properties": {
        "workflow": {
          "$ref": "#/definitions/pbentityTemporalWorkflows"
        },
        "runningDurationMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "currentActivity": {
          "type": "string"
        },
        "estimatedCompletion": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesScheduleDOTPhysicalResponse": {
      "type": "object",
      "properties": {
        "physical": {
          "$ref": "#/definitions/pbentityDotPhysicals"
        },
        "appointmentConfirmation": {
          "type": "string"
        },
        "examinerName": {
          "type": "string"
        },
        "facilityName": {
          "type": "string"
        },
        "facilityAddress": {
          "type": "string"
        }
      }
    },
    "servicesScheduleNotificationRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "Optional: specific user"
        },
        "notificationType": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "sendAt": {
          "type": "string",
          "format": "date-time"
        },
        "recurrencePattern": {
          "type": "string",
          "title": "Optional: \"daily\", \"weekly\", \"monthly\""
        },
        "recurrenceEnd": {
          "type": "string",
          "format": "date-time",
          "title": "When to stop recurring"
        }
      },
      "title": "Scheduled Notifications"
    },
    "servicesScheduleNotificationResponse": {
      "type": "object",
      "properties": {
        "scheduledNotificationId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesScheduledNotification": {
      "type": "object",
      "properties": {
        "scheduledNotificationId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "notificationType": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "sendAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "title": "\"pending\", \"sent\", \"failed\", \"cancelled\""
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "servicesSearchDocumentsResponse": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pbentityDocuments"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "searchHighlights": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "document_id -\u003e highlighted text"
        }
      }
    },
    "servicesSendBulkNotificationResponse": {
      "type": "object",
      "properties": {
        "notificationsSent": {
          "type": "integer",
          "format": "int32"
        },
        "notificationsFailed": {
          "type": "integer",
          "format": "int32"
        },
        "failedUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesSendNotificationRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "Optional: specific user, otherwise org-wide"
        },
        "notificationType": {
          "type": "string",
          "description": "\"test_reminder\", \"certificate_expiring\", \"violation_alert\", etc."
        },
        "channel": {
          "type": "string",
          "title": "\"email\", \"sms\", \"in_app\", \"phone\""
        },
        "priority": {
          "type": "string",
          "title": "\"low\", \"medium\", \"high\", \"urgent\""
        },
        "subject": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "templateData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Data for template rendering"
        },
        "templateId": {
          "type": "string",
          "title": "Optional: use predefined template"
        },
        "scheduledFor": {
          "type": "string",
          "format": "date-time",
          "title": "Optional: schedule for future delivery"
        },
        "additionalRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Extra email addresses"
        }
      },
      "title": "Notification Management Messages"
    },
    "servicesSendNotificationResponse": {
      "type": "object",
      "properties": {
        "notification": {
          "$ref": "#/definitions/pbentityNotifications"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesSetExpirationReminderResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesShareDocumentResponse": {
      "type": "object",
      "properties": {
        "shareId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "servicesSharedDocument": {
      "type": "object",
      "properties": {
        "shareId": {
          "type": "string"
        },
        "document": {
          "$ref": "#/definitions/pbentityDocuments"
        },
        "sharedBy": {
          "type": "string"
        },
        "sharedWith": {
          "type": "string"
        },
        "permissionLevel": {
          "type": "string"
        },
        "sharedAt": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "servicesStartBackgroundCheckWorkflowRequest": {
      "type": "object",
      "properties": {
        "backgroundCheckId": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "title": "\"sterling\", \"hireright\", \"checkr\""
        },
        "checkTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Types of checks to perform"
        },
        "providerConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Background Check Workflow"
    },
    "servicesStartBackgroundCheckWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "workflowExecutionId": {
          "type": "string"
        },
        "externalOrderId": {
          "type": "string"
        }
      }
    },
    "servicesStartDrugTestOrderWorkflowRequest": {
      "type": "object",
      "properties": {
        "drugTestId": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "description": "\"quest\", \"labcorp\", etc."
        },
        "facilityPreference": {
          "type": "string"
        },
        "rushOrder": {
          "type": "boolean"
        },
        "providerConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Drug Test Ordering Workflow"
    },
    "servicesStartDrugTestOrderWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "workflowExecutionId": {
          "type": "string"
        },
        "externalOrderId": {
          "type": "string"
        }
      }
    },
    "servicesStartMVRMonitoringWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "workflowExecutionId": {
          "type": "string"
        }
      }
    },
    "servicesStartNotificationWorkflowRequest": {
      "type": "object",
      "properties": {
        "notificationId": {
          "type": "string"
        },
        "channel": {
          "type": "string",
          "title": "\"email\", \"sms\", \"phone\""
        },
        "maxRetries": {
          "type": "integer",
          "format": "int32"
        },
        "retryDelayMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "sendAt": {
          "type": "string",
          "format": "date-time",
          "title": "When to send"
        }
      },
      "title": "Notification Workflow"
    },
    "servicesStartNotificationWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "workflowExecutionId": {
          "type": "string"
        }
      }
    },
    "servicesStartRandomSelectionWorkflowRequest": {
      "type": "object",
      "properties": {
        "poolId": {
          "type": "string"
        },
        "selectionPeriod": {
          "type": "string",
          "title": "\"Q1 2025\", \"January 2025\""
        },
        "targetCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of people to select"
        },
        "algorithm": {
          "type": "string",
          "title": "\"weighted\", \"simple_random\", \"stratified\""
        },
        "executeAt": {
          "type": "string",
          "format": "date-time",
          "title": "When to execute the selection"
        }
      },
      "title": "Random Selection Workflow"
    },
    "servicesStartRandomSelectionWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflowId": {
          "type": "string"
        },
        "workflowExecutionId": {
          "type": "string"
        }
      }
    },
    "servicesStartWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflow": {
          "$ref": "#/definitions/pbentityTemporalWorkflows"
        },
        "workflowExecutionId": {
          "type": "string"
        }
      }
    },
    "servicesSyncProviderDataRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "title": "\"mvr_com\", \"hireright\", \"sterling\""
        },
        "lastSync": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Provider Integration Messages"
    },
    "servicesSyncProviderDataResponse": {
      "type": "object",
      "properties": {
        "reportsSynced": {
          "type": "integer",
          "format": "int32"
        },
        "violationsAdded": {
          "type": "integer",
          "format": "int32"
        },
        "syncCompletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "servicesUpdateBackgroundCheckResponse": {
      "type": "object",
      "properties": {
        "backgroundCheck": {
          "$ref": "#/definitions/pbentityBackgroundChecks"
        }
      }
    },
    "servicesUpdateComplianceStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/pbentityComplianceStatus"
        },
        "updatedMetrics": {
          "$ref": "#/definitions/servicesComplianceMetrics"
        }
      }
    },
    "servicesUpdateDOTPhysicalResponse": {
      "type": "object",
      "properties": {
        "physical": {
          "$ref": "#/definitions/pbentityDotPhysicals"
        }
      }
    },
    "servicesUpdateDocumentResponse": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/pbentityDocuments"
        }
      }
    },
    "servicesUpdateDrugTestResponse": {
      "type": "object",
      "properties": {
        "test": {
          "$ref": "#/definitions/pbentityDrugAlcoholTests"
        }
      }
    },
    "servicesUpdateFindingResponse": {
      "type": "object",
      "properties": {
        "finding": {
          "$ref": "#/definitions/pbentityBackgroundCheckFindings"
        }
      }
    },
    "servicesUpdateMVRReportResponse": {
      "type": "object",
      "properties": {
        "report": {
          "$ref": "#/definitions/pbentityMvrReports"
        }
      }
    },
    "servicesUpdateMVRViolationResponse": {
      "type": "object",
      "properties": {
        "violation": {
          "$ref": "#/definitions/pbentityMvrViolations"
        }
      }
    },
    "servicesUpdateNotificationPreferencesResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesUpdateNotificationTemplateResponse": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/servicesNotificationTemplate"
        }
      }
    },
    "servicesUpdateOrganizationResponse": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/pbentityOrganizations"
        }
      }
    },
    "servicesUpdateSubscriptionResponse": {
      "type": "object",
      "properties": {
        "subscription": {
          "$ref": "#/definitions/pbentityOrganizationSubscriptions"
        }
      }
    },
    "servicesUpdateWorkflowResponse": {
      "type": "object",
      "properties": {
        "workflow": {
          "$ref": "#/definitions/pbentityTemporalWorkflows"
        }
      }
    },
    "servicesUploadDocumentResponse": {
      "type": "object",
      "properties": {
        "document": {
          "$ref": "#/definitions/pbentityDocuments"
        },
        "uploadUrl": {
          "type": "string",
          "title": "If using signed URLs for upload"
        }
      }
    },
    "servicesValidateCertificateRequest": {
      "type": "object",
      "properties": {
        "certificateNumber": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "Optional: validate for specific user"
        }
      }
    },
    "servicesValidateCertificateResponse": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "title": "\"valid\", \"expired\", \"revoked\", \"not_found\""
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "holderName": {
          "type": "string"
        },
        "restrictions": {
          "type": "string"
        },
        "issuingExaminer": {
          "type": "string"
        }
      }
    },
    "servicesValidateRandomSelectionResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "servicesViolationSummary": {
      "type": "object",
      "properties": {
        "violationType": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "severity": {
          "type": "string"
        }
      }
    },
    "servicesWorkflowTypeStats": {
      "type": "object",
      "properties": {
        "workflowType": {
          "type": "string"
        },
        "totalWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "completedWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "failedWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "runningWorkflows": {
          "type": "integer",
          "format": "int32"
        },
        "averageDurationMinutes": {
          "type": "number",
          "format": "float"
        },
        "successRate": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "v1consortiumauthGetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/authUserSession"
        }
      }
    },
    "v1consortiumauthUpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/authUserSession"
        }
      }
    },
    "v1consortiumservicesGetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/pbentityUserProfiles"
        }
      }
    },
    "v1consortiumservicesUpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/pbentityUserProfiles"
        }
      }
    }
  }
}
