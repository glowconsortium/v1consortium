// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/auth/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "v1consortium.auth.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/v1consortium.auth.AuthService/Login"
	// AuthServiceRegisterUserProcedure is the fully-qualified name of the AuthService's RegisterUser
	// RPC.
	AuthServiceRegisterUserProcedure = "/v1consortium.auth.AuthService/RegisterUser"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/v1consortium.auth.AuthService/RefreshToken"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/v1consortium.auth.AuthService/Logout"
	// AuthServiceForgotPasswordProcedure is the fully-qualified name of the AuthService's
	// ForgotPassword RPC.
	AuthServiceForgotPasswordProcedure = "/v1consortium.auth.AuthService/ForgotPassword"
	// AuthServiceResetPasswordProcedure is the fully-qualified name of the AuthService's ResetPassword
	// RPC.
	AuthServiceResetPasswordProcedure = "/v1consortium.auth.AuthService/ResetPassword"
	// AuthServiceChangePasswordProcedure is the fully-qualified name of the AuthService's
	// ChangePassword RPC.
	AuthServiceChangePasswordProcedure = "/v1consortium.auth.AuthService/ChangePassword"
	// AuthServiceVerifyEmailProcedure is the fully-qualified name of the AuthService's VerifyEmail RPC.
	AuthServiceVerifyEmailProcedure = "/v1consortium.auth.AuthService/VerifyEmail"
	// AuthServiceEnableMFAProcedure is the fully-qualified name of the AuthService's EnableMFA RPC.
	AuthServiceEnableMFAProcedure = "/v1consortium.auth.AuthService/EnableMFA"
	// AuthServiceVerifyMFAProcedure is the fully-qualified name of the AuthService's VerifyMFA RPC.
	AuthServiceVerifyMFAProcedure = "/v1consortium.auth.AuthService/VerifyMFA"
	// AuthServiceDisableMFAProcedure is the fully-qualified name of the AuthService's DisableMFA RPC.
	AuthServiceDisableMFAProcedure = "/v1consortium.auth.AuthService/DisableMFA"
	// AuthServiceGetUserProcedure is the fully-qualified name of the AuthService's GetUser RPC.
	AuthServiceGetUserProcedure = "/v1consortium.auth.AuthService/GetUser"
	// AuthServiceUpdateUserProcedure is the fully-qualified name of the AuthService's UpdateUser RPC.
	AuthServiceUpdateUserProcedure = "/v1consortium.auth.AuthService/UpdateUser"
	// AuthServiceCheckPermissionProcedure is the fully-qualified name of the AuthService's
	// CheckPermission RPC.
	AuthServiceCheckPermissionProcedure = "/v1consortium.auth.AuthService/CheckPermission"
	// AuthServiceGetUserPermissionsProcedure is the fully-qualified name of the AuthService's
	// GetUserPermissions RPC.
	AuthServiceGetUserPermissionsProcedure = "/v1consortium.auth.AuthService/GetUserPermissions"
)

// AuthServiceClient is a client for the v1consortium.auth.AuthService service.
type AuthServiceClient interface {
	// Authentication Operations
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RegisterUser(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	// Password Management
	ForgotPassword(context.Context, *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error)
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// Email Verification
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	// Multi-Factor Authentication
	EnableMFA(context.Context, *connect.Request[v1.EnableMFARequest]) (*connect.Response[v1.EnableMFAResponse], error)
	VerifyMFA(context.Context, *connect.Request[v1.VerifyMFARequest]) (*connect.Response[v1.VerifyMFAResponse], error)
	DisableMFA(context.Context, *connect.Request[v1.DisableMFARequest]) (*connect.Response[v1.DisableMFAResponse], error)
	// User Management
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Authorization
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
	GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error)
}

// NewAuthServiceClient constructs a client for the v1consortium.auth.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		registerUser: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+AuthServiceRegisterUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("RegisterUser")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		forgotPassword: connect.NewClient[v1.ForgotPasswordRequest, v1.ForgotPasswordResponse](
			httpClient,
			baseURL+AuthServiceForgotPasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("ForgotPassword")),
			connect.WithClientOptions(opts...),
		),
		resetPassword: connect.NewClient[v1.ResetPasswordRequest, v1.ResetPasswordResponse](
			httpClient,
			baseURL+AuthServiceResetPasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("ResetPassword")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+AuthServiceChangePasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		verifyEmail: connect.NewClient[v1.VerifyEmailRequest, v1.VerifyEmailResponse](
			httpClient,
			baseURL+AuthServiceVerifyEmailProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyEmail")),
			connect.WithClientOptions(opts...),
		),
		enableMFA: connect.NewClient[v1.EnableMFARequest, v1.EnableMFAResponse](
			httpClient,
			baseURL+AuthServiceEnableMFAProcedure,
			connect.WithSchema(authServiceMethods.ByName("EnableMFA")),
			connect.WithClientOptions(opts...),
		),
		verifyMFA: connect.NewClient[v1.VerifyMFARequest, v1.VerifyMFAResponse](
			httpClient,
			baseURL+AuthServiceVerifyMFAProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyMFA")),
			connect.WithClientOptions(opts...),
		),
		disableMFA: connect.NewClient[v1.DisableMFARequest, v1.DisableMFAResponse](
			httpClient,
			baseURL+AuthServiceDisableMFAProcedure,
			connect.WithSchema(authServiceMethods.ByName("DisableMFA")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+AuthServiceGetUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+AuthServiceUpdateUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		checkPermission: connect.NewClient[v1.CheckPermissionRequest, v1.CheckPermissionResponse](
			httpClient,
			baseURL+AuthServiceCheckPermissionProcedure,
			connect.WithSchema(authServiceMethods.ByName("CheckPermission")),
			connect.WithClientOptions(opts...),
		),
		getUserPermissions: connect.NewClient[v1.GetUserPermissionsRequest, v1.GetUserPermissionsResponse](
			httpClient,
			baseURL+AuthServiceGetUserPermissionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetUserPermissions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login              *connect.Client[v1.LoginRequest, v1.LoginResponse]
	registerUser       *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	refreshToken       *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	logout             *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	forgotPassword     *connect.Client[v1.ForgotPasswordRequest, v1.ForgotPasswordResponse]
	resetPassword      *connect.Client[v1.ResetPasswordRequest, v1.ResetPasswordResponse]
	changePassword     *connect.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	verifyEmail        *connect.Client[v1.VerifyEmailRequest, v1.VerifyEmailResponse]
	enableMFA          *connect.Client[v1.EnableMFARequest, v1.EnableMFAResponse]
	verifyMFA          *connect.Client[v1.VerifyMFARequest, v1.VerifyMFAResponse]
	disableMFA         *connect.Client[v1.DisableMFARequest, v1.DisableMFAResponse]
	getUser            *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateUser         *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	checkPermission    *connect.Client[v1.CheckPermissionRequest, v1.CheckPermissionResponse]
	getUserPermissions *connect.Client[v1.GetUserPermissionsRequest, v1.GetUserPermissionsResponse]
}

// Login calls v1consortium.auth.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RegisterUser calls v1consortium.auth.AuthService.RegisterUser.
func (c *authServiceClient) RegisterUser(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// RefreshToken calls v1consortium.auth.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Logout calls v1consortium.auth.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// ForgotPassword calls v1consortium.auth.AuthService.ForgotPassword.
func (c *authServiceClient) ForgotPassword(ctx context.Context, req *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error) {
	return c.forgotPassword.CallUnary(ctx, req)
}

// ResetPassword calls v1consortium.auth.AuthService.ResetPassword.
func (c *authServiceClient) ResetPassword(ctx context.Context, req *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// ChangePassword calls v1consortium.auth.AuthService.ChangePassword.
func (c *authServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// VerifyEmail calls v1consortium.auth.AuthService.VerifyEmail.
func (c *authServiceClient) VerifyEmail(ctx context.Context, req *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// EnableMFA calls v1consortium.auth.AuthService.EnableMFA.
func (c *authServiceClient) EnableMFA(ctx context.Context, req *connect.Request[v1.EnableMFARequest]) (*connect.Response[v1.EnableMFAResponse], error) {
	return c.enableMFA.CallUnary(ctx, req)
}

// VerifyMFA calls v1consortium.auth.AuthService.VerifyMFA.
func (c *authServiceClient) VerifyMFA(ctx context.Context, req *connect.Request[v1.VerifyMFARequest]) (*connect.Response[v1.VerifyMFAResponse], error) {
	return c.verifyMFA.CallUnary(ctx, req)
}

// DisableMFA calls v1consortium.auth.AuthService.DisableMFA.
func (c *authServiceClient) DisableMFA(ctx context.Context, req *connect.Request[v1.DisableMFARequest]) (*connect.Response[v1.DisableMFAResponse], error) {
	return c.disableMFA.CallUnary(ctx, req)
}

// GetUser calls v1consortium.auth.AuthService.GetUser.
func (c *authServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls v1consortium.auth.AuthService.UpdateUser.
func (c *authServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// CheckPermission calls v1consortium.auth.AuthService.CheckPermission.
func (c *authServiceClient) CheckPermission(ctx context.Context, req *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return c.checkPermission.CallUnary(ctx, req)
}

// GetUserPermissions calls v1consortium.auth.AuthService.GetUserPermissions.
func (c *authServiceClient) GetUserPermissions(ctx context.Context, req *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error) {
	return c.getUserPermissions.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the v1consortium.auth.AuthService service.
type AuthServiceHandler interface {
	// Authentication Operations
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RegisterUser(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	// Password Management
	ForgotPassword(context.Context, *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error)
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// Email Verification
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	// Multi-Factor Authentication
	EnableMFA(context.Context, *connect.Request[v1.EnableMFARequest]) (*connect.Response[v1.EnableMFAResponse], error)
	VerifyMFA(context.Context, *connect.Request[v1.VerifyMFARequest]) (*connect.Response[v1.VerifyMFAResponse], error)
	DisableMFA(context.Context, *connect.Request[v1.DisableMFARequest]) (*connect.Response[v1.DisableMFAResponse], error)
	// User Management
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Authorization
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
	GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRegisterUserHandler := connect.NewUnaryHandler(
		AuthServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(authServiceMethods.ByName("RegisterUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceForgotPasswordHandler := connect.NewUnaryHandler(
		AuthServiceForgotPasswordProcedure,
		svc.ForgotPassword,
		connect.WithSchema(authServiceMethods.ByName("ForgotPassword")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceResetPasswordHandler := connect.NewUnaryHandler(
		AuthServiceResetPasswordProcedure,
		svc.ResetPassword,
		connect.WithSchema(authServiceMethods.ByName("ResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceChangePasswordHandler := connect.NewUnaryHandler(
		AuthServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(authServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyEmailHandler := connect.NewUnaryHandler(
		AuthServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		connect.WithSchema(authServiceMethods.ByName("VerifyEmail")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceEnableMFAHandler := connect.NewUnaryHandler(
		AuthServiceEnableMFAProcedure,
		svc.EnableMFA,
		connect.WithSchema(authServiceMethods.ByName("EnableMFA")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyMFAHandler := connect.NewUnaryHandler(
		AuthServiceVerifyMFAProcedure,
		svc.VerifyMFA,
		connect.WithSchema(authServiceMethods.ByName("VerifyMFA")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceDisableMFAHandler := connect.NewUnaryHandler(
		AuthServiceDisableMFAProcedure,
		svc.DisableMFA,
		connect.WithSchema(authServiceMethods.ByName("DisableMFA")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetUserHandler := connect.NewUnaryHandler(
		AuthServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(authServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateUserHandler := connect.NewUnaryHandler(
		AuthServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(authServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCheckPermissionHandler := connect.NewUnaryHandler(
		AuthServiceCheckPermissionProcedure,
		svc.CheckPermission,
		connect.WithSchema(authServiceMethods.ByName("CheckPermission")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetUserPermissionsHandler := connect.NewUnaryHandler(
		AuthServiceGetUserPermissionsProcedure,
		svc.GetUserPermissions,
		connect.WithSchema(authServiceMethods.ByName("GetUserPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.auth.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceRegisterUserProcedure:
			authServiceRegisterUserHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceForgotPasswordProcedure:
			authServiceForgotPasswordHandler.ServeHTTP(w, r)
		case AuthServiceResetPasswordProcedure:
			authServiceResetPasswordHandler.ServeHTTP(w, r)
		case AuthServiceChangePasswordProcedure:
			authServiceChangePasswordHandler.ServeHTTP(w, r)
		case AuthServiceVerifyEmailProcedure:
			authServiceVerifyEmailHandler.ServeHTTP(w, r)
		case AuthServiceEnableMFAProcedure:
			authServiceEnableMFAHandler.ServeHTTP(w, r)
		case AuthServiceVerifyMFAProcedure:
			authServiceVerifyMFAHandler.ServeHTTP(w, r)
		case AuthServiceDisableMFAProcedure:
			authServiceDisableMFAHandler.ServeHTTP(w, r)
		case AuthServiceGetUserProcedure:
			authServiceGetUserHandler.ServeHTTP(w, r)
		case AuthServiceUpdateUserProcedure:
			authServiceUpdateUserHandler.ServeHTTP(w, r)
		case AuthServiceCheckPermissionProcedure:
			authServiceCheckPermissionHandler.ServeHTTP(w, r)
		case AuthServiceGetUserPermissionsProcedure:
			authServiceGetUserPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) RegisterUser(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.RegisterUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) ForgotPassword(context.Context, *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.ForgotPassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.ResetPassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.ChangePassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.VerifyEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) EnableMFA(context.Context, *connect.Request[v1.EnableMFARequest]) (*connect.Response[v1.EnableMFAResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.EnableMFA is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMFA(context.Context, *connect.Request[v1.VerifyMFARequest]) (*connect.Response[v1.VerifyMFAResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.VerifyMFA is not implemented"))
}

func (UnimplementedAuthServiceHandler) DisableMFA(context.Context, *connect.Request[v1.DisableMFARequest]) (*connect.Response[v1.DisableMFAResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.DisableMFA is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.GetUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.UpdateUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.CheckPermission is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetUserPermissions(context.Context, *connect.Request[v1.GetUserPermissionsRequest]) (*connect.Response[v1.GetUserPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthService.GetUserPermissions is not implemented"))
}
