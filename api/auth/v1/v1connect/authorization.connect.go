// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/authorization.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/auth/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthorizationServiceName is the fully-qualified name of the AuthorizationService service.
	AuthorizationServiceName = "v1consortium.auth.AuthorizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorizationServiceHasPermissionProcedure is the fully-qualified name of the
	// AuthorizationService's HasPermission RPC.
	AuthorizationServiceHasPermissionProcedure = "/v1consortium.auth.AuthorizationService/HasPermission"
	// AuthorizationServiceAssignRoleProcedure is the fully-qualified name of the AuthorizationService's
	// AssignRole RPC.
	AuthorizationServiceAssignRoleProcedure = "/v1consortium.auth.AuthorizationService/AssignRole"
	// AuthorizationServiceRemoveRoleProcedure is the fully-qualified name of the AuthorizationService's
	// RemoveRole RPC.
	AuthorizationServiceRemoveRoleProcedure = "/v1consortium.auth.AuthorizationService/RemoveRole"
	// AuthorizationServiceGetUserRolesProcedure is the fully-qualified name of the
	// AuthorizationService's GetUserRoles RPC.
	AuthorizationServiceGetUserRolesProcedure = "/v1consortium.auth.AuthorizationService/GetUserRoles"
	// AuthorizationServiceGetRolePermissionsProcedure is the fully-qualified name of the
	// AuthorizationService's GetRolePermissions RPC.
	AuthorizationServiceGetRolePermissionsProcedure = "/v1consortium.auth.AuthorizationService/GetRolePermissions"
)

// AuthorizationServiceClient is a client for the v1consortium.auth.AuthorizationService service.
type AuthorizationServiceClient interface {
	// Permission Checks
	HasPermission(context.Context, *connect.Request[v1.HasPermissionRequest]) (*connect.Response[v1.HasPermissionResponse], error)
	// Role Management
	AssignRole(context.Context, *connect.Request[v1.AssignRoleRequest]) (*connect.Response[v1.AssignRoleResponse], error)
	RemoveRole(context.Context, *connect.Request[v1.RemoveRoleRequest]) (*connect.Response[v1.RemoveRoleResponse], error)
	GetUserRoles(context.Context, *connect.Request[v1.GetUserRolesRequest]) (*connect.Response[v1.GetUserRolesResponse], error)
	GetRolePermissions(context.Context, *connect.Request[v1.GetRolePermissionsRequest]) (*connect.Response[v1.GetRolePermissionsResponse], error)
}

// NewAuthorizationServiceClient constructs a client for the v1consortium.auth.AuthorizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authorizationServiceMethods := v1.File_auth_v1_authorization_proto.Services().ByName("AuthorizationService").Methods()
	return &authorizationServiceClient{
		hasPermission: connect.NewClient[v1.HasPermissionRequest, v1.HasPermissionResponse](
			httpClient,
			baseURL+AuthorizationServiceHasPermissionProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("HasPermission")),
			connect.WithClientOptions(opts...),
		),
		assignRole: connect.NewClient[v1.AssignRoleRequest, v1.AssignRoleResponse](
			httpClient,
			baseURL+AuthorizationServiceAssignRoleProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("AssignRole")),
			connect.WithClientOptions(opts...),
		),
		removeRole: connect.NewClient[v1.RemoveRoleRequest, v1.RemoveRoleResponse](
			httpClient,
			baseURL+AuthorizationServiceRemoveRoleProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("RemoveRole")),
			connect.WithClientOptions(opts...),
		),
		getUserRoles: connect.NewClient[v1.GetUserRolesRequest, v1.GetUserRolesResponse](
			httpClient,
			baseURL+AuthorizationServiceGetUserRolesProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("GetUserRoles")),
			connect.WithClientOptions(opts...),
		),
		getRolePermissions: connect.NewClient[v1.GetRolePermissionsRequest, v1.GetRolePermissionsResponse](
			httpClient,
			baseURL+AuthorizationServiceGetRolePermissionsProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("GetRolePermissions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authorizationServiceClient implements AuthorizationServiceClient.
type authorizationServiceClient struct {
	hasPermission      *connect.Client[v1.HasPermissionRequest, v1.HasPermissionResponse]
	assignRole         *connect.Client[v1.AssignRoleRequest, v1.AssignRoleResponse]
	removeRole         *connect.Client[v1.RemoveRoleRequest, v1.RemoveRoleResponse]
	getUserRoles       *connect.Client[v1.GetUserRolesRequest, v1.GetUserRolesResponse]
	getRolePermissions *connect.Client[v1.GetRolePermissionsRequest, v1.GetRolePermissionsResponse]
}

// HasPermission calls v1consortium.auth.AuthorizationService.HasPermission.
func (c *authorizationServiceClient) HasPermission(ctx context.Context, req *connect.Request[v1.HasPermissionRequest]) (*connect.Response[v1.HasPermissionResponse], error) {
	return c.hasPermission.CallUnary(ctx, req)
}

// AssignRole calls v1consortium.auth.AuthorizationService.AssignRole.
func (c *authorizationServiceClient) AssignRole(ctx context.Context, req *connect.Request[v1.AssignRoleRequest]) (*connect.Response[v1.AssignRoleResponse], error) {
	return c.assignRole.CallUnary(ctx, req)
}

// RemoveRole calls v1consortium.auth.AuthorizationService.RemoveRole.
func (c *authorizationServiceClient) RemoveRole(ctx context.Context, req *connect.Request[v1.RemoveRoleRequest]) (*connect.Response[v1.RemoveRoleResponse], error) {
	return c.removeRole.CallUnary(ctx, req)
}

// GetUserRoles calls v1consortium.auth.AuthorizationService.GetUserRoles.
func (c *authorizationServiceClient) GetUserRoles(ctx context.Context, req *connect.Request[v1.GetUserRolesRequest]) (*connect.Response[v1.GetUserRolesResponse], error) {
	return c.getUserRoles.CallUnary(ctx, req)
}

// GetRolePermissions calls v1consortium.auth.AuthorizationService.GetRolePermissions.
func (c *authorizationServiceClient) GetRolePermissions(ctx context.Context, req *connect.Request[v1.GetRolePermissionsRequest]) (*connect.Response[v1.GetRolePermissionsResponse], error) {
	return c.getRolePermissions.CallUnary(ctx, req)
}

// AuthorizationServiceHandler is an implementation of the v1consortium.auth.AuthorizationService
// service.
type AuthorizationServiceHandler interface {
	// Permission Checks
	HasPermission(context.Context, *connect.Request[v1.HasPermissionRequest]) (*connect.Response[v1.HasPermissionResponse], error)
	// Role Management
	AssignRole(context.Context, *connect.Request[v1.AssignRoleRequest]) (*connect.Response[v1.AssignRoleResponse], error)
	RemoveRole(context.Context, *connect.Request[v1.RemoveRoleRequest]) (*connect.Response[v1.RemoveRoleResponse], error)
	GetUserRoles(context.Context, *connect.Request[v1.GetUserRolesRequest]) (*connect.Response[v1.GetUserRolesResponse], error)
	GetRolePermissions(context.Context, *connect.Request[v1.GetRolePermissionsRequest]) (*connect.Response[v1.GetRolePermissionsResponse], error)
}

// NewAuthorizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorizationServiceHandler(svc AuthorizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorizationServiceMethods := v1.File_auth_v1_authorization_proto.Services().ByName("AuthorizationService").Methods()
	authorizationServiceHasPermissionHandler := connect.NewUnaryHandler(
		AuthorizationServiceHasPermissionProcedure,
		svc.HasPermission,
		connect.WithSchema(authorizationServiceMethods.ByName("HasPermission")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceAssignRoleHandler := connect.NewUnaryHandler(
		AuthorizationServiceAssignRoleProcedure,
		svc.AssignRole,
		connect.WithSchema(authorizationServiceMethods.ByName("AssignRole")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceRemoveRoleHandler := connect.NewUnaryHandler(
		AuthorizationServiceRemoveRoleProcedure,
		svc.RemoveRole,
		connect.WithSchema(authorizationServiceMethods.ByName("RemoveRole")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetUserRolesHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetUserRolesProcedure,
		svc.GetUserRoles,
		connect.WithSchema(authorizationServiceMethods.ByName("GetUserRoles")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetRolePermissionsHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetRolePermissionsProcedure,
		svc.GetRolePermissions,
		connect.WithSchema(authorizationServiceMethods.ByName("GetRolePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.auth.AuthorizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorizationServiceHasPermissionProcedure:
			authorizationServiceHasPermissionHandler.ServeHTTP(w, r)
		case AuthorizationServiceAssignRoleProcedure:
			authorizationServiceAssignRoleHandler.ServeHTTP(w, r)
		case AuthorizationServiceRemoveRoleProcedure:
			authorizationServiceRemoveRoleHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetUserRolesProcedure:
			authorizationServiceGetUserRolesHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetRolePermissionsProcedure:
			authorizationServiceGetRolePermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorizationServiceHandler struct{}

func (UnimplementedAuthorizationServiceHandler) HasPermission(context.Context, *connect.Request[v1.HasPermissionRequest]) (*connect.Response[v1.HasPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthorizationService.HasPermission is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) AssignRole(context.Context, *connect.Request[v1.AssignRoleRequest]) (*connect.Response[v1.AssignRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthorizationService.AssignRole is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) RemoveRole(context.Context, *connect.Request[v1.RemoveRoleRequest]) (*connect.Response[v1.RemoveRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthorizationService.RemoveRole is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetUserRoles(context.Context, *connect.Request[v1.GetUserRolesRequest]) (*connect.Response[v1.GetUserRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthorizationService.GetUserRoles is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetRolePermissions(context.Context, *connect.Request[v1.GetRolePermissionsRequest]) (*connect.Response[v1.GetRolePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.AuthorizationService.GetRolePermissions is not implemented"))
}
