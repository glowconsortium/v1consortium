// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/session.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/auth/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "v1consortium.auth.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceCreateSessionProcedure is the fully-qualified name of the SessionService's
	// CreateSession RPC.
	SessionServiceCreateSessionProcedure = "/v1consortium.auth.SessionService/CreateSession"
	// SessionServiceValidateSessionProcedure is the fully-qualified name of the SessionService's
	// ValidateSession RPC.
	SessionServiceValidateSessionProcedure = "/v1consortium.auth.SessionService/ValidateSession"
	// SessionServiceRefreshSessionProcedure is the fully-qualified name of the SessionService's
	// RefreshSession RPC.
	SessionServiceRefreshSessionProcedure = "/v1consortium.auth.SessionService/RefreshSession"
	// SessionServiceRevokeSessionProcedure is the fully-qualified name of the SessionService's
	// RevokeSession RPC.
	SessionServiceRevokeSessionProcedure = "/v1consortium.auth.SessionService/RevokeSession"
	// SessionServiceGetActiveSessionsProcedure is the fully-qualified name of the SessionService's
	// GetActiveSessions RPC.
	SessionServiceGetActiveSessionsProcedure = "/v1consortium.auth.SessionService/GetActiveSessions"
	// SessionServiceRevokeAllSessionsProcedure is the fully-qualified name of the SessionService's
	// RevokeAllSessions RPC.
	SessionServiceRevokeAllSessionsProcedure = "/v1consortium.auth.SessionService/RevokeAllSessions"
	// SessionServiceCreateTokenProcedure is the fully-qualified name of the SessionService's
	// CreateToken RPC.
	SessionServiceCreateTokenProcedure = "/v1consortium.auth.SessionService/CreateToken"
	// SessionServiceValidateTokenProcedure is the fully-qualified name of the SessionService's
	// ValidateToken RPC.
	SessionServiceValidateTokenProcedure = "/v1consortium.auth.SessionService/ValidateToken"
	// SessionServiceRevokeTokenProcedure is the fully-qualified name of the SessionService's
	// RevokeToken RPC.
	SessionServiceRevokeTokenProcedure = "/v1consortium.auth.SessionService/RevokeToken"
	// SessionServiceCleanupExpiredTokensProcedure is the fully-qualified name of the SessionService's
	// CleanupExpiredTokens RPC.
	SessionServiceCleanupExpiredTokensProcedure = "/v1consortium.auth.SessionService/CleanupExpiredTokens"
)

// SessionServiceClient is a client for the v1consortium.auth.SessionService service.
type SessionServiceClient interface {
	// Session Management
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	ValidateSession(context.Context, *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error)
	RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error)
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	GetActiveSessions(context.Context, *connect.Request[v1.GetActiveSessionsRequest]) (*connect.Response[v1.GetActiveSessionsResponse], error)
	RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error)
	// Token Management
	CreateToken(context.Context, *connect.Request[v1.CreateTokenRequest]) (*connect.Response[v1.CreateTokenResponse], error)
	ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error)
	RevokeToken(context.Context, *connect.Request[v1.RevokeTokenRequest]) (*connect.Response[v1.RevokeTokenResponse], error)
	CleanupExpiredTokens(context.Context, *connect.Request[v1.CleanupExpiredTokensRequest]) (*connect.Response[v1.CleanupExpiredTokensResponse], error)
}

// NewSessionServiceClient constructs a client for the v1consortium.auth.SessionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sessionServiceMethods := v1.File_auth_v1_session_proto.Services().ByName("SessionService").Methods()
	return &sessionServiceClient{
		createSession: connect.NewClient[v1.CreateSessionRequest, v1.CreateSessionResponse](
			httpClient,
			baseURL+SessionServiceCreateSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("CreateSession")),
			connect.WithClientOptions(opts...),
		),
		validateSession: connect.NewClient[v1.ValidateSessionRequest, v1.ValidateSessionResponse](
			httpClient,
			baseURL+SessionServiceValidateSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("ValidateSession")),
			connect.WithClientOptions(opts...),
		),
		refreshSession: connect.NewClient[v1.RefreshSessionRequest, v1.RefreshSessionResponse](
			httpClient,
			baseURL+SessionServiceRefreshSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RefreshSession")),
			connect.WithClientOptions(opts...),
		),
		revokeSession: connect.NewClient[v1.RevokeSessionRequest, v1.RevokeSessionResponse](
			httpClient,
			baseURL+SessionServiceRevokeSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RevokeSession")),
			connect.WithClientOptions(opts...),
		),
		getActiveSessions: connect.NewClient[v1.GetActiveSessionsRequest, v1.GetActiveSessionsResponse](
			httpClient,
			baseURL+SessionServiceGetActiveSessionsProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("GetActiveSessions")),
			connect.WithClientOptions(opts...),
		),
		revokeAllSessions: connect.NewClient[v1.RevokeAllSessionsRequest, v1.RevokeAllSessionsResponse](
			httpClient,
			baseURL+SessionServiceRevokeAllSessionsProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RevokeAllSessions")),
			connect.WithClientOptions(opts...),
		),
		createToken: connect.NewClient[v1.CreateTokenRequest, v1.CreateTokenResponse](
			httpClient,
			baseURL+SessionServiceCreateTokenProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("CreateToken")),
			connect.WithClientOptions(opts...),
		),
		validateToken: connect.NewClient[v1.ValidateTokenRequest, v1.ValidateTokenResponse](
			httpClient,
			baseURL+SessionServiceValidateTokenProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("ValidateToken")),
			connect.WithClientOptions(opts...),
		),
		revokeToken: connect.NewClient[v1.RevokeTokenRequest, v1.RevokeTokenResponse](
			httpClient,
			baseURL+SessionServiceRevokeTokenProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RevokeToken")),
			connect.WithClientOptions(opts...),
		),
		cleanupExpiredTokens: connect.NewClient[v1.CleanupExpiredTokensRequest, v1.CleanupExpiredTokensResponse](
			httpClient,
			baseURL+SessionServiceCleanupExpiredTokensProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("CleanupExpiredTokens")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	createSession        *connect.Client[v1.CreateSessionRequest, v1.CreateSessionResponse]
	validateSession      *connect.Client[v1.ValidateSessionRequest, v1.ValidateSessionResponse]
	refreshSession       *connect.Client[v1.RefreshSessionRequest, v1.RefreshSessionResponse]
	revokeSession        *connect.Client[v1.RevokeSessionRequest, v1.RevokeSessionResponse]
	getActiveSessions    *connect.Client[v1.GetActiveSessionsRequest, v1.GetActiveSessionsResponse]
	revokeAllSessions    *connect.Client[v1.RevokeAllSessionsRequest, v1.RevokeAllSessionsResponse]
	createToken          *connect.Client[v1.CreateTokenRequest, v1.CreateTokenResponse]
	validateToken        *connect.Client[v1.ValidateTokenRequest, v1.ValidateTokenResponse]
	revokeToken          *connect.Client[v1.RevokeTokenRequest, v1.RevokeTokenResponse]
	cleanupExpiredTokens *connect.Client[v1.CleanupExpiredTokensRequest, v1.CleanupExpiredTokensResponse]
}

// CreateSession calls v1consortium.auth.SessionService.CreateSession.
func (c *sessionServiceClient) CreateSession(ctx context.Context, req *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// ValidateSession calls v1consortium.auth.SessionService.ValidateSession.
func (c *sessionServiceClient) ValidateSession(ctx context.Context, req *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error) {
	return c.validateSession.CallUnary(ctx, req)
}

// RefreshSession calls v1consortium.auth.SessionService.RefreshSession.
func (c *sessionServiceClient) RefreshSession(ctx context.Context, req *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error) {
	return c.refreshSession.CallUnary(ctx, req)
}

// RevokeSession calls v1consortium.auth.SessionService.RevokeSession.
func (c *sessionServiceClient) RevokeSession(ctx context.Context, req *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return c.revokeSession.CallUnary(ctx, req)
}

// GetActiveSessions calls v1consortium.auth.SessionService.GetActiveSessions.
func (c *sessionServiceClient) GetActiveSessions(ctx context.Context, req *connect.Request[v1.GetActiveSessionsRequest]) (*connect.Response[v1.GetActiveSessionsResponse], error) {
	return c.getActiveSessions.CallUnary(ctx, req)
}

// RevokeAllSessions calls v1consortium.auth.SessionService.RevokeAllSessions.
func (c *sessionServiceClient) RevokeAllSessions(ctx context.Context, req *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error) {
	return c.revokeAllSessions.CallUnary(ctx, req)
}

// CreateToken calls v1consortium.auth.SessionService.CreateToken.
func (c *sessionServiceClient) CreateToken(ctx context.Context, req *connect.Request[v1.CreateTokenRequest]) (*connect.Response[v1.CreateTokenResponse], error) {
	return c.createToken.CallUnary(ctx, req)
}

// ValidateToken calls v1consortium.auth.SessionService.ValidateToken.
func (c *sessionServiceClient) ValidateToken(ctx context.Context, req *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error) {
	return c.validateToken.CallUnary(ctx, req)
}

// RevokeToken calls v1consortium.auth.SessionService.RevokeToken.
func (c *sessionServiceClient) RevokeToken(ctx context.Context, req *connect.Request[v1.RevokeTokenRequest]) (*connect.Response[v1.RevokeTokenResponse], error) {
	return c.revokeToken.CallUnary(ctx, req)
}

// CleanupExpiredTokens calls v1consortium.auth.SessionService.CleanupExpiredTokens.
func (c *sessionServiceClient) CleanupExpiredTokens(ctx context.Context, req *connect.Request[v1.CleanupExpiredTokensRequest]) (*connect.Response[v1.CleanupExpiredTokensResponse], error) {
	return c.cleanupExpiredTokens.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the v1consortium.auth.SessionService service.
type SessionServiceHandler interface {
	// Session Management
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	ValidateSession(context.Context, *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error)
	RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error)
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	GetActiveSessions(context.Context, *connect.Request[v1.GetActiveSessionsRequest]) (*connect.Response[v1.GetActiveSessionsResponse], error)
	RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error)
	// Token Management
	CreateToken(context.Context, *connect.Request[v1.CreateTokenRequest]) (*connect.Response[v1.CreateTokenResponse], error)
	ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error)
	RevokeToken(context.Context, *connect.Request[v1.RevokeTokenRequest]) (*connect.Response[v1.RevokeTokenResponse], error)
	CleanupExpiredTokens(context.Context, *connect.Request[v1.CleanupExpiredTokensRequest]) (*connect.Response[v1.CleanupExpiredTokensResponse], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceMethods := v1.File_auth_v1_session_proto.Services().ByName("SessionService").Methods()
	sessionServiceCreateSessionHandler := connect.NewUnaryHandler(
		SessionServiceCreateSessionProcedure,
		svc.CreateSession,
		connect.WithSchema(sessionServiceMethods.ByName("CreateSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceValidateSessionHandler := connect.NewUnaryHandler(
		SessionServiceValidateSessionProcedure,
		svc.ValidateSession,
		connect.WithSchema(sessionServiceMethods.ByName("ValidateSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRefreshSessionHandler := connect.NewUnaryHandler(
		SessionServiceRefreshSessionProcedure,
		svc.RefreshSession,
		connect.WithSchema(sessionServiceMethods.ByName("RefreshSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRevokeSessionHandler := connect.NewUnaryHandler(
		SessionServiceRevokeSessionProcedure,
		svc.RevokeSession,
		connect.WithSchema(sessionServiceMethods.ByName("RevokeSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceGetActiveSessionsHandler := connect.NewUnaryHandler(
		SessionServiceGetActiveSessionsProcedure,
		svc.GetActiveSessions,
		connect.WithSchema(sessionServiceMethods.ByName("GetActiveSessions")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRevokeAllSessionsHandler := connect.NewUnaryHandler(
		SessionServiceRevokeAllSessionsProcedure,
		svc.RevokeAllSessions,
		connect.WithSchema(sessionServiceMethods.ByName("RevokeAllSessions")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceCreateTokenHandler := connect.NewUnaryHandler(
		SessionServiceCreateTokenProcedure,
		svc.CreateToken,
		connect.WithSchema(sessionServiceMethods.ByName("CreateToken")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceValidateTokenHandler := connect.NewUnaryHandler(
		SessionServiceValidateTokenProcedure,
		svc.ValidateToken,
		connect.WithSchema(sessionServiceMethods.ByName("ValidateToken")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRevokeTokenHandler := connect.NewUnaryHandler(
		SessionServiceRevokeTokenProcedure,
		svc.RevokeToken,
		connect.WithSchema(sessionServiceMethods.ByName("RevokeToken")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceCleanupExpiredTokensHandler := connect.NewUnaryHandler(
		SessionServiceCleanupExpiredTokensProcedure,
		svc.CleanupExpiredTokens,
		connect.WithSchema(sessionServiceMethods.ByName("CleanupExpiredTokens")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.auth.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceCreateSessionProcedure:
			sessionServiceCreateSessionHandler.ServeHTTP(w, r)
		case SessionServiceValidateSessionProcedure:
			sessionServiceValidateSessionHandler.ServeHTTP(w, r)
		case SessionServiceRefreshSessionProcedure:
			sessionServiceRefreshSessionHandler.ServeHTTP(w, r)
		case SessionServiceRevokeSessionProcedure:
			sessionServiceRevokeSessionHandler.ServeHTTP(w, r)
		case SessionServiceGetActiveSessionsProcedure:
			sessionServiceGetActiveSessionsHandler.ServeHTTP(w, r)
		case SessionServiceRevokeAllSessionsProcedure:
			sessionServiceRevokeAllSessionsHandler.ServeHTTP(w, r)
		case SessionServiceCreateTokenProcedure:
			sessionServiceCreateTokenHandler.ServeHTTP(w, r)
		case SessionServiceValidateTokenProcedure:
			sessionServiceValidateTokenHandler.ServeHTTP(w, r)
		case SessionServiceRevokeTokenProcedure:
			sessionServiceRevokeTokenHandler.ServeHTTP(w, r)
		case SessionServiceCleanupExpiredTokensProcedure:
			sessionServiceCleanupExpiredTokensHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.CreateSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) ValidateSession(context.Context, *connect.Request[v1.ValidateSessionRequest]) (*connect.Response[v1.ValidateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.ValidateSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.RefreshSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.RevokeSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) GetActiveSessions(context.Context, *connect.Request[v1.GetActiveSessionsRequest]) (*connect.Response[v1.GetActiveSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.GetActiveSessions is not implemented"))
}

func (UnimplementedSessionServiceHandler) RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.RevokeAllSessions is not implemented"))
}

func (UnimplementedSessionServiceHandler) CreateToken(context.Context, *connect.Request[v1.CreateTokenRequest]) (*connect.Response[v1.CreateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.CreateToken is not implemented"))
}

func (UnimplementedSessionServiceHandler) ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.ValidateToken is not implemented"))
}

func (UnimplementedSessionServiceHandler) RevokeToken(context.Context, *connect.Request[v1.RevokeTokenRequest]) (*connect.Response[v1.RevokeTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.RevokeToken is not implemented"))
}

func (UnimplementedSessionServiceHandler) CleanupExpiredTokens(context.Context, *connect.Request[v1.CleanupExpiredTokensRequest]) (*connect.Response[v1.CleanupExpiredTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.auth.SessionService.CleanupExpiredTokens is not implemented"))
}
