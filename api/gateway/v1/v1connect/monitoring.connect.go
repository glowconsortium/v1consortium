// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gateway/v1/monitoring.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/gateway/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonitoringServiceName is the fully-qualified name of the MonitoringService service.
	MonitoringServiceName = "v1consortium.gateway.MonitoringService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitoringServiceRecordMetricProcedure is the fully-qualified name of the MonitoringService's
	// RecordMetric RPC.
	MonitoringServiceRecordMetricProcedure = "/v1consortium.gateway.MonitoringService/RecordMetric"
	// MonitoringServiceGetMetricsProcedure is the fully-qualified name of the MonitoringService's
	// GetMetrics RPC.
	MonitoringServiceGetMetricsProcedure = "/v1consortium.gateway.MonitoringService/GetMetrics"
	// MonitoringServiceGetGatewayStatusProcedure is the fully-qualified name of the MonitoringService's
	// GetGatewayStatus RPC.
	MonitoringServiceGetGatewayStatusProcedure = "/v1consortium.gateway.MonitoringService/GetGatewayStatus"
	// MonitoringServiceRecordErrorProcedure is the fully-qualified name of the MonitoringService's
	// RecordError RPC.
	MonitoringServiceRecordErrorProcedure = "/v1consortium.gateway.MonitoringService/RecordError"
	// MonitoringServiceGetErrorStatsProcedure is the fully-qualified name of the MonitoringService's
	// GetErrorStats RPC.
	MonitoringServiceGetErrorStatsProcedure = "/v1consortium.gateway.MonitoringService/GetErrorStats"
	// MonitoringServiceGetPerformanceStatsProcedure is the fully-qualified name of the
	// MonitoringService's GetPerformanceStats RPC.
	MonitoringServiceGetPerformanceStatsProcedure = "/v1consortium.gateway.MonitoringService/GetPerformanceStats"
	// MonitoringServiceGetRateLimitStatsProcedure is the fully-qualified name of the
	// MonitoringService's GetRateLimitStats RPC.
	MonitoringServiceGetRateLimitStatsProcedure = "/v1consortium.gateway.MonitoringService/GetRateLimitStats"
)

// MonitoringServiceClient is a client for the v1consortium.gateway.MonitoringService service.
type MonitoringServiceClient interface {
	// Metrics Collection and Retrieval
	RecordMetric(context.Context, *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error)
	GetMetrics(context.Context, *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error)
	// Health and Status
	GetGatewayStatus(context.Context, *connect.Request[v1.GetGatewayStatusRequest]) (*connect.Response[v1.GetGatewayStatusResponse], error)
	// Error Tracking
	RecordError(context.Context, *connect.Request[v1.RecordErrorRequest]) (*connect.Response[v1.RecordErrorResponse], error)
	GetErrorStats(context.Context, *connect.Request[v1.GetErrorStatsRequest]) (*connect.Response[v1.GetErrorStatsResponse], error)
	// Performance Monitoring
	GetPerformanceStats(context.Context, *connect.Request[v1.GetPerformanceStatsRequest]) (*connect.Response[v1.GetPerformanceStatsResponse], error)
	// Rate Limit Monitoring
	GetRateLimitStats(context.Context, *connect.Request[v1.GetRateLimitStatsRequest]) (*connect.Response[v1.GetRateLimitStatsResponse], error)
}

// NewMonitoringServiceClient constructs a client for the v1consortium.gateway.MonitoringService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitoringServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitoringServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	monitoringServiceMethods := v1.File_gateway_v1_monitoring_proto.Services().ByName("MonitoringService").Methods()
	return &monitoringServiceClient{
		recordMetric: connect.NewClient[v1.RecordMetricRequest, v1.RecordMetricResponse](
			httpClient,
			baseURL+MonitoringServiceRecordMetricProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("RecordMetric")),
			connect.WithClientOptions(opts...),
		),
		getMetrics: connect.NewClient[v1.GetMetricsRequest, v1.GetMetricsResponse](
			httpClient,
			baseURL+MonitoringServiceGetMetricsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetMetrics")),
			connect.WithClientOptions(opts...),
		),
		getGatewayStatus: connect.NewClient[v1.GetGatewayStatusRequest, v1.GetGatewayStatusResponse](
			httpClient,
			baseURL+MonitoringServiceGetGatewayStatusProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetGatewayStatus")),
			connect.WithClientOptions(opts...),
		),
		recordError: connect.NewClient[v1.RecordErrorRequest, v1.RecordErrorResponse](
			httpClient,
			baseURL+MonitoringServiceRecordErrorProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("RecordError")),
			connect.WithClientOptions(opts...),
		),
		getErrorStats: connect.NewClient[v1.GetErrorStatsRequest, v1.GetErrorStatsResponse](
			httpClient,
			baseURL+MonitoringServiceGetErrorStatsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetErrorStats")),
			connect.WithClientOptions(opts...),
		),
		getPerformanceStats: connect.NewClient[v1.GetPerformanceStatsRequest, v1.GetPerformanceStatsResponse](
			httpClient,
			baseURL+MonitoringServiceGetPerformanceStatsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetPerformanceStats")),
			connect.WithClientOptions(opts...),
		),
		getRateLimitStats: connect.NewClient[v1.GetRateLimitStatsRequest, v1.GetRateLimitStatsResponse](
			httpClient,
			baseURL+MonitoringServiceGetRateLimitStatsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetRateLimitStats")),
			connect.WithClientOptions(opts...),
		),
	}
}

// monitoringServiceClient implements MonitoringServiceClient.
type monitoringServiceClient struct {
	recordMetric        *connect.Client[v1.RecordMetricRequest, v1.RecordMetricResponse]
	getMetrics          *connect.Client[v1.GetMetricsRequest, v1.GetMetricsResponse]
	getGatewayStatus    *connect.Client[v1.GetGatewayStatusRequest, v1.GetGatewayStatusResponse]
	recordError         *connect.Client[v1.RecordErrorRequest, v1.RecordErrorResponse]
	getErrorStats       *connect.Client[v1.GetErrorStatsRequest, v1.GetErrorStatsResponse]
	getPerformanceStats *connect.Client[v1.GetPerformanceStatsRequest, v1.GetPerformanceStatsResponse]
	getRateLimitStats   *connect.Client[v1.GetRateLimitStatsRequest, v1.GetRateLimitStatsResponse]
}

// RecordMetric calls v1consortium.gateway.MonitoringService.RecordMetric.
func (c *monitoringServiceClient) RecordMetric(ctx context.Context, req *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error) {
	return c.recordMetric.CallUnary(ctx, req)
}

// GetMetrics calls v1consortium.gateway.MonitoringService.GetMetrics.
func (c *monitoringServiceClient) GetMetrics(ctx context.Context, req *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error) {
	return c.getMetrics.CallUnary(ctx, req)
}

// GetGatewayStatus calls v1consortium.gateway.MonitoringService.GetGatewayStatus.
func (c *monitoringServiceClient) GetGatewayStatus(ctx context.Context, req *connect.Request[v1.GetGatewayStatusRequest]) (*connect.Response[v1.GetGatewayStatusResponse], error) {
	return c.getGatewayStatus.CallUnary(ctx, req)
}

// RecordError calls v1consortium.gateway.MonitoringService.RecordError.
func (c *monitoringServiceClient) RecordError(ctx context.Context, req *connect.Request[v1.RecordErrorRequest]) (*connect.Response[v1.RecordErrorResponse], error) {
	return c.recordError.CallUnary(ctx, req)
}

// GetErrorStats calls v1consortium.gateway.MonitoringService.GetErrorStats.
func (c *monitoringServiceClient) GetErrorStats(ctx context.Context, req *connect.Request[v1.GetErrorStatsRequest]) (*connect.Response[v1.GetErrorStatsResponse], error) {
	return c.getErrorStats.CallUnary(ctx, req)
}

// GetPerformanceStats calls v1consortium.gateway.MonitoringService.GetPerformanceStats.
func (c *monitoringServiceClient) GetPerformanceStats(ctx context.Context, req *connect.Request[v1.GetPerformanceStatsRequest]) (*connect.Response[v1.GetPerformanceStatsResponse], error) {
	return c.getPerformanceStats.CallUnary(ctx, req)
}

// GetRateLimitStats calls v1consortium.gateway.MonitoringService.GetRateLimitStats.
func (c *monitoringServiceClient) GetRateLimitStats(ctx context.Context, req *connect.Request[v1.GetRateLimitStatsRequest]) (*connect.Response[v1.GetRateLimitStatsResponse], error) {
	return c.getRateLimitStats.CallUnary(ctx, req)
}

// MonitoringServiceHandler is an implementation of the v1consortium.gateway.MonitoringService
// service.
type MonitoringServiceHandler interface {
	// Metrics Collection and Retrieval
	RecordMetric(context.Context, *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error)
	GetMetrics(context.Context, *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error)
	// Health and Status
	GetGatewayStatus(context.Context, *connect.Request[v1.GetGatewayStatusRequest]) (*connect.Response[v1.GetGatewayStatusResponse], error)
	// Error Tracking
	RecordError(context.Context, *connect.Request[v1.RecordErrorRequest]) (*connect.Response[v1.RecordErrorResponse], error)
	GetErrorStats(context.Context, *connect.Request[v1.GetErrorStatsRequest]) (*connect.Response[v1.GetErrorStatsResponse], error)
	// Performance Monitoring
	GetPerformanceStats(context.Context, *connect.Request[v1.GetPerformanceStatsRequest]) (*connect.Response[v1.GetPerformanceStatsResponse], error)
	// Rate Limit Monitoring
	GetRateLimitStats(context.Context, *connect.Request[v1.GetRateLimitStatsRequest]) (*connect.Response[v1.GetRateLimitStatsResponse], error)
}

// NewMonitoringServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitoringServiceHandler(svc MonitoringServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitoringServiceMethods := v1.File_gateway_v1_monitoring_proto.Services().ByName("MonitoringService").Methods()
	monitoringServiceRecordMetricHandler := connect.NewUnaryHandler(
		MonitoringServiceRecordMetricProcedure,
		svc.RecordMetric,
		connect.WithSchema(monitoringServiceMethods.ByName("RecordMetric")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetMetricsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetMetricsProcedure,
		svc.GetMetrics,
		connect.WithSchema(monitoringServiceMethods.ByName("GetMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetGatewayStatusHandler := connect.NewUnaryHandler(
		MonitoringServiceGetGatewayStatusProcedure,
		svc.GetGatewayStatus,
		connect.WithSchema(monitoringServiceMethods.ByName("GetGatewayStatus")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceRecordErrorHandler := connect.NewUnaryHandler(
		MonitoringServiceRecordErrorProcedure,
		svc.RecordError,
		connect.WithSchema(monitoringServiceMethods.ByName("RecordError")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetErrorStatsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetErrorStatsProcedure,
		svc.GetErrorStats,
		connect.WithSchema(monitoringServiceMethods.ByName("GetErrorStats")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetPerformanceStatsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetPerformanceStatsProcedure,
		svc.GetPerformanceStats,
		connect.WithSchema(monitoringServiceMethods.ByName("GetPerformanceStats")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetRateLimitStatsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetRateLimitStatsProcedure,
		svc.GetRateLimitStats,
		connect.WithSchema(monitoringServiceMethods.ByName("GetRateLimitStats")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.gateway.MonitoringService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitoringServiceRecordMetricProcedure:
			monitoringServiceRecordMetricHandler.ServeHTTP(w, r)
		case MonitoringServiceGetMetricsProcedure:
			monitoringServiceGetMetricsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetGatewayStatusProcedure:
			monitoringServiceGetGatewayStatusHandler.ServeHTTP(w, r)
		case MonitoringServiceRecordErrorProcedure:
			monitoringServiceRecordErrorHandler.ServeHTTP(w, r)
		case MonitoringServiceGetErrorStatsProcedure:
			monitoringServiceGetErrorStatsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetPerformanceStatsProcedure:
			monitoringServiceGetPerformanceStatsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetRateLimitStatsProcedure:
			monitoringServiceGetRateLimitStatsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitoringServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitoringServiceHandler struct{}

func (UnimplementedMonitoringServiceHandler) RecordMetric(context.Context, *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.MonitoringService.RecordMetric is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetMetrics(context.Context, *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.MonitoringService.GetMetrics is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetGatewayStatus(context.Context, *connect.Request[v1.GetGatewayStatusRequest]) (*connect.Response[v1.GetGatewayStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.MonitoringService.GetGatewayStatus is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) RecordError(context.Context, *connect.Request[v1.RecordErrorRequest]) (*connect.Response[v1.RecordErrorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.MonitoringService.RecordError is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetErrorStats(context.Context, *connect.Request[v1.GetErrorStatsRequest]) (*connect.Response[v1.GetErrorStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.MonitoringService.GetErrorStats is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetPerformanceStats(context.Context, *connect.Request[v1.GetPerformanceStatsRequest]) (*connect.Response[v1.GetPerformanceStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.MonitoringService.GetPerformanceStats is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetRateLimitStats(context.Context, *connect.Request[v1.GetRateLimitStatsRequest]) (*connect.Response[v1.GetRateLimitStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.MonitoringService.GetRateLimitStats is not implemented"))
}
