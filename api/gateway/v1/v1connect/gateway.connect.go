// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gateway/v1/gateway.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/gateway/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GatewayServiceName is the fully-qualified name of the GatewayService service.
	GatewayServiceName = "v1consortium.gateway.GatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GatewayServiceAuthenticateProcedure is the fully-qualified name of the GatewayService's
	// Authenticate RPC.
	GatewayServiceAuthenticateProcedure = "/v1consortium.gateway.GatewayService/Authenticate"
	// GatewayServiceCheckRateLimitProcedure is the fully-qualified name of the GatewayService's
	// CheckRateLimit RPC.
	GatewayServiceCheckRateLimitProcedure = "/v1consortium.gateway.GatewayService/CheckRateLimit"
	// GatewayServiceValidateRequestProcedure is the fully-qualified name of the GatewayService's
	// ValidateRequest RPC.
	GatewayServiceValidateRequestProcedure = "/v1consortium.gateway.GatewayService/ValidateRequest"
	// GatewayServiceGetServiceHealthProcedure is the fully-qualified name of the GatewayService's
	// GetServiceHealth RPC.
	GatewayServiceGetServiceHealthProcedure = "/v1consortium.gateway.GatewayService/GetServiceHealth"
	// GatewayServiceListServicesProcedure is the fully-qualified name of the GatewayService's
	// ListServices RPC.
	GatewayServiceListServicesProcedure = "/v1consortium.gateway.GatewayService/ListServices"
	// GatewayServiceRouteProcedure is the fully-qualified name of the GatewayService's Route RPC.
	GatewayServiceRouteProcedure = "/v1consortium.gateway.GatewayService/Route"
	// GatewayServiceLogApiRequestProcedure is the fully-qualified name of the GatewayService's
	// LogApiRequest RPC.
	GatewayServiceLogApiRequestProcedure = "/v1consortium.gateway.GatewayService/LogApiRequest"
	// GatewayServiceGetCircuitBreakerStatusProcedure is the fully-qualified name of the
	// GatewayService's GetCircuitBreakerStatus RPC.
	GatewayServiceGetCircuitBreakerStatusProcedure = "/v1consortium.gateway.GatewayService/GetCircuitBreakerStatus"
)

// GatewayServiceClient is a client for the v1consortium.gateway.GatewayService service.
type GatewayServiceClient interface {
	// Authentication and Authorization
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
	// Rate Limiting
	CheckRateLimit(context.Context, *connect.Request[v1.RateLimitRequest]) (*connect.Response[v1.RateLimitResponse], error)
	// Request Validation
	ValidateRequest(context.Context, *connect.Request[v1.ValidateRequestRequest]) (*connect.Response[v1.ValidateRequestResponse], error)
	// Service Discovery
	GetServiceHealth(context.Context, *connect.Request[v1.ServiceHealthRequest]) (*connect.Response[v1.ServiceHealthResponse], error)
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	// Request Routing
	Route(context.Context, *connect.Request[v1.RouteRequest]) (*connect.Response[v1.RouteResponse], error)
	// Audit and Logging
	LogApiRequest(context.Context, *connect.Request[v1.LogApiRequestRequest]) (*connect.Response[v1.LogApiRequestResponse], error)
	// Circuit Breaker
	GetCircuitBreakerStatus(context.Context, *connect.Request[v1.CircuitBreakerStatusRequest]) (*connect.Response[v1.CircuitBreakerStatusResponse], error)
}

// NewGatewayServiceClient constructs a client for the v1consortium.gateway.GatewayService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gatewayServiceMethods := v1.File_gateway_v1_gateway_proto.Services().ByName("GatewayService").Methods()
	return &gatewayServiceClient{
		authenticate: connect.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+GatewayServiceAuthenticateProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("Authenticate")),
			connect.WithClientOptions(opts...),
		),
		checkRateLimit: connect.NewClient[v1.RateLimitRequest, v1.RateLimitResponse](
			httpClient,
			baseURL+GatewayServiceCheckRateLimitProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("CheckRateLimit")),
			connect.WithClientOptions(opts...),
		),
		validateRequest: connect.NewClient[v1.ValidateRequestRequest, v1.ValidateRequestResponse](
			httpClient,
			baseURL+GatewayServiceValidateRequestProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("ValidateRequest")),
			connect.WithClientOptions(opts...),
		),
		getServiceHealth: connect.NewClient[v1.ServiceHealthRequest, v1.ServiceHealthResponse](
			httpClient,
			baseURL+GatewayServiceGetServiceHealthProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("GetServiceHealth")),
			connect.WithClientOptions(opts...),
		),
		listServices: connect.NewClient[v1.ListServicesRequest, v1.ListServicesResponse](
			httpClient,
			baseURL+GatewayServiceListServicesProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("ListServices")),
			connect.WithClientOptions(opts...),
		),
		route: connect.NewClient[v1.RouteRequest, v1.RouteResponse](
			httpClient,
			baseURL+GatewayServiceRouteProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("Route")),
			connect.WithClientOptions(opts...),
		),
		logApiRequest: connect.NewClient[v1.LogApiRequestRequest, v1.LogApiRequestResponse](
			httpClient,
			baseURL+GatewayServiceLogApiRequestProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("LogApiRequest")),
			connect.WithClientOptions(opts...),
		),
		getCircuitBreakerStatus: connect.NewClient[v1.CircuitBreakerStatusRequest, v1.CircuitBreakerStatusResponse](
			httpClient,
			baseURL+GatewayServiceGetCircuitBreakerStatusProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("GetCircuitBreakerStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gatewayServiceClient implements GatewayServiceClient.
type gatewayServiceClient struct {
	authenticate            *connect.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
	checkRateLimit          *connect.Client[v1.RateLimitRequest, v1.RateLimitResponse]
	validateRequest         *connect.Client[v1.ValidateRequestRequest, v1.ValidateRequestResponse]
	getServiceHealth        *connect.Client[v1.ServiceHealthRequest, v1.ServiceHealthResponse]
	listServices            *connect.Client[v1.ListServicesRequest, v1.ListServicesResponse]
	route                   *connect.Client[v1.RouteRequest, v1.RouteResponse]
	logApiRequest           *connect.Client[v1.LogApiRequestRequest, v1.LogApiRequestResponse]
	getCircuitBreakerStatus *connect.Client[v1.CircuitBreakerStatusRequest, v1.CircuitBreakerStatusResponse]
}

// Authenticate calls v1consortium.gateway.GatewayService.Authenticate.
func (c *gatewayServiceClient) Authenticate(ctx context.Context, req *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// CheckRateLimit calls v1consortium.gateway.GatewayService.CheckRateLimit.
func (c *gatewayServiceClient) CheckRateLimit(ctx context.Context, req *connect.Request[v1.RateLimitRequest]) (*connect.Response[v1.RateLimitResponse], error) {
	return c.checkRateLimit.CallUnary(ctx, req)
}

// ValidateRequest calls v1consortium.gateway.GatewayService.ValidateRequest.
func (c *gatewayServiceClient) ValidateRequest(ctx context.Context, req *connect.Request[v1.ValidateRequestRequest]) (*connect.Response[v1.ValidateRequestResponse], error) {
	return c.validateRequest.CallUnary(ctx, req)
}

// GetServiceHealth calls v1consortium.gateway.GatewayService.GetServiceHealth.
func (c *gatewayServiceClient) GetServiceHealth(ctx context.Context, req *connect.Request[v1.ServiceHealthRequest]) (*connect.Response[v1.ServiceHealthResponse], error) {
	return c.getServiceHealth.CallUnary(ctx, req)
}

// ListServices calls v1consortium.gateway.GatewayService.ListServices.
func (c *gatewayServiceClient) ListServices(ctx context.Context, req *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return c.listServices.CallUnary(ctx, req)
}

// Route calls v1consortium.gateway.GatewayService.Route.
func (c *gatewayServiceClient) Route(ctx context.Context, req *connect.Request[v1.RouteRequest]) (*connect.Response[v1.RouteResponse], error) {
	return c.route.CallUnary(ctx, req)
}

// LogApiRequest calls v1consortium.gateway.GatewayService.LogApiRequest.
func (c *gatewayServiceClient) LogApiRequest(ctx context.Context, req *connect.Request[v1.LogApiRequestRequest]) (*connect.Response[v1.LogApiRequestResponse], error) {
	return c.logApiRequest.CallUnary(ctx, req)
}

// GetCircuitBreakerStatus calls v1consortium.gateway.GatewayService.GetCircuitBreakerStatus.
func (c *gatewayServiceClient) GetCircuitBreakerStatus(ctx context.Context, req *connect.Request[v1.CircuitBreakerStatusRequest]) (*connect.Response[v1.CircuitBreakerStatusResponse], error) {
	return c.getCircuitBreakerStatus.CallUnary(ctx, req)
}

// GatewayServiceHandler is an implementation of the v1consortium.gateway.GatewayService service.
type GatewayServiceHandler interface {
	// Authentication and Authorization
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
	// Rate Limiting
	CheckRateLimit(context.Context, *connect.Request[v1.RateLimitRequest]) (*connect.Response[v1.RateLimitResponse], error)
	// Request Validation
	ValidateRequest(context.Context, *connect.Request[v1.ValidateRequestRequest]) (*connect.Response[v1.ValidateRequestResponse], error)
	// Service Discovery
	GetServiceHealth(context.Context, *connect.Request[v1.ServiceHealthRequest]) (*connect.Response[v1.ServiceHealthResponse], error)
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	// Request Routing
	Route(context.Context, *connect.Request[v1.RouteRequest]) (*connect.Response[v1.RouteResponse], error)
	// Audit and Logging
	LogApiRequest(context.Context, *connect.Request[v1.LogApiRequestRequest]) (*connect.Response[v1.LogApiRequestResponse], error)
	// Circuit Breaker
	GetCircuitBreakerStatus(context.Context, *connect.Request[v1.CircuitBreakerStatusRequest]) (*connect.Response[v1.CircuitBreakerStatusResponse], error)
}

// NewGatewayServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGatewayServiceHandler(svc GatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gatewayServiceMethods := v1.File_gateway_v1_gateway_proto.Services().ByName("GatewayService").Methods()
	gatewayServiceAuthenticateHandler := connect.NewUnaryHandler(
		GatewayServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(gatewayServiceMethods.ByName("Authenticate")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceCheckRateLimitHandler := connect.NewUnaryHandler(
		GatewayServiceCheckRateLimitProcedure,
		svc.CheckRateLimit,
		connect.WithSchema(gatewayServiceMethods.ByName("CheckRateLimit")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceValidateRequestHandler := connect.NewUnaryHandler(
		GatewayServiceValidateRequestProcedure,
		svc.ValidateRequest,
		connect.WithSchema(gatewayServiceMethods.ByName("ValidateRequest")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceGetServiceHealthHandler := connect.NewUnaryHandler(
		GatewayServiceGetServiceHealthProcedure,
		svc.GetServiceHealth,
		connect.WithSchema(gatewayServiceMethods.ByName("GetServiceHealth")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceListServicesHandler := connect.NewUnaryHandler(
		GatewayServiceListServicesProcedure,
		svc.ListServices,
		connect.WithSchema(gatewayServiceMethods.ByName("ListServices")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceRouteHandler := connect.NewUnaryHandler(
		GatewayServiceRouteProcedure,
		svc.Route,
		connect.WithSchema(gatewayServiceMethods.ByName("Route")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceLogApiRequestHandler := connect.NewUnaryHandler(
		GatewayServiceLogApiRequestProcedure,
		svc.LogApiRequest,
		connect.WithSchema(gatewayServiceMethods.ByName("LogApiRequest")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceGetCircuitBreakerStatusHandler := connect.NewUnaryHandler(
		GatewayServiceGetCircuitBreakerStatusProcedure,
		svc.GetCircuitBreakerStatus,
		connect.WithSchema(gatewayServiceMethods.ByName("GetCircuitBreakerStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.gateway.GatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GatewayServiceAuthenticateProcedure:
			gatewayServiceAuthenticateHandler.ServeHTTP(w, r)
		case GatewayServiceCheckRateLimitProcedure:
			gatewayServiceCheckRateLimitHandler.ServeHTTP(w, r)
		case GatewayServiceValidateRequestProcedure:
			gatewayServiceValidateRequestHandler.ServeHTTP(w, r)
		case GatewayServiceGetServiceHealthProcedure:
			gatewayServiceGetServiceHealthHandler.ServeHTTP(w, r)
		case GatewayServiceListServicesProcedure:
			gatewayServiceListServicesHandler.ServeHTTP(w, r)
		case GatewayServiceRouteProcedure:
			gatewayServiceRouteHandler.ServeHTTP(w, r)
		case GatewayServiceLogApiRequestProcedure:
			gatewayServiceLogApiRequestHandler.ServeHTTP(w, r)
		case GatewayServiceGetCircuitBreakerStatusProcedure:
			gatewayServiceGetCircuitBreakerStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGatewayServiceHandler struct{}

func (UnimplementedGatewayServiceHandler) Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.Authenticate is not implemented"))
}

func (UnimplementedGatewayServiceHandler) CheckRateLimit(context.Context, *connect.Request[v1.RateLimitRequest]) (*connect.Response[v1.RateLimitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.CheckRateLimit is not implemented"))
}

func (UnimplementedGatewayServiceHandler) ValidateRequest(context.Context, *connect.Request[v1.ValidateRequestRequest]) (*connect.Response[v1.ValidateRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.ValidateRequest is not implemented"))
}

func (UnimplementedGatewayServiceHandler) GetServiceHealth(context.Context, *connect.Request[v1.ServiceHealthRequest]) (*connect.Response[v1.ServiceHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.GetServiceHealth is not implemented"))
}

func (UnimplementedGatewayServiceHandler) ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.ListServices is not implemented"))
}

func (UnimplementedGatewayServiceHandler) Route(context.Context, *connect.Request[v1.RouteRequest]) (*connect.Response[v1.RouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.Route is not implemented"))
}

func (UnimplementedGatewayServiceHandler) LogApiRequest(context.Context, *connect.Request[v1.LogApiRequestRequest]) (*connect.Response[v1.LogApiRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.LogApiRequest is not implemented"))
}

func (UnimplementedGatewayServiceHandler) GetCircuitBreakerStatus(context.Context, *connect.Request[v1.CircuitBreakerStatusRequest]) (*connect.Response[v1.CircuitBreakerStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.GatewayService.GetCircuitBreakerStatus is not implemented"))
}
