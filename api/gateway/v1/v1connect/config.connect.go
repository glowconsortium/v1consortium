// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gateway/v1/config.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "v1consortium/api/gateway/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigurationServiceName is the fully-qualified name of the ConfigurationService service.
	ConfigurationServiceName = "v1consortium.gateway.ConfigurationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigurationServiceGetGatewayConfigProcedure is the fully-qualified name of the
	// ConfigurationService's GetGatewayConfig RPC.
	ConfigurationServiceGetGatewayConfigProcedure = "/v1consortium.gateway.ConfigurationService/GetGatewayConfig"
	// ConfigurationServiceUpdateGatewayConfigProcedure is the fully-qualified name of the
	// ConfigurationService's UpdateGatewayConfig RPC.
	ConfigurationServiceUpdateGatewayConfigProcedure = "/v1consortium.gateway.ConfigurationService/UpdateGatewayConfig"
	// ConfigurationServiceAddRouteProcedure is the fully-qualified name of the ConfigurationService's
	// AddRoute RPC.
	ConfigurationServiceAddRouteProcedure = "/v1consortium.gateway.ConfigurationService/AddRoute"
	// ConfigurationServiceRemoveRouteProcedure is the fully-qualified name of the
	// ConfigurationService's RemoveRoute RPC.
	ConfigurationServiceRemoveRouteProcedure = "/v1consortium.gateway.ConfigurationService/RemoveRoute"
	// ConfigurationServiceUpdateRouteProcedure is the fully-qualified name of the
	// ConfigurationService's UpdateRoute RPC.
	ConfigurationServiceUpdateRouteProcedure = "/v1consortium.gateway.ConfigurationService/UpdateRoute"
	// ConfigurationServiceListRoutesProcedure is the fully-qualified name of the ConfigurationService's
	// ListRoutes RPC.
	ConfigurationServiceListRoutesProcedure = "/v1consortium.gateway.ConfigurationService/ListRoutes"
)

// ConfigurationServiceClient is a client for the v1consortium.gateway.ConfigurationService service.
type ConfigurationServiceClient interface {
	// Gateway Configuration
	GetGatewayConfig(context.Context, *connect.Request[v1.GetGatewayConfigRequest]) (*connect.Response[v1.GetGatewayConfigResponse], error)
	UpdateGatewayConfig(context.Context, *connect.Request[v1.UpdateGatewayConfigRequest]) (*connect.Response[v1.UpdateGatewayConfigResponse], error)
	// Route Management
	AddRoute(context.Context, *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error)
	RemoveRoute(context.Context, *connect.Request[v1.RemoveRouteRequest]) (*connect.Response[v1.RemoveRouteResponse], error)
	UpdateRoute(context.Context, *connect.Request[v1.UpdateRouteRequest]) (*connect.Response[v1.UpdateRouteResponse], error)
	ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error)
}

// NewConfigurationServiceClient constructs a client for the
// v1consortium.gateway.ConfigurationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigurationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configurationServiceMethods := v1.File_gateway_v1_config_proto.Services().ByName("ConfigurationService").Methods()
	return &configurationServiceClient{
		getGatewayConfig: connect.NewClient[v1.GetGatewayConfigRequest, v1.GetGatewayConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceGetGatewayConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("GetGatewayConfig")),
			connect.WithClientOptions(opts...),
		),
		updateGatewayConfig: connect.NewClient[v1.UpdateGatewayConfigRequest, v1.UpdateGatewayConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceUpdateGatewayConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("UpdateGatewayConfig")),
			connect.WithClientOptions(opts...),
		),
		addRoute: connect.NewClient[v1.AddRouteRequest, v1.AddRouteResponse](
			httpClient,
			baseURL+ConfigurationServiceAddRouteProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("AddRoute")),
			connect.WithClientOptions(opts...),
		),
		removeRoute: connect.NewClient[v1.RemoveRouteRequest, v1.RemoveRouteResponse](
			httpClient,
			baseURL+ConfigurationServiceRemoveRouteProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("RemoveRoute")),
			connect.WithClientOptions(opts...),
		),
		updateRoute: connect.NewClient[v1.UpdateRouteRequest, v1.UpdateRouteResponse](
			httpClient,
			baseURL+ConfigurationServiceUpdateRouteProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("UpdateRoute")),
			connect.WithClientOptions(opts...),
		),
		listRoutes: connect.NewClient[v1.ListRoutesRequest, v1.ListRoutesResponse](
			httpClient,
			baseURL+ConfigurationServiceListRoutesProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("ListRoutes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configurationServiceClient implements ConfigurationServiceClient.
type configurationServiceClient struct {
	getGatewayConfig    *connect.Client[v1.GetGatewayConfigRequest, v1.GetGatewayConfigResponse]
	updateGatewayConfig *connect.Client[v1.UpdateGatewayConfigRequest, v1.UpdateGatewayConfigResponse]
	addRoute            *connect.Client[v1.AddRouteRequest, v1.AddRouteResponse]
	removeRoute         *connect.Client[v1.RemoveRouteRequest, v1.RemoveRouteResponse]
	updateRoute         *connect.Client[v1.UpdateRouteRequest, v1.UpdateRouteResponse]
	listRoutes          *connect.Client[v1.ListRoutesRequest, v1.ListRoutesResponse]
}

// GetGatewayConfig calls v1consortium.gateway.ConfigurationService.GetGatewayConfig.
func (c *configurationServiceClient) GetGatewayConfig(ctx context.Context, req *connect.Request[v1.GetGatewayConfigRequest]) (*connect.Response[v1.GetGatewayConfigResponse], error) {
	return c.getGatewayConfig.CallUnary(ctx, req)
}

// UpdateGatewayConfig calls v1consortium.gateway.ConfigurationService.UpdateGatewayConfig.
func (c *configurationServiceClient) UpdateGatewayConfig(ctx context.Context, req *connect.Request[v1.UpdateGatewayConfigRequest]) (*connect.Response[v1.UpdateGatewayConfigResponse], error) {
	return c.updateGatewayConfig.CallUnary(ctx, req)
}

// AddRoute calls v1consortium.gateway.ConfigurationService.AddRoute.
func (c *configurationServiceClient) AddRoute(ctx context.Context, req *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error) {
	return c.addRoute.CallUnary(ctx, req)
}

// RemoveRoute calls v1consortium.gateway.ConfigurationService.RemoveRoute.
func (c *configurationServiceClient) RemoveRoute(ctx context.Context, req *connect.Request[v1.RemoveRouteRequest]) (*connect.Response[v1.RemoveRouteResponse], error) {
	return c.removeRoute.CallUnary(ctx, req)
}

// UpdateRoute calls v1consortium.gateway.ConfigurationService.UpdateRoute.
func (c *configurationServiceClient) UpdateRoute(ctx context.Context, req *connect.Request[v1.UpdateRouteRequest]) (*connect.Response[v1.UpdateRouteResponse], error) {
	return c.updateRoute.CallUnary(ctx, req)
}

// ListRoutes calls v1consortium.gateway.ConfigurationService.ListRoutes.
func (c *configurationServiceClient) ListRoutes(ctx context.Context, req *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error) {
	return c.listRoutes.CallUnary(ctx, req)
}

// ConfigurationServiceHandler is an implementation of the v1consortium.gateway.ConfigurationService
// service.
type ConfigurationServiceHandler interface {
	// Gateway Configuration
	GetGatewayConfig(context.Context, *connect.Request[v1.GetGatewayConfigRequest]) (*connect.Response[v1.GetGatewayConfigResponse], error)
	UpdateGatewayConfig(context.Context, *connect.Request[v1.UpdateGatewayConfigRequest]) (*connect.Response[v1.UpdateGatewayConfigResponse], error)
	// Route Management
	AddRoute(context.Context, *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error)
	RemoveRoute(context.Context, *connect.Request[v1.RemoveRouteRequest]) (*connect.Response[v1.RemoveRouteResponse], error)
	UpdateRoute(context.Context, *connect.Request[v1.UpdateRouteRequest]) (*connect.Response[v1.UpdateRouteResponse], error)
	ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error)
}

// NewConfigurationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigurationServiceHandler(svc ConfigurationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configurationServiceMethods := v1.File_gateway_v1_config_proto.Services().ByName("ConfigurationService").Methods()
	configurationServiceGetGatewayConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceGetGatewayConfigProcedure,
		svc.GetGatewayConfig,
		connect.WithSchema(configurationServiceMethods.ByName("GetGatewayConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceUpdateGatewayConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceUpdateGatewayConfigProcedure,
		svc.UpdateGatewayConfig,
		connect.WithSchema(configurationServiceMethods.ByName("UpdateGatewayConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceAddRouteHandler := connect.NewUnaryHandler(
		ConfigurationServiceAddRouteProcedure,
		svc.AddRoute,
		connect.WithSchema(configurationServiceMethods.ByName("AddRoute")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceRemoveRouteHandler := connect.NewUnaryHandler(
		ConfigurationServiceRemoveRouteProcedure,
		svc.RemoveRoute,
		connect.WithSchema(configurationServiceMethods.ByName("RemoveRoute")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceUpdateRouteHandler := connect.NewUnaryHandler(
		ConfigurationServiceUpdateRouteProcedure,
		svc.UpdateRoute,
		connect.WithSchema(configurationServiceMethods.ByName("UpdateRoute")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceListRoutesHandler := connect.NewUnaryHandler(
		ConfigurationServiceListRoutesProcedure,
		svc.ListRoutes,
		connect.WithSchema(configurationServiceMethods.ByName("ListRoutes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1consortium.gateway.ConfigurationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigurationServiceGetGatewayConfigProcedure:
			configurationServiceGetGatewayConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceUpdateGatewayConfigProcedure:
			configurationServiceUpdateGatewayConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceAddRouteProcedure:
			configurationServiceAddRouteHandler.ServeHTTP(w, r)
		case ConfigurationServiceRemoveRouteProcedure:
			configurationServiceRemoveRouteHandler.ServeHTTP(w, r)
		case ConfigurationServiceUpdateRouteProcedure:
			configurationServiceUpdateRouteHandler.ServeHTTP(w, r)
		case ConfigurationServiceListRoutesProcedure:
			configurationServiceListRoutesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigurationServiceHandler struct{}

func (UnimplementedConfigurationServiceHandler) GetGatewayConfig(context.Context, *connect.Request[v1.GetGatewayConfigRequest]) (*connect.Response[v1.GetGatewayConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.ConfigurationService.GetGatewayConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) UpdateGatewayConfig(context.Context, *connect.Request[v1.UpdateGatewayConfigRequest]) (*connect.Response[v1.UpdateGatewayConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.ConfigurationService.UpdateGatewayConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) AddRoute(context.Context, *connect.Request[v1.AddRouteRequest]) (*connect.Response[v1.AddRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.ConfigurationService.AddRoute is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) RemoveRoute(context.Context, *connect.Request[v1.RemoveRouteRequest]) (*connect.Response[v1.RemoveRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.ConfigurationService.RemoveRoute is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) UpdateRoute(context.Context, *connect.Request[v1.UpdateRouteRequest]) (*connect.Response[v1.UpdateRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.ConfigurationService.UpdateRoute is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) ListRoutes(context.Context, *connect.Request[v1.ListRoutesRequest]) (*connect.Response[v1.ListRoutesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1consortium.gateway.ConfigurationService.ListRoutes is not implemented"))
}
