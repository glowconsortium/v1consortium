// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: gateway/v1/monitoring.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitoringService_RecordMetric_FullMethodName        = "/v1consortium.gateway.MonitoringService/RecordMetric"
	MonitoringService_GetMetrics_FullMethodName          = "/v1consortium.gateway.MonitoringService/GetMetrics"
	MonitoringService_GetGatewayStatus_FullMethodName    = "/v1consortium.gateway.MonitoringService/GetGatewayStatus"
	MonitoringService_RecordError_FullMethodName         = "/v1consortium.gateway.MonitoringService/RecordError"
	MonitoringService_GetErrorStats_FullMethodName       = "/v1consortium.gateway.MonitoringService/GetErrorStats"
	MonitoringService_GetPerformanceStats_FullMethodName = "/v1consortium.gateway.MonitoringService/GetPerformanceStats"
	MonitoringService_GetRateLimitStats_FullMethodName   = "/v1consortium.gateway.MonitoringService/GetRateLimitStats"
)

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Monitoring Service Definition
type MonitoringServiceClient interface {
	// Metrics Collection and Retrieval
	RecordMetric(ctx context.Context, in *RecordMetricRequest, opts ...grpc.CallOption) (*RecordMetricResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	// Health and Status
	GetGatewayStatus(ctx context.Context, in *GetGatewayStatusRequest, opts ...grpc.CallOption) (*GetGatewayStatusResponse, error)
	// Error Tracking
	RecordError(ctx context.Context, in *RecordErrorRequest, opts ...grpc.CallOption) (*RecordErrorResponse, error)
	GetErrorStats(ctx context.Context, in *GetErrorStatsRequest, opts ...grpc.CallOption) (*GetErrorStatsResponse, error)
	// Performance Monitoring
	GetPerformanceStats(ctx context.Context, in *GetPerformanceStatsRequest, opts ...grpc.CallOption) (*GetPerformanceStatsResponse, error)
	// Rate Limit Monitoring
	GetRateLimitStats(ctx context.Context, in *GetRateLimitStatsRequest, opts ...grpc.CallOption) (*GetRateLimitStatsResponse, error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) RecordMetric(ctx context.Context, in *RecordMetricRequest, opts ...grpc.CallOption) (*RecordMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordMetricResponse)
	err := c.cc.Invoke(ctx, MonitoringService_RecordMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetGatewayStatus(ctx context.Context, in *GetGatewayStatusRequest, opts ...grpc.CallOption) (*GetGatewayStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGatewayStatusResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetGatewayStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) RecordError(ctx context.Context, in *RecordErrorRequest, opts ...grpc.CallOption) (*RecordErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordErrorResponse)
	err := c.cc.Invoke(ctx, MonitoringService_RecordError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetErrorStats(ctx context.Context, in *GetErrorStatsRequest, opts ...grpc.CallOption) (*GetErrorStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetErrorStatsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetErrorStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetPerformanceStats(ctx context.Context, in *GetPerformanceStatsRequest, opts ...grpc.CallOption) (*GetPerformanceStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPerformanceStatsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetPerformanceStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetRateLimitStats(ctx context.Context, in *GetRateLimitStatsRequest, opts ...grpc.CallOption) (*GetRateLimitStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRateLimitStatsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetRateLimitStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations must embed UnimplementedMonitoringServiceServer
// for forward compatibility.
//
// Monitoring Service Definition
type MonitoringServiceServer interface {
	// Metrics Collection and Retrieval
	RecordMetric(context.Context, *RecordMetricRequest) (*RecordMetricResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	// Health and Status
	GetGatewayStatus(context.Context, *GetGatewayStatusRequest) (*GetGatewayStatusResponse, error)
	// Error Tracking
	RecordError(context.Context, *RecordErrorRequest) (*RecordErrorResponse, error)
	GetErrorStats(context.Context, *GetErrorStatsRequest) (*GetErrorStatsResponse, error)
	// Performance Monitoring
	GetPerformanceStats(context.Context, *GetPerformanceStatsRequest) (*GetPerformanceStatsResponse, error)
	// Rate Limit Monitoring
	GetRateLimitStats(context.Context, *GetRateLimitStatsRequest) (*GetRateLimitStatsResponse, error)
	mustEmbedUnimplementedMonitoringServiceServer()
}

// UnimplementedMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringServiceServer struct{}

func (UnimplementedMonitoringServiceServer) RecordMetric(context.Context, *RecordMetricRequest) (*RecordMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordMetric not implemented")
}
func (UnimplementedMonitoringServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMonitoringServiceServer) GetGatewayStatus(context.Context, *GetGatewayStatusRequest) (*GetGatewayStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayStatus not implemented")
}
func (UnimplementedMonitoringServiceServer) RecordError(context.Context, *RecordErrorRequest) (*RecordErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordError not implemented")
}
func (UnimplementedMonitoringServiceServer) GetErrorStats(context.Context, *GetErrorStatsRequest) (*GetErrorStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorStats not implemented")
}
func (UnimplementedMonitoringServiceServer) GetPerformanceStats(context.Context, *GetPerformanceStatsRequest) (*GetPerformanceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceStats not implemented")
}
func (UnimplementedMonitoringServiceServer) GetRateLimitStats(context.Context, *GetRateLimitStatsRequest) (*GetRateLimitStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateLimitStats not implemented")
}
func (UnimplementedMonitoringServiceServer) mustEmbedUnimplementedMonitoringServiceServer() {}
func (UnimplementedMonitoringServiceServer) testEmbeddedByValue()                           {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_RecordMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).RecordMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_RecordMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).RecordMetric(ctx, req.(*RecordMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetGatewayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetGatewayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetGatewayStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetGatewayStatus(ctx, req.(*GetGatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_RecordError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).RecordError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_RecordError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).RecordError(ctx, req.(*RecordErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetErrorStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrorStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetErrorStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetErrorStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetErrorStats(ctx, req.(*GetErrorStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetPerformanceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetPerformanceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetPerformanceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetPerformanceStats(ctx, req.(*GetPerformanceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetRateLimitStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateLimitStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetRateLimitStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetRateLimitStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetRateLimitStats(ctx, req.(*GetRateLimitStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.gateway.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordMetric",
			Handler:    _MonitoringService_RecordMetric_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _MonitoringService_GetMetrics_Handler,
		},
		{
			MethodName: "GetGatewayStatus",
			Handler:    _MonitoringService_GetGatewayStatus_Handler,
		},
		{
			MethodName: "RecordError",
			Handler:    _MonitoringService_RecordError_Handler,
		},
		{
			MethodName: "GetErrorStats",
			Handler:    _MonitoringService_GetErrorStats_Handler,
		},
		{
			MethodName: "GetPerformanceStats",
			Handler:    _MonitoringService_GetPerformanceStats_Handler,
		},
		{
			MethodName: "GetRateLimitStats",
			Handler:    _MonitoringService_GetRateLimitStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/monitoring.proto",
}
