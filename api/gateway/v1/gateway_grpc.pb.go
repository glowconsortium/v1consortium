// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: gateway/v1/gateway.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayService_Authenticate_FullMethodName            = "/v1consortium.gateway.GatewayService/Authenticate"
	GatewayService_CheckRateLimit_FullMethodName          = "/v1consortium.gateway.GatewayService/CheckRateLimit"
	GatewayService_ValidateRequest_FullMethodName         = "/v1consortium.gateway.GatewayService/ValidateRequest"
	GatewayService_GetServiceHealth_FullMethodName        = "/v1consortium.gateway.GatewayService/GetServiceHealth"
	GatewayService_ListServices_FullMethodName            = "/v1consortium.gateway.GatewayService/ListServices"
	GatewayService_Route_FullMethodName                   = "/v1consortium.gateway.GatewayService/Route"
	GatewayService_LogApiRequest_FullMethodName           = "/v1consortium.gateway.GatewayService/LogApiRequest"
	GatewayService_GetCircuitBreakerStatus_FullMethodName = "/v1consortium.gateway.GatewayService/GetCircuitBreakerStatus"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Gateway Service Definition
type GatewayServiceClient interface {
	// Authentication and Authorization
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// Rate Limiting
	CheckRateLimit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResponse, error)
	// Request Validation
	ValidateRequest(ctx context.Context, in *ValidateRequestRequest, opts ...grpc.CallOption) (*ValidateRequestResponse, error)
	// Service Discovery
	GetServiceHealth(ctx context.Context, in *ServiceHealthRequest, opts ...grpc.CallOption) (*ServiceHealthResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// Request Routing
	Route(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
	// Audit and Logging
	LogApiRequest(ctx context.Context, in *LogApiRequestRequest, opts ...grpc.CallOption) (*LogApiRequestResponse, error)
	// Circuit Breaker
	GetCircuitBreakerStatus(ctx context.Context, in *CircuitBreakerStatusRequest, opts ...grpc.CallOption) (*CircuitBreakerStatusResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, GatewayService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CheckRateLimit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateLimitResponse)
	err := c.cc.Invoke(ctx, GatewayService_CheckRateLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ValidateRequest(ctx context.Context, in *ValidateRequestRequest, opts ...grpc.CallOption) (*ValidateRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateRequestResponse)
	err := c.cc.Invoke(ctx, GatewayService_ValidateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetServiceHealth(ctx context.Context, in *ServiceHealthRequest, opts ...grpc.CallOption) (*ServiceHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceHealthResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetServiceHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Route(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, GatewayService_Route_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) LogApiRequest(ctx context.Context, in *LogApiRequestRequest, opts ...grpc.CallOption) (*LogApiRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogApiRequestResponse)
	err := c.cc.Invoke(ctx, GatewayService_LogApiRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetCircuitBreakerStatus(ctx context.Context, in *CircuitBreakerStatusRequest, opts ...grpc.CallOption) (*CircuitBreakerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CircuitBreakerStatusResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetCircuitBreakerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
//
// Gateway Service Definition
type GatewayServiceServer interface {
	// Authentication and Authorization
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// Rate Limiting
	CheckRateLimit(context.Context, *RateLimitRequest) (*RateLimitResponse, error)
	// Request Validation
	ValidateRequest(context.Context, *ValidateRequestRequest) (*ValidateRequestResponse, error)
	// Service Discovery
	GetServiceHealth(context.Context, *ServiceHealthRequest) (*ServiceHealthResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// Request Routing
	Route(context.Context, *RouteRequest) (*RouteResponse, error)
	// Audit and Logging
	LogApiRequest(context.Context, *LogApiRequestRequest) (*LogApiRequestResponse, error)
	// Circuit Breaker
	GetCircuitBreakerStatus(context.Context, *CircuitBreakerStatusRequest) (*CircuitBreakerStatusResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedGatewayServiceServer) CheckRateLimit(context.Context, *RateLimitRequest) (*RateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRateLimit not implemented")
}
func (UnimplementedGatewayServiceServer) ValidateRequest(context.Context, *ValidateRequestRequest) (*ValidateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRequest not implemented")
}
func (UnimplementedGatewayServiceServer) GetServiceHealth(context.Context, *ServiceHealthRequest) (*ServiceHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceHealth not implemented")
}
func (UnimplementedGatewayServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedGatewayServiceServer) Route(context.Context, *RouteRequest) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedGatewayServiceServer) LogApiRequest(context.Context, *LogApiRequestRequest) (*LogApiRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogApiRequest not implemented")
}
func (UnimplementedGatewayServiceServer) GetCircuitBreakerStatus(context.Context, *CircuitBreakerStatusRequest) (*CircuitBreakerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircuitBreakerStatus not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CheckRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CheckRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CheckRateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CheckRateLimit(ctx, req.(*RateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ValidateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ValidateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ValidateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ValidateRequest(ctx, req.(*ValidateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetServiceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetServiceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetServiceHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetServiceHealth(ctx, req.(*ServiceHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Route_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Route(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_LogApiRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogApiRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).LogApiRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_LogApiRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).LogApiRequest(ctx, req.(*LogApiRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetCircuitBreakerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CircuitBreakerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetCircuitBreakerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetCircuitBreakerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetCircuitBreakerStatus(ctx, req.(*CircuitBreakerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1consortium.gateway.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _GatewayService_Authenticate_Handler,
		},
		{
			MethodName: "CheckRateLimit",
			Handler:    _GatewayService_CheckRateLimit_Handler,
		},
		{
			MethodName: "ValidateRequest",
			Handler:    _GatewayService_ValidateRequest_Handler,
		},
		{
			MethodName: "GetServiceHealth",
			Handler:    _GatewayService_GetServiceHealth_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _GatewayService_ListServices_Handler,
		},
		{
			MethodName: "Route",
			Handler:    _GatewayService_Route_Handler,
		},
		{
			MethodName: "LogApiRequest",
			Handler:    _GatewayService_LogApiRequest_Handler,
		},
		{
			MethodName: "GetCircuitBreakerStatus",
			Handler:    _GatewayService_GetCircuitBreakerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/gateway.proto",
}
