syntax = "proto3";

package v1consortium.auth;

import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/protobuf/timestamp.proto";

option go_package = "v1consortium/api/auth/v1";

// Authentication Request and Response Messages
message LoginRequest {
  string email = 1;
  string password = 2;
  bool remember_me = 3;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  UserSession user = 4;
  string session_id = 5;
}

// Step 1: Initial Signup - User Information
message SignupRequest {
  string email = 1;
  string password = 2;
  string first_name = 3;
  string last_name = 4;
  string invitation_token = 5; // Optional invitation token
  string company_name = 6; // Optional company name
  bool is_dot_company = 7; // Optional flag to indicate if the company is a .com company
  string dot_number = 8; // Optional DOT number for .com companies
}

message SignupResponse {
  string workflow_id = 1;
  string message = 2;
  bool requires_email_verification = 3;
}

// Social Signup - OAuth/Social Login
message SocialSignupRequest {
  string provider = 1; // "google", "facebook", "github", etc.
  string provider_token = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string invitation_token = 6; // Optional invitation token
}

message SocialSignupResponse {
  string workflow_id = 1;
  string message = 2;
  bool requires_email_verification = 3;
}

// Step 2: Complete Registration - After Email Verification and Subscription
message CompleteRegistrationRequest {
  string workflow_id = 1;
  string email_verification_token = 2;
  string organization_id = 3;
  string role = 4;
  string subscription_plan = 5; // Optional subscription plan
}

message CompleteRegistrationResponse {
  string user_id = 1;
  string access_token = 2;
  string refresh_token = 3;
  google.protobuf.Timestamp expires_at = 4;
  UserSession user = 5;
  string session_id = 6;
  string message = 7;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
}

message LogoutRequest {
  string access_token = 1;
}

message LogoutResponse {
  string message = 1;
}

message ForgotPasswordRequest {
  string email = 1;
}

message ForgotPasswordResponse {
  string message = 1;
}

message ResetPasswordRequest {
  string token = 1;
  string new_password = 2;
}

message ResetPasswordResponse {
  string message = 1;
}

message VerifyEmailRequest {
  string token = 1;
}

message VerifyEmailResponse {
  string message = 1;
}

message ChangePasswordRequest {
  string current_password = 1;
  string new_password = 2;
}

message ChangePasswordResponse {
  string message = 1;
}

// MFA Messages
message EnableMFARequest {
  string user_id = 1;
  string method = 2; // "totp", "sms", "email"
}

message EnableMFAResponse {
  string secret = 1;
  string qr_code = 2;
  repeated string backup_codes = 3;
}

message VerifyMFARequest {
  string user_id = 1;
  string code = 2;
  string method = 3;
}

message VerifyMFAResponse {
  bool verified = 1;
  string message = 2;
}

message DisableMFARequest {
  string user_id = 1;
  string password = 2;
}

message DisableMFAResponse {
  string message = 1;
}

// Workflow Management Messages
message GetSignupStatusRequest {
  string workflow_id = 1;
}

message GetSignupStatusResponse {
  string workflow_id = 1;
  string status = 2; // "pending_verification", "verified", "completed", "expired", "failed"
  string email = 3;
  bool email_verified = 4;
  bool subscription_completed = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp expires_at = 7;
  string next_step = 8; // Description of what the user needs to do next
}

message ResendVerificationRequest {
  string workflow_id = 1;
}

message ResendVerificationResponse {
  string message = 1;
  bool sent = 2;
}

// Session and User Information
message UserSession {
  string user_id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
  string organization_id = 5;
  string organization_name = 6;
  string role = 7;
  repeated string permissions = 8;
  bool mfa_enabled = 9;
  bool email_verified = 10;
  google.protobuf.Timestamp last_login = 11;
}

message GetUserRequest {
  string user_id = 1;
}

message GetUserResponse {
  UserSession user = 1;
}

message UpdateUserRequest {
  string user_id = 1;
  string first_name = 2;
  string last_name = 3;
  string phone = 4;
}

message UpdateUserResponse {
  UserSession user = 1;
}

// Permission and Role Management
message CheckPermissionRequest {
  string user_id = 1;
  string permission = 2;
  string resource_id = 3;
}

message CheckPermissionResponse {
  bool allowed = 1;
  string reason = 2;
}

message GetUserPermissionsRequest {
  string user_id = 1;
}

message GetUserPermissionsResponse {
  repeated string permissions = 1;
  string role = 2;
}

// Authentication Service Definition
service AuthService {
  // Authentication Operations
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
  }

  // New Two-Step Signup Process
  rpc Signup(SignupRequest) returns (SignupResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/signup"
      body: "*"
    };
  }

  rpc SocialSignup(SocialSignupRequest) returns (SocialSignupResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/signup/social"
      body: "*"
    };
  }

  rpc CompleteRegistration(CompleteRegistrationRequest) returns (CompleteRegistrationResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/signup/complete"
      body: "*"
    };
  }

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/refresh"
      body: "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/logout"
      body: "*"
    };
  }

  // Password Management
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/forgot-password"
      body: "*"
    };
  }

  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/reset-password"
      body: "*"
    };
  }

  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      put: "/api/v1/auth/change-password"
      body: "*"
    };
  }

  // Email Verification
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/verify-email"
      body: "*"
    };
  }

  // Multi-Factor Authentication
  rpc EnableMFA(EnableMFARequest) returns (EnableMFAResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/mfa/enable"
      body: "*"
    };
  }

  rpc VerifyMFA(VerifyMFARequest) returns (VerifyMFAResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/mfa/verify"
      body: "*"
    };
  }

  rpc DisableMFA(DisableMFARequest) returns (DisableMFAResponse) {
    option (google.api.http) = {
      delete: "/api/v1/auth/mfa"
      body: "*"
    };
  }

  // User Management
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {get: "/api/v1/auth/users/{user_id}"};
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/api/v1/auth/users/{user_id}"
      body: "*"
    };
  }

  // Authorization
  rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/check-permission"
      body: "*"
    };
  }

  rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse) {
    option (google.api.http) = {get: "/api/v1/auth/users/{user_id}/permissions"};
  }

  // Workflow Management
  rpc GetSignupStatus(GetSignupStatusRequest) returns (GetSignupStatusResponse) {
    option (google.api.http) = {get: "/api/v1/auth/signup/status/{workflow_id}"};
  }

  rpc ResendVerification(ResendVerificationRequest) returns (ResendVerificationResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/signup/resend-verification"
      body: "*"
    };
  }
}
